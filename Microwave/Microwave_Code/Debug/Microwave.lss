
Microwave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004dc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019a  00800060  00004dc8  00004e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001fa  008001fa  00004ff6  2**0
                  ALLOC
  3 .stab         000051e4  00000000  00000000  00004ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d30  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c29e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000110be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011a2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_1>
       8:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_2>
       c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <main>
      8a:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 26 	jmp	0x4d8e	; 0x4d8e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ef       	ldi	r22, 0xF2	; 242
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b7 26 	jmp	0x4d6e	; 0x4d6e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d3 26 	jmp	0x4da6	; 0x4da6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d7 26 	jmp	0x4dae	; 0x4dae <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 50       	subi	r30, 0x06	; 6
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <config_prescaler>:
#include "timer1_Private.h"
#include "timer1_Config.h"
#include "../../../MCAL/DIO/DIO_Interface.h"
#include "util/delay.h"

void config_prescaler(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,1); // CS01
	CLEAR_BIT(TCCR1B,2); // CS02


#elif prescaler  ==  scale_256
	CLEAR_BIT(TCCR1B,0); // CS00
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,1); // CS01
     e44:	ae e4       	ldi	r26, 0x4E	; 78
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ee e4       	ldi	r30, 0x4E	; 78
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,2); // CS02
     e52:	ae e4       	ldi	r26, 0x4E	; 78
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e4       	ldi	r30, 0x4E	; 78
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	84 60       	ori	r24, 0x04	; 4
     e5e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,0); // CS00
	CLEAR_BIT(TCCR1B,1); // CS01
	SET_BIT(TCCR1B,2); // CS02
#endif

}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <Waveform_GenerationMode>:
void Waveform_GenerationMode(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,3); // WGM12
	SET_BIT(TCCR1B,4); // WGM13


#elif  Waveform_Generation_Mode == Fast_PWM_ICR1
	CLEAR_BIT(TCCR1A,0); // WGM10
     e6e:	af e4       	ldi	r26, 0x4F	; 79
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ef e4       	ldi	r30, 0x4F	; 79
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1); // WGM11
     e7c:	af e4       	ldi	r26, 0x4F	; 79
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ef e4       	ldi	r30, 0x4F	; 79
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3); // WGM12
     e8a:	ae e4       	ldi	r26, 0x4E	; 78
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ee e4       	ldi	r30, 0x4E	; 78
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4); // WGM13
     e98:	ae e4       	ldi	r26, 0x4E	; 78
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ee e4       	ldi	r30, 0x4E	; 78
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 61       	ori	r24, 0x10	; 16
     ea4:	8c 93       	st	X, r24
	ICR1 = ICR1_Value;
     ea6:	e6 e4       	ldi	r30, 0x46	; 70
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 e7       	ldi	r24, 0x70	; 112
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
	SET_BIT(TCCR1A,1); // WGM11
	SET_BIT(TCCR1B,3); // WGM12
	SET_BIT(TCCR1B,4); // WGM13

#endif
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <comape_output_mode>:

void comape_output_mode(void){
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	/*fast PWM or PWM or compare mode or compare match*/
#if  Channel_number ==  Channel_A
#if  comape_mode ==  Non_Inverting_mode
	CLEAR_BIT(TCCR1A,6);
     ec0:	af e4       	ldi	r26, 0x4F	; 79
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ef e4       	ldi	r30, 0x4F	; 79
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 7b       	andi	r24, 0xBF	; 191
     ecc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
     ece:	af e4       	ldi	r26, 0x4F	; 79
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ef e4       	ldi	r30, 0x4F	; 79
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 68       	ori	r24, 0x80	; 128
     eda:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,4);
	CLEAR_BIT(TCCR1A,5);
#endif

#endif
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <timer1_init>:



void timer1_init(){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
#if  Waveform_Generation_Mode == Fast_PWM_ICR1
	config_prescaler();       /*config prescaler 256*/
     eea:	0e 94 17 07 	call	0xe2e	; 0xe2e <config_prescaler>
	Waveform_GenerationMode();/*fast pwm mode*/
     eee:	0e 94 33 07 	call	0xe66	; 0xe66 <Waveform_GenerationMode>
	comape_output_mode();     /*output mode is inverting mode*/
     ef2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <comape_output_mode>

#elif

#endif

}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <Timer1_Load_OCR1>:

void Timer1_Load_OCR1 (u16 Copy_U8_OCR1)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <Timer1_Load_OCR1+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
#if  Channel_number ==  Channel_A
	TCNT1 =0;
     f0a:	ec e4       	ldi	r30, 0x4C	; 76
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	11 82       	std	Z+1, r1	; 0x01
     f10:	10 82       	st	Z, r1
	OCR1A= Copy_U8_OCR1 ;
     f12:	ea e4       	ldi	r30, 0x4A	; 74
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
#elif Channel_number ==  Channel_B
	TCNT1 = 0 ;
	OCR1B = Copy_U8_OCR1 ;

#endif
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <__vector_11>:
u16 count = 0 ;
u8 overload = 0;

static volatile void(*callptr)(void) = NULL_PTR;
/*ISR Function Call*/
void __vector_11(void){
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	count++;
     f52:	80 91 fa 01 	lds	r24, 0x01FA
     f56:	90 91 fb 01 	lds	r25, 0x01FB
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	90 93 fb 01 	sts	0x01FB, r25
     f60:	80 93 fa 01 	sts	0x01FA, r24
	if(count == 3906){
     f64:	80 91 fa 01 	lds	r24, 0x01FA
     f68:	90 91 fb 01 	lds	r25, 0x01FB
     f6c:	2f e0       	ldi	r18, 0x0F	; 15
     f6e:	82 34       	cpi	r24, 0x42	; 66
     f70:	92 07       	cpc	r25, r18
     f72:	69 f4       	brne	.+26     	; 0xf8e <__vector_11+0x66>
		TCNT0 = 192; 		   /* preload value*/
     f74:	e2 e5       	ldi	r30, 0x52	; 82
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 ec       	ldi	r24, 0xC0	; 192
     f7a:	80 83       	st	Z, r24
		(*callptr)();         /*To call function*/
     f7c:	e0 91 fd 01 	lds	r30, 0x01FD
     f80:	f0 91 fe 01 	lds	r31, 0x01FE
     f84:	09 95       	icall
		count = 0;
     f86:	10 92 fb 01 	sts	0x01FB, r1
     f8a:	10 92 fa 01 	sts	0x01FA, r1
	}

}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <SetCallBack>:

void SetCallBack(void(*a_ptr)(void))
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <SetCallBack+0x6>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01

	callptr = a_ptr; /*give address function processing to the pointer pointer*/
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	90 93 fe 01 	sts	0x01FE, r25
     fca:	80 93 fd 01 	sts	0x01FD, r24
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <Timer0_voidInit>:


void Timer0_voidInit(void){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_MODE  ==  OVERFLOW_MODE)
	GIE_Disable();                    /*disable interrupt enable*/
     fe0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GIE_Disable>
	config_prescaler();               /*config prescaler as 8*/
     fe4:	0e 94 0a 08 	call	0x1014	; 0x1014 <config_prescaler>
	waveform_modes();                 /*configure normal mode*/
     fe8:	0e 94 26 08 	call	0x104c	; 0x104c <waveform_modes>
	TCNT0 = 192; 		              /* preload value*/
     fec:	e2 e5       	ldi	r30, 0x52	; 82
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 ec       	ldi	r24, 0xC0	; 192
     ff2:	80 83       	st	Z, r24
	GIE_Enable();                     /*set globale interrupt enable*/
     ff4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GIE_Enable>
	SET_BIT(TIMSK,0);     	          /*timer overflow interrupt enable*/
     ff8:	a9 e5       	ldi	r26, 0x59	; 89
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e9 e5       	ldi	r30, 0x59	; 89
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	8c 93       	st	X, r24
	Compare_modes();                  /*disconnected*/
    1006:	0e 94 3b 08 	call	0x1076	; 0x1076 <Compare_modes>
	FastPWM_modes();                  /*disconnected*/
    100a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <FastPWM_modes>
	waveform_modes();                 /*set  fast pwm mode*/
	FastPWM_modes();                  /*non- inverted mode*/
#endif


}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <config_prescaler>:
static void config_prescaler(void){
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	CLEAR_BIT(TCCR0,2);
	/*set prescaler 64*/
#elif PRESCALER== SCALE_8
	CLEAR_BIT(TCCR0,0);
    101c:	a3 e5       	ldi	r26, 0x53	; 83
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e3 e5       	ldi	r30, 0x53	; 83
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8e 7f       	andi	r24, 0xFE	; 254
    1028:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    102a:	a3 e5       	ldi	r26, 0x53	; 83
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e3 e5       	ldi	r30, 0x53	; 83
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,2);
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8b 7f       	andi	r24, 0xFB	; 251
    1044:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,0);
	CLEAR_BIT(TCCR0,1);
	CLEAR_BIT(TCCR0,2);
#endif

}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <waveform_modes>:

static void waveform_modes(void){
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
#if WAVEFORM_MODE == NORMAL
	CLEAR_BIT(TCCR0,3);
    1054:	a3 e5       	ldi	r26, 0x53	; 83
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e3 e5       	ldi	r30, 0x53	; 83
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,6);
    1062:	a3 e5       	ldi	r26, 0x53	; 83
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e3 e5       	ldi	r30, 0x53	; 83
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8f 7b       	andi	r24, 0xBF	; 191
    106e:	8c 93       	st	X, r24
#elif WAVEFORM_MODE ==  FAST_PWM
	SET_BIT(TCCR0,3);
	SET_BIT(TCCR0,6);
#endif

}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <Compare_modes>:

static void Compare_modes(void){
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
#if COMPARE_MODE_MATCH   == OC0_DISCONNECT
	CLEAR_BIT(TCCR0,4);
    107e:	a3 e5       	ldi	r26, 0x53	; 83
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e3 e5       	ldi	r30, 0x53	; 83
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8f 7e       	andi	r24, 0xEF	; 239
    108a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,5);
    108c:	a3 e5       	ldi	r26, 0x53	; 83
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e5       	ldi	r30, 0x53	; 83
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7d       	andi	r24, 0xDF	; 223
    1098:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);

#endif

}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <FastPWM_modes>:

/*modes of pwm*/
static void FastPWM_modes(void){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,5);
#elif  WAVEFORM == INVERTED_MODE
	SET_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
#elif  WAVEFORM  == OC0_DISCONNECTED
	CLEAR_BIT(TCCR0,4);
    10a8:	a3 e5       	ldi	r26, 0x53	; 83
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e3 e5       	ldi	r30, 0x53	; 83
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 7e       	andi	r24, 0xEF	; 239
    10b4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,5);
    10b6:	a3 e5       	ldi	r26, 0x53	; 83
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e3 e5       	ldi	r30, 0x53	; 83
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8f 7d       	andi	r24, 0xDF	; 223
    10c2:	8c 93       	st	X, r24

#endif



}
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <EXIT_VidInit>:
#include "../../MCAL/GIE/GIE_Interface.h"

#include <avr/delay.h>


void EXIT_VidInit(void){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62

#if ISC0== FALLING
	SET_BIT(MCUCR,1);
    10d2:	a5 e5       	ldi	r26, 0x55	; 85
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e5       	ldi	r30, 0x55	; 85
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,0);
    10e0:	a5 e5       	ldi	r26, 0x55	; 85
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e5       	ldi	r30, 0x55	; 85
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8e 7f       	andi	r24, 0xFE	; 254
    10ec:	8c 93       	st	X, r24
    DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue(DIO_PORTD,DIO_PIN2,DIO_HIGH);
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	62 e0       	ldi	r22, 0x02	; 2
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	 CLEAR_BIT(MCUCR,0);

	#endif

	 #if ISC1== FALLING
	 	SET_BIT(MCUCR, 3);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	8c 93       	st	X, r24
	 	CLEAR_BIT(MCUCR, 2);
    1110:	a5 e5       	ldi	r26, 0x55	; 85
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e5       	ldi	r30, 0x55	; 85
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	8b 7f       	andi	r24, 0xFB	; 251
    111c:	8c 93       	st	X, r24

	     #endif


	 	#if ISC2== FALLING
	 	CLEAR_BIT(MCUCSR, 6);
    111e:	a4 e5       	ldi	r26, 0x54	; 84
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e4 e5       	ldi	r30, 0x54	; 84
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 7b       	andi	r24, 0xBF	; 191
    112a:	8c 93       	st	X, r24

	 	#elif ISC2== RISING
	 	SET_BIT(MCUCSR,6);
	 	#endif
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <EXIT0_Enable>:

void EXIT0_Enable(void){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	// PIE=Enable	
	SET_BIT(GICR,6);
    113a:	ab e5       	ldi	r26, 0x5B	; 91
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	eb e5       	ldi	r30, 0x5B	; 91
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8c 93       	st	X, r24
	GIE_Enable();
    1148:	0e 94 54 09 	call	0x12a8	; 0x12a8 <GIE_Enable>
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <EXIT0_Disable>:
void EXIT0_Disable(void){
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62

	// PIE=Disable
		CLEAR_BIT(GICR,6);
    115a:	ab e5       	ldi	r26, 0x5B	; 91
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	eb e5       	ldi	r30, 0x5B	; 91
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8f 7b       	andi	r24, 0xBF	; 191
    1166:	8c 93       	st	X, r24

}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <EXIT1_Enable>:
void EXIT1_Enable(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, 7);
    1176:	ab e5       	ldi	r26, 0x5B	; 91
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e5       	ldi	r30, 0x5B	; 91
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	8c 93       	st	X, r24
}
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <EXIT1_Disable>:


void EXIT1_Disable(void)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, 7);
    1192:	ab e5       	ldi	r26, 0x5B	; 91
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e5       	ldi	r30, 0x5B	; 91
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 77       	andi	r24, 0x7F	; 127
    119e:	8c 93       	st	X, r24
}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <EXIT2_Enable>:


void EXIT2_Enable(void)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, 5);
    11ae:	ab e5       	ldi	r26, 0x5B	; 91
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	eb e5       	ldi	r30, 0x5B	; 91
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	80 62       	ori	r24, 0x20	; 32
    11ba:	8c 93       	st	X, r24
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <EXIT2_Disable>:


void EXIT2_Disable(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR, 5);
    11ca:	ab e5       	ldi	r26, 0x5B	; 91
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb e5       	ldi	r30, 0x5B	; 91
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7d       	andi	r24, 0xDF	; 223
    11d6:	8c 93       	st	X, r24
}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <VECT_INT0_CallBack>:


static void(*INT0_CallBack)(void) = NULL_PTR ;

void VECT_INT0_CallBack ( void ( *Copy_INT0_PCallBack )( void )  )
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <VECT_INT0_CallBack+0x6>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
	INT0_CallBack = Copy_INT0_PCallBack ;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	90 93 00 02 	sts	0x0200, r25
    11f4:	80 93 ff 01 	sts	0x01FF, r24

}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <__vector_1>:



void __vector_1(void)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	if(INT0_CallBack != NULL_PTR)
    122c:	80 91 ff 01 	lds	r24, 0x01FF
    1230:	90 91 00 02 	lds	r25, 0x0200
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	29 f0       	breq	.+10     	; 0x1242 <__vector_1+0x40>
		{
			INT0_CallBack() ;
    1238:	e0 91 ff 01 	lds	r30, 0x01FF
    123c:	f0 91 00 02 	lds	r31, 0x0200
    1240:	09 95       	icall
		}
}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	ff 91       	pop	r31
    1248:	ef 91       	pop	r30
    124a:	bf 91       	pop	r27
    124c:	af 91       	pop	r26
    124e:	9f 91       	pop	r25
    1250:	8f 91       	pop	r24
    1252:	7f 91       	pop	r23
    1254:	6f 91       	pop	r22
    1256:	5f 91       	pop	r21
    1258:	4f 91       	pop	r20
    125a:	3f 91       	pop	r19
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <__vector_2>:



void __vector_2(void){
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62

}
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <__vector_3>:


void __vector_3(void){
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62

}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <GIE_Enable>:

#include"../../MCAL/GIE/GIE_Private.h"
#include"../../LIB/BIT_MATH.h"

void GIE_Enable(void)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    12b0:	af e5       	ldi	r26, 0x5F	; 95
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	ef e5       	ldi	r30, 0x5F	; 95
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	8c 93       	st	X, r24
}
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <GIE_Disable>:

void GIE_Disable(void)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,7);
    12cc:	af e5       	ldi	r26, 0x5F	; 95
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e5       	ldi	r30, 0x5F	; 95
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 77       	andi	r24, 0x7F	; 127
    12d8:	8c 93       	st	X, r24
}
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_voidSetPinDirection>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_Type.h"
#include "../../MCAL/DIO/DIO_Private.h"

/*function definition*/
void DIO_voidSetPinDirection(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8state){
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	27 97       	sbiw	r28, 0x07	; 7
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	6a 83       	std	Y+2, r22	; 0x02
    12f8:	4b 83       	std	Y+3, r20	; 0x03
	if(1 ==  copy_u8state){
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <DIO_voidSetPinDirection+0x22>
    1300:	6f c0       	rjmp	.+222    	; 0x13e0 <DIO_voidSetPinDirection+0x100>
		switch(copy_u8port){
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3f 83       	std	Y+7, r19	; 0x07
    130a:	2e 83       	std	Y+6, r18	; 0x06
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	9f 81       	ldd	r25, Y+7	; 0x07
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	49 f1       	breq	.+82     	; 0x1368 <DIO_voidSetPinDirection+0x88>
    1316:	2e 81       	ldd	r18, Y+6	; 0x06
    1318:	3f 81       	ldd	r19, Y+7	; 0x07
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <DIO_voidSetPinDirection+0x4a>
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	9f 81       	ldd	r25, Y+7	; 0x07
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	61 f0       	breq	.+24     	; 0x1340 <DIO_voidSetPinDirection+0x60>
    1328:	d2 c0       	rjmp	.+420    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
    132a:	2e 81       	ldd	r18, Y+6	; 0x06
    132c:	3f 81       	ldd	r19, Y+7	; 0x07
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	71 f1       	breq	.+92     	; 0x1390 <DIO_voidSetPinDirection+0xb0>
    1334:	8e 81       	ldd	r24, Y+6	; 0x06
    1336:	9f 81       	ldd	r25, Y+7	; 0x07
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	91 05       	cpc	r25, r1
    133c:	e9 f1       	breq	.+122    	; 0x13b8 <DIO_voidSetPinDirection+0xd8>
    133e:	c7 c0       	rjmp	.+398    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 0:  SET_BIT(DDRA, copy_u8pin); break;
    1340:	aa e3       	ldi	r26, 0x3A	; 58
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ea e3       	ldi	r30, 0x3A	; 58
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_voidSetPinDirection+0x7e>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_voidSetPinDirection+0x7a>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	b3 c0       	rjmp	.+358    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 1:  SET_BIT(DDRB, copy_u8pin); break;
    1368:	a7 e3       	ldi	r26, 0x37	; 55
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e7 e3       	ldi	r30, 0x37	; 55
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_voidSetPinDirection+0xa6>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_voidSetPinDirection+0xa2>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	9f c0       	rjmp	.+318    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 2:  SET_BIT(DDRC, copy_u8pin); break;
    1390:	a4 e3       	ldi	r26, 0x34	; 52
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e4 e3       	ldi	r30, 0x34	; 52
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_voidSetPinDirection+0xce>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_voidSetPinDirection+0xca>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	8b c0       	rjmp	.+278    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 3:  SET_BIT(DDRD, copy_u8pin); break;
    13b8:	a1 e3       	ldi	r26, 0x31	; 49
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_voidSetPinDirection+0xf6>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_voidSetPinDirection+0xf2>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	77 c0       	rjmp	.+238    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(0 == copy_u8state){
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 23       	and	r24, r24
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <DIO_voidSetPinDirection+0x108>
    13e6:	73 c0       	rjmp	.+230    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		switch(copy_u8port){
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3d 83       	std	Y+5, r19	; 0x05
    13f0:	2c 83       	std	Y+4, r18	; 0x04
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	59 f1       	breq	.+86     	; 0x1452 <DIO_voidSetPinDirection+0x172>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	2c f4       	brge	.+10     	; 0x1410 <DIO_voidSetPinDirection+0x130>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f0       	breq	.+26     	; 0x1428 <DIO_voidSetPinDirection+0x148>
    140e:	5f c0       	rjmp	.+190    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
    1410:	2c 81       	ldd	r18, Y+4	; 0x04
    1412:	3d 81       	ldd	r19, Y+5	; 0x05
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	89 f1       	breq	.+98     	; 0x147c <DIO_voidSetPinDirection+0x19c>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	91 05       	cpc	r25, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <DIO_voidSetPinDirection+0x146>
    1424:	40 c0       	rjmp	.+128    	; 0x14a6 <DIO_voidSetPinDirection+0x1c6>
    1426:	53 c0       	rjmp	.+166    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 0:  CLEAR_BIT(DDRA, copy_u8pin); break;
    1428:	aa e3       	ldi	r26, 0x3A	; 58
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ea e3       	ldi	r30, 0x3A	; 58
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_voidSetPinDirection+0x166>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_voidSetPinDirection+0x162>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	3e c0       	rjmp	.+124    	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 1:  CLEAR_BIT(DDRB, copy_u8pin); break;
    1452:	a7 e3       	ldi	r26, 0x37	; 55
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_voidSetPinDirection+0x190>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_voidSetPinDirection+0x18c>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	29 c0       	rjmp	.+82     	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 2:  CLEAR_BIT(DDRC, copy_u8pin); break;
    147c:	a4 e3       	ldi	r26, 0x34	; 52
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e4 e3       	ldi	r30, 0x34	; 52
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_voidSetPinDirection+0x1ba>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_voidSetPinDirection+0x1b6>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <DIO_voidSetPinDirection+0x1ee>
		case 3:  CLEAR_BIT(DDRD, copy_u8pin); break;
    14a6:	a1 e3       	ldi	r26, 0x31	; 49
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_voidSetPinDirection+0x1e4>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_voidSetPinDirection+0x1e0>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
	}
	else {


	}		
}
    14ce:	27 96       	adiw	r28, 0x07	; 7
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	27 97       	sbiw	r28, 0x07	; 7
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6a 83       	std	Y+2, r22	; 0x02
    14f8:	4b 83       	std	Y+3, r20	; 0x03
	if(1 == copy_u8value){
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <DIO_voidSetPinValue+0x22>
    1500:	6f c0       	rjmp	.+222    	; 0x15e0 <DIO_voidSetPinValue+0x100>

		switch(copy_u8port){
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3f 83       	std	Y+7, r19	; 0x07
    150a:	2e 83       	std	Y+6, r18	; 0x06
    150c:	8e 81       	ldd	r24, Y+6	; 0x06
    150e:	9f 81       	ldd	r25, Y+7	; 0x07
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	49 f1       	breq	.+82     	; 0x1568 <DIO_voidSetPinValue+0x88>
    1516:	2e 81       	ldd	r18, Y+6	; 0x06
    1518:	3f 81       	ldd	r19, Y+7	; 0x07
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <DIO_voidSetPinValue+0x4a>
    1520:	8e 81       	ldd	r24, Y+6	; 0x06
    1522:	9f 81       	ldd	r25, Y+7	; 0x07
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <DIO_voidSetPinValue+0x60>
    1528:	d2 c0       	rjmp	.+420    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
    152a:	2e 81       	ldd	r18, Y+6	; 0x06
    152c:	3f 81       	ldd	r19, Y+7	; 0x07
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	71 f1       	breq	.+92     	; 0x1590 <DIO_voidSetPinValue+0xb0>
    1534:	8e 81       	ldd	r24, Y+6	; 0x06
    1536:	9f 81       	ldd	r25, Y+7	; 0x07
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	e9 f1       	breq	.+122    	; 0x15b8 <DIO_voidSetPinValue+0xd8>
    153e:	c7 c0       	rjmp	.+398    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 0:  SET_BIT(PORTA, copy_u8pin); break;
    1540:	ab e3       	ldi	r26, 0x3B	; 59
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	eb e3       	ldi	r30, 0x3B	; 59
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_voidSetPinValue+0x7e>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_voidSetPinValue+0x7a>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	b3 c0       	rjmp	.+358    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 1:  SET_BIT(PORTB, copy_u8pin); break;
    1568:	a8 e3       	ldi	r26, 0x38	; 56
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e8 e3       	ldi	r30, 0x38	; 56
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_voidSetPinValue+0xa6>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_voidSetPinValue+0xa2>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	9f c0       	rjmp	.+318    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 2:  SET_BIT(PORTC, copy_u8pin); break;
    1590:	a5 e3       	ldi	r26, 0x35	; 53
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e3       	ldi	r30, 0x35	; 53
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_voidSetPinValue+0xce>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_voidSetPinValue+0xca>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	8b c0       	rjmp	.+278    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 3:  SET_BIT(PORTD, copy_u8pin); break;
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_voidSetPinValue+0xf6>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_voidSetPinValue+0xf2>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	77 c0       	rjmp	.+238    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if(0 == copy_u8value){
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 23       	and	r24, r24
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <DIO_voidSetPinValue+0x108>
    15e6:	73 c0       	rjmp	.+230    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		switch(copy_u8port){
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3d 83       	std	Y+5, r19	; 0x05
    15f0:	2c 83       	std	Y+4, r18	; 0x04
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	59 f1       	breq	.+86     	; 0x1652 <DIO_voidSetPinValue+0x172>
    15fc:	2c 81       	ldd	r18, Y+4	; 0x04
    15fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <DIO_voidSetPinValue+0x130>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f0       	breq	.+26     	; 0x1628 <DIO_voidSetPinValue+0x148>
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	89 f1       	breq	.+98     	; 0x167c <DIO_voidSetPinValue+0x19c>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <DIO_voidSetPinValue+0x146>
    1624:	40 c0       	rjmp	.+128    	; 0x16a6 <DIO_voidSetPinValue+0x1c6>
    1626:	53 c0       	rjmp	.+166    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 0:  CLEAR_BIT(PORTA, copy_u8pin); break;
    1628:	ab e3       	ldi	r26, 0x3B	; 59
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	eb e3       	ldi	r30, 0x3B	; 59
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_voidSetPinValue+0x166>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_voidSetPinValue+0x162>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	3e c0       	rjmp	.+124    	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 1:  CLEAR_BIT(PORTB, copy_u8pin); break;
    1652:	a8 e3       	ldi	r26, 0x38	; 56
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_voidSetPinValue+0x190>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_voidSetPinValue+0x18c>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	29 c0       	rjmp	.+82     	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 2:  CLEAR_BIT(PORTC, copy_u8pin); break;
    167c:	a5 e3       	ldi	r26, 0x35	; 53
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e3       	ldi	r30, 0x35	; 53
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_voidSetPinValue+0x1ba>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_voidSetPinValue+0x1b6>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <DIO_voidSetPinValue+0x1ee>
		case 3:  CLEAR_BIT(PORTD, copy_u8pin); break;
    16a6:	a2 e3       	ldi	r26, 0x32	; 50
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e2 e3       	ldi	r30, 0x32	; 50
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_voidSetPinValue+0x1e4>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_voidSetPinValue+0x1e0>
    16c8:	80 95       	com	r24
    16ca:	84 23       	and	r24, r20
    16cc:	8c 93       	st	X, r24


	}


}
    16ce:	27 96       	adiw	r28, 0x07	; 7
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(u8 copy_u8port, u8 copy_u8pin){
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <DIO_voidGetPinValue+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <DIO_voidGetPinValue+0x8>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_voidGetPinValue+0xa>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8b 83       	std	Y+3, r24	; 0x03
    16f0:	6c 83       	std	Y+4, r22	; 0x04

	int result = 0;
    16f2:	1a 82       	std	Y+2, r1	; 0x02
    16f4:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3e 83       	std	Y+6, r19	; 0x06
    16fe:	2d 83       	std	Y+5, r18	; 0x05
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	59 f1       	breq	.+86     	; 0x1760 <DIO_voidGetPinValue+0x80>
    170a:	2d 81       	ldd	r18, Y+5	; 0x05
    170c:	3e 81       	ldd	r19, Y+6	; 0x06
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <DIO_voidGetPinValue+0x3e>
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	69 f0       	breq	.+26     	; 0x1736 <DIO_voidGetPinValue+0x56>
    171c:	5f c0       	rjmp	.+190    	; 0x17dc <DIO_voidGetPinValue+0xfc>
    171e:	2d 81       	ldd	r18, Y+5	; 0x05
    1720:	3e 81       	ldd	r19, Y+6	; 0x06
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	89 f1       	breq	.+98     	; 0x178a <DIO_voidGetPinValue+0xaa>
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <DIO_voidGetPinValue+0x54>
    1732:	40 c0       	rjmp	.+128    	; 0x17b4 <DIO_voidGetPinValue+0xd4>
    1734:	53 c0       	rjmp	.+166    	; 0x17dc <DIO_voidGetPinValue+0xfc>

	case 0: result =  IS_BIT_SET(PINA, copy_u8pin); break;
    1736:	e9 e3       	ldi	r30, 0x39	; 57
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_voidGetPinValue+0x72>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_voidGetPinValue+0x6e>
    1756:	84 23       	and	r24, r20
    1758:	95 23       	and	r25, r21
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	3e c0       	rjmp	.+124    	; 0x17dc <DIO_voidGetPinValue+0xfc>
	case 1: result =  IS_BIT_SET(PINB, copy_u8pin); break;
    1760:	e6 e3       	ldi	r30, 0x36	; 54
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_voidGetPinValue+0x9c>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_voidGetPinValue+0x98>
    1780:	84 23       	and	r24, r20
    1782:	95 23       	and	r25, r21
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	29 c0       	rjmp	.+82     	; 0x17dc <DIO_voidGetPinValue+0xfc>
	case 2: result =  IS_BIT_SET(PINC, copy_u8pin); break;
    178a:	e3 e3       	ldi	r30, 0x33	; 51
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_voidGetPinValue+0xc6>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_voidGetPinValue+0xc2>
    17aa:	84 23       	and	r24, r20
    17ac:	95 23       	and	r25, r21
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <DIO_voidGetPinValue+0xfc>
	case 3: result =  IS_BIT_SET(PIND, copy_u8pin); break;
    17b4:	e0 e3       	ldi	r30, 0x30	; 48
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_voidGetPinValue+0xf0>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_voidGetPinValue+0xec>
    17d4:	84 23       	and	r24, r20
    17d6:	95 23       	and	r25, r21
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01

	}	
	return result;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	26 96       	adiw	r28, 0x06	; 6
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 copy_u8port, u8 copy_u8state){
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <DIO_voidSetPortDirection+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <DIO_voidSetPortDirection+0x8>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3c 83       	std	Y+4, r19	; 0x04
    1808:	2b 83       	std	Y+3, r18	; 0x03
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	d1 f0       	breq	.+52     	; 0x1848 <DIO_voidSetPortDirection+0x58>
    1814:	2b 81       	ldd	r18, Y+3	; 0x03
    1816:	3c 81       	ldd	r19, Y+4	; 0x04
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	2c f4       	brge	.+10     	; 0x1828 <DIO_voidSetPortDirection+0x38>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	61 f0       	breq	.+24     	; 0x183e <DIO_voidSetPortDirection+0x4e>
    1826:	1e c0       	rjmp	.+60     	; 0x1864 <DIO_voidSetPortDirection+0x74>
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	81 f0       	breq	.+32     	; 0x1852 <DIO_voidSetPortDirection+0x62>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	91 05       	cpc	r25, r1
    183a:	81 f0       	breq	.+32     	; 0x185c <DIO_voidSetPortDirection+0x6c>
    183c:	13 c0       	rjmp	.+38     	; 0x1864 <DIO_voidSetPortDirection+0x74>
	{
	case 0: DDRA=copy_u8state; break;
    183e:	ea e3       	ldi	r30, 0x3A	; 58
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	80 83       	st	Z, r24
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <DIO_voidSetPortDirection+0x74>
	case 1: DDRB=copy_u8state; break;
    1848:	e7 e3       	ldi	r30, 0x37	; 55
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	80 83       	st	Z, r24
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <DIO_voidSetPortDirection+0x74>
	case 2: DDRC=copy_u8state; break;
    1852:	e4 e3       	ldi	r30, 0x34	; 52
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	80 83       	st	Z, r24
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <DIO_voidSetPortDirection+0x74>
	case 3: DDRD=copy_u8state; break;
    185c:	e1 e3       	ldi	r30, 0x31	; 49
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	80 83       	st	Z, r24
	}
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 copy_u8port, u8 copy_u8value){
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <DIO_voidSetPortValue+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <DIO_voidSetPortValue+0x8>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3c 83       	std	Y+4, r19	; 0x04
    188a:	2b 83       	std	Y+3, r18	; 0x03
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	d1 f0       	breq	.+52     	; 0x18ca <DIO_voidSetPortValue+0x58>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <DIO_voidSetPortValue+0x38>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <DIO_voidSetPortValue+0x4e>
    18a8:	1e c0       	rjmp	.+60     	; 0x18e6 <DIO_voidSetPortValue+0x74>
    18aa:	2b 81       	ldd	r18, Y+3	; 0x03
    18ac:	3c 81       	ldd	r19, Y+4	; 0x04
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	81 f0       	breq	.+32     	; 0x18d4 <DIO_voidSetPortValue+0x62>
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <DIO_voidSetPortValue+0x6c>
    18be:	13 c0       	rjmp	.+38     	; 0x18e6 <DIO_voidSetPortValue+0x74>
	{
	case 0: PORTA=copy_u8value; break;
    18c0:	eb e3       	ldi	r30, 0x3B	; 59
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	80 83       	st	Z, r24
    18c8:	0e c0       	rjmp	.+28     	; 0x18e6 <DIO_voidSetPortValue+0x74>
	case 1: PORTB=copy_u8value; break;
    18ca:	e8 e3       	ldi	r30, 0x38	; 56
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	80 83       	st	Z, r24
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <DIO_voidSetPortValue+0x74>
	case 2: PORTC=copy_u8value; break;
    18d4:	e5 e3       	ldi	r30, 0x35	; 53
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	80 83       	st	Z, r24
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <DIO_voidSetPortValue+0x74>
	case 3: PORTD=copy_u8value; break;
    18de:	e2 e3       	ldi	r30, 0x32	; 50
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	80 83       	st	Z, r24
	}

}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <DIO_voidTogglePin>:
void  DIO_voidTogglePin(u8 copy_u8port, u8 copy_u8pin){
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <DIO_voidTogglePin+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <DIO_voidTogglePin+0x8>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	3c 83       	std	Y+4, r19	; 0x04
    190c:	2b 83       	std	Y+3, r18	; 0x03
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	91 05       	cpc	r25, r1
    1916:	49 f1       	breq	.+82     	; 0x196a <DIO_voidTogglePin+0x76>
    1918:	2b 81       	ldd	r18, Y+3	; 0x03
    191a:	3c 81       	ldd	r19, Y+4	; 0x04
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	2c f4       	brge	.+10     	; 0x192c <DIO_voidTogglePin+0x38>
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	61 f0       	breq	.+24     	; 0x1942 <DIO_voidTogglePin+0x4e>
    192a:	5a c0       	rjmp	.+180    	; 0x19e0 <DIO_voidTogglePin+0xec>
    192c:	2b 81       	ldd	r18, Y+3	; 0x03
    192e:	3c 81       	ldd	r19, Y+4	; 0x04
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	71 f1       	breq	.+92     	; 0x1992 <DIO_voidTogglePin+0x9e>
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	e9 f1       	breq	.+122    	; 0x19ba <DIO_voidTogglePin+0xc6>
    1940:	4f c0       	rjmp	.+158    	; 0x19e0 <DIO_voidTogglePin+0xec>
	case 0: TOGGLE_BIT(PORTA, copy_u8pin); break;
    1942:	ab e3       	ldi	r26, 0x3B	; 59
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e3       	ldi	r30, 0x3B	; 59
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_voidTogglePin+0x6c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_voidTogglePin+0x68>
    1964:	84 27       	eor	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	3b c0       	rjmp	.+118    	; 0x19e0 <DIO_voidTogglePin+0xec>
	case 1: TOGGLE_BIT(PORTB, copy_u8pin); break;
    196a:	a8 e3       	ldi	r26, 0x38	; 56
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_voidTogglePin+0x94>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <DIO_voidTogglePin+0x90>
    198c:	84 27       	eor	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	27 c0       	rjmp	.+78     	; 0x19e0 <DIO_voidTogglePin+0xec>
	case 2: TOGGLE_BIT(PORTC, copy_u8pin); break;
    1992:	a5 e3       	ldi	r26, 0x35	; 53
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <DIO_voidTogglePin+0xbc>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <DIO_voidTogglePin+0xb8>
    19b4:	84 27       	eor	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	13 c0       	rjmp	.+38     	; 0x19e0 <DIO_voidTogglePin+0xec>
	case 3: TOGGLE_BIT(PORTD, copy_u8pin); break;
    19ba:	a2 e3       	ldi	r26, 0x32	; 50
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e2 e3       	ldi	r30, 0x32	; 50
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_voidTogglePin+0xe4>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_voidTogglePin+0xe0>
    19dc:	84 27       	eor	r24, r20
    19de:	8c 93       	st	X, r24
	}

}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <DIO_voidSetfirstnippleDir>:
void  DIO_voidSetfirstnippleDir(u8 copy_u8port, u8 copy_u8state){
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <DIO_voidSetfirstnippleDir+0x6>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <DIO_voidSetfirstnippleDir+0x8>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_voidSetfirstnippleDir+0xa>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8state == 1){
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <DIO_voidSetfirstnippleDir+0x1a>
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <DIO_voidSetfirstnippleDir+0x98>
		switch(copy_u8port){
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	3e 83       	std	Y+6, r19	; 0x06
    1a10:	2d 83       	std	Y+5, r18	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	e9 f0       	breq	.+58     	; 0x1a56 <DIO_voidSetfirstnippleDir+0x68>
    1a1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <DIO_voidSetfirstnippleDir+0x42>
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <DIO_voidSetfirstnippleDir+0x58>
    1a2e:	6d c0       	rjmp	.+218    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
    1a30:	2d 81       	ldd	r18, Y+5	; 0x05
    1a32:	3e 81       	ldd	r19, Y+6	; 0x06
    1a34:	22 30       	cpi	r18, 0x02	; 2
    1a36:	31 05       	cpc	r19, r1
    1a38:	b1 f0       	breq	.+44     	; 0x1a66 <DIO_voidSetfirstnippleDir+0x78>
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	c9 f0       	breq	.+50     	; 0x1a76 <DIO_voidSetfirstnippleDir+0x88>
    1a44:	62 c0       	rjmp	.+196    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 0:  DDRA |= 0x0f; break;
    1a46:	aa e3       	ldi	r26, 0x3A	; 58
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ea e3       	ldi	r30, 0x3A	; 58
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 60       	ori	r24, 0x0F	; 15
    1a52:	8c 93       	st	X, r24
    1a54:	5a c0       	rjmp	.+180    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 1:  DDRB |= 0x0f; break;
    1a56:	a7 e3       	ldi	r26, 0x37	; 55
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 60       	ori	r24, 0x0F	; 15
    1a62:	8c 93       	st	X, r24
    1a64:	52 c0       	rjmp	.+164    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 2:  DDRC |= 0x0f; break;
    1a66:	a4 e3       	ldi	r26, 0x34	; 52
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e4 e3       	ldi	r30, 0x34	; 52
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 60       	ori	r24, 0x0F	; 15
    1a72:	8c 93       	st	X, r24
    1a74:	4a c0       	rjmp	.+148    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 3:  DDRD |= 0x0f; break;
    1a76:	a1 e3       	ldi	r26, 0x31	; 49
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e1 e3       	ldi	r30, 0x31	; 49
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8f 60       	ori	r24, 0x0F	; 15
    1a82:	8c 93       	st	X, r24
    1a84:	42 c0       	rjmp	.+132    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		}
	}
	else if(copy_u8state == 0){
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <DIO_voidSetfirstnippleDir+0xa0>
    1a8c:	3e c0       	rjmp	.+124    	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		switch(copy_u8port){
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3c 83       	std	Y+4, r19	; 0x04
    1a96:	2b 83       	std	Y+3, r18	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	e9 f0       	breq	.+58     	; 0x1adc <DIO_voidSetfirstnippleDir+0xee>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <DIO_voidSetfirstnippleDir+0xc8>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <DIO_voidSetfirstnippleDir+0xde>
    1ab4:	2a c0       	rjmp	.+84     	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	b1 f0       	breq	.+44     	; 0x1aec <DIO_voidSetfirstnippleDir+0xfe>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	c9 f0       	breq	.+50     	; 0x1afc <DIO_voidSetfirstnippleDir+0x10e>
    1aca:	1f c0       	rjmp	.+62     	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 0:  DDRA &=~ 0xf0; break;
    1acc:	aa e3       	ldi	r26, 0x3A	; 58
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ea e3       	ldi	r30, 0x3A	; 58
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 70       	andi	r24, 0x0F	; 15
    1ad8:	8c 93       	st	X, r24
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 1:  DDRB &=~ 0xf0; break;
    1adc:	a7 e3       	ldi	r26, 0x37	; 55
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e7 e3       	ldi	r30, 0x37	; 55
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8f 70       	andi	r24, 0x0F	; 15
    1ae8:	8c 93       	st	X, r24
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 2:  DDRC &=~ 0xf0; break;
    1aec:	a4 e3       	ldi	r26, 0x34	; 52
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e4 e3       	ldi	r30, 0x34	; 52
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 70       	andi	r24, 0x0F	; 15
    1af8:	8c 93       	st	X, r24
    1afa:	07 c0       	rjmp	.+14     	; 0x1b0a <DIO_voidSetfirstnippleDir+0x11c>
		case 3:  DDRD &=~ 0xf0; break;
    1afc:	a1 e3       	ldi	r26, 0x31	; 49
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e1 e3       	ldi	r30, 0x31	; 49
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8f 70       	andi	r24, 0x0F	; 15
    1b08:	8c 93       	st	X, r24
		}

	}
}
    1b0a:	26 96       	adiw	r28, 0x06	; 6
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <DIO_voidSetlastnippleDir>:
void DIO_voidSetlastnippleDir(u8 copy_u8port, u8 copy_u8state){
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <DIO_voidSetlastnippleDir+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <DIO_voidSetlastnippleDir+0x8>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_voidSetlastnippleDir+0xa>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8state == 1){
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <DIO_voidSetlastnippleDir+0x1a>
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <DIO_voidSetlastnippleDir+0x98>
		switch(copy_u8port){
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3e 83       	std	Y+6, r19	; 0x06
    1b3e:	2d 83       	std	Y+5, r18	; 0x05
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	e9 f0       	breq	.+58     	; 0x1b84 <DIO_voidSetlastnippleDir+0x68>
    1b4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <DIO_voidSetlastnippleDir+0x42>
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <DIO_voidSetlastnippleDir+0x58>
    1b5c:	6d c0       	rjmp	.+218    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
    1b5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b60:	3e 81       	ldd	r19, Y+6	; 0x06
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	b1 f0       	breq	.+44     	; 0x1b94 <DIO_voidSetlastnippleDir+0x78>
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	c9 f0       	breq	.+50     	; 0x1ba4 <DIO_voidSetlastnippleDir+0x88>
    1b72:	62 c0       	rjmp	.+196    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 0:  DDRA |= 0xf0; break;
    1b74:	aa e3       	ldi	r26, 0x3A	; 58
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ea e3       	ldi	r30, 0x3A	; 58
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 6f       	ori	r24, 0xF0	; 240
    1b80:	8c 93       	st	X, r24
    1b82:	5a c0       	rjmp	.+180    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 1:  DDRB |= 0xf0; break;
    1b84:	a7 e3       	ldi	r26, 0x37	; 55
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e7 e3       	ldi	r30, 0x37	; 55
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 6f       	ori	r24, 0xF0	; 240
    1b90:	8c 93       	st	X, r24
    1b92:	52 c0       	rjmp	.+164    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 2:  DDRC |= 0xf0; break;
    1b94:	a4 e3       	ldi	r26, 0x34	; 52
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e4 e3       	ldi	r30, 0x34	; 52
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	80 6f       	ori	r24, 0xF0	; 240
    1ba0:	8c 93       	st	X, r24
    1ba2:	4a c0       	rjmp	.+148    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 3:  DDRD |= 0xf0; break;
    1ba4:	a1 e3       	ldi	r26, 0x31	; 49
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e1 e3       	ldi	r30, 0x31	; 49
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 6f       	ori	r24, 0xF0	; 240
    1bb0:	8c 93       	st	X, r24
    1bb2:	42 c0       	rjmp	.+132    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		}
	}
	else if(copy_u8state == 0){
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <DIO_voidSetlastnippleDir+0xa0>
    1bba:	3e c0       	rjmp	.+124    	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		switch(copy_u8port){
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3c 83       	std	Y+4, r19	; 0x04
    1bc4:	2b 83       	std	Y+3, r18	; 0x03
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	e9 f0       	breq	.+58     	; 0x1c0a <DIO_voidSetlastnippleDir+0xee>
    1bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <DIO_voidSetlastnippleDir+0xc8>
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <DIO_voidSetlastnippleDir+0xde>
    1be2:	2a c0       	rjmp	.+84     	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
    1be4:	2b 81       	ldd	r18, Y+3	; 0x03
    1be6:	3c 81       	ldd	r19, Y+4	; 0x04
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	b1 f0       	breq	.+44     	; 0x1c1a <DIO_voidSetlastnippleDir+0xfe>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	c9 f0       	breq	.+50     	; 0x1c2a <DIO_voidSetlastnippleDir+0x10e>
    1bf8:	1f c0       	rjmp	.+62     	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 0:  DDRA &=~ 0xf0; break;
    1bfa:	aa e3       	ldi	r26, 0x3A	; 58
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ea e3       	ldi	r30, 0x3A	; 58
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 70       	andi	r24, 0x0F	; 15
    1c06:	8c 93       	st	X, r24
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 1:  DDRB &=~ 0xf0; break;
    1c0a:	a7 e3       	ldi	r26, 0x37	; 55
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e7 e3       	ldi	r30, 0x37	; 55
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 70       	andi	r24, 0x0F	; 15
    1c16:	8c 93       	st	X, r24
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 2:  DDRC &=~ 0xf0; break;
    1c1a:	a4 e3       	ldi	r26, 0x34	; 52
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e4 e3       	ldi	r30, 0x34	; 52
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 70       	andi	r24, 0x0F	; 15
    1c26:	8c 93       	st	X, r24
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <DIO_voidSetlastnippleDir+0x11c>
		case 3:  DDRD &=~ 0xf0; break;
    1c2a:	a1 e3       	ldi	r26, 0x31	; 49
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e1 e3       	ldi	r30, 0x31	; 49
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 70       	andi	r24, 0x0F	; 15
    1c36:	8c 93       	st	X, r24
		}
	}

}
    1c38:	26 96       	adiw	r28, 0x06	; 6
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <DIO_voidSetFirstNipple>:

void DIO_voidSetFirstNipple(u8 copy_u8port, u8 copy_u8val){
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <DIO_voidSetFirstNipple+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DIO_voidSetFirstNipple+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	3c 83       	std	Y+4, r19	; 0x04
    1c62:	2b 83       	std	Y+3, r18	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	09 f1       	breq	.+66     	; 0x1cb0 <DIO_voidSetFirstNipple+0x66>
    1c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c70:	3c 81       	ldd	r19, Y+4	; 0x04
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <DIO_voidSetFirstNipple+0x38>
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	61 f0       	breq	.+24     	; 0x1c98 <DIO_voidSetFirstNipple+0x4e>
    1c80:	3a c0       	rjmp	.+116    	; 0x1cf6 <DIO_voidSetFirstNipple+0xac>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	f1 f0       	breq	.+60     	; 0x1cc8 <DIO_voidSetFirstNipple+0x7e>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	83 30       	cpi	r24, 0x03	; 3
    1c92:	91 05       	cpc	r25, r1
    1c94:	29 f1       	breq	.+74     	; 0x1ce0 <DIO_voidSetFirstNipple+0x96>
    1c96:	2f c0       	rjmp	.+94     	; 0x1cf6 <DIO_voidSetFirstNipple+0xac>
	case 0: PORTA = (PORTA & 0xf0) | (copy_u8val & 0x0f);  break;
    1c98:	ab e3       	ldi	r26, 0x3B	; 59
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	eb e3       	ldi	r30, 0x3B	; 59
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	90 7f       	andi	r25, 0xF0	; 240
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	8f 70       	andi	r24, 0x0F	; 15
    1caa:	89 2b       	or	r24, r25
    1cac:	8c 93       	st	X, r24
    1cae:	23 c0       	rjmp	.+70     	; 0x1cf6 <DIO_voidSetFirstNipple+0xac>
	case 1: PORTB = (PORTB & 0xf0) | (copy_u8val & 0x0f);  break;
    1cb0:	a8 e3       	ldi	r26, 0x38	; 56
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e8 e3       	ldi	r30, 0x38	; 56
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	98 2f       	mov	r25, r24
    1cbc:	90 7f       	andi	r25, 0xF0	; 240
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	8f 70       	andi	r24, 0x0F	; 15
    1cc2:	89 2b       	or	r24, r25
    1cc4:	8c 93       	st	X, r24
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <DIO_voidSetFirstNipple+0xac>
	case 2: PORTC = (PORTC & 0xf0) | (copy_u8val & 0x0f);  break;
    1cc8:	a5 e3       	ldi	r26, 0x35	; 53
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e3       	ldi	r30, 0x35	; 53
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	98 2f       	mov	r25, r24
    1cd4:	90 7f       	andi	r25, 0xF0	; 240
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	8f 70       	andi	r24, 0x0F	; 15
    1cda:	89 2b       	or	r24, r25
    1cdc:	8c 93       	st	X, r24
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <DIO_voidSetFirstNipple+0xac>
	case 3: PORTD = (PORTD & 0xf0) | (copy_u8val & 0x0f);  break;
    1ce0:	a2 e3       	ldi	r26, 0x32	; 50
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e2 e3       	ldi	r30, 0x32	; 50
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	98 2f       	mov	r25, r24
    1cec:	90 7f       	andi	r25, 0xF0	; 240
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	8f 70       	andi	r24, 0x0F	; 15
    1cf2:	89 2b       	or	r24, r25
    1cf4:	8c 93       	st	X, r24
	}
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <DIO_voidSetLastNipple>:

void  DIO_voidSetLastNipple(u8 copy_u8port, u8 copy_u8val){
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <DIO_voidSetLastNipple+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <DIO_voidSetLastNipple+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3c 83       	std	Y+4, r19	; 0x04
    1d1c:	2b 83       	std	Y+3, r18	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	09 f1       	breq	.+66     	; 0x1d6a <DIO_voidSetLastNipple+0x66>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <DIO_voidSetLastNipple+0x38>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <DIO_voidSetLastNipple+0x4e>
    1d3a:	3a c0       	rjmp	.+116    	; 0x1db0 <DIO_voidSetLastNipple+0xac>
    1d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	f1 f0       	breq	.+60     	; 0x1d82 <DIO_voidSetLastNipple+0x7e>
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	29 f1       	breq	.+74     	; 0x1d9a <DIO_voidSetLastNipple+0x96>
    1d50:	2f c0       	rjmp	.+94     	; 0x1db0 <DIO_voidSetLastNipple+0xac>
	case 0: PORTA = (PORTA & 0x0f) | (copy_u8val & 0xF0);  break;
    1d52:	ab e3       	ldi	r26, 0x3B	; 59
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e3       	ldi	r30, 0x3B	; 59
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	9f 70       	andi	r25, 0x0F	; 15
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	80 7f       	andi	r24, 0xF0	; 240
    1d64:	89 2b       	or	r24, r25
    1d66:	8c 93       	st	X, r24
    1d68:	23 c0       	rjmp	.+70     	; 0x1db0 <DIO_voidSetLastNipple+0xac>
	case 1: PORTB = (PORTB & 0x0f) | (copy_u8val & 0xF0);  break;
    1d6a:	a8 e3       	ldi	r26, 0x38	; 56
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e8 e3       	ldi	r30, 0x38	; 56
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	98 2f       	mov	r25, r24
    1d76:	9f 70       	andi	r25, 0x0F	; 15
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	80 7f       	andi	r24, 0xF0	; 240
    1d7c:	89 2b       	or	r24, r25
    1d7e:	8c 93       	st	X, r24
    1d80:	17 c0       	rjmp	.+46     	; 0x1db0 <DIO_voidSetLastNipple+0xac>
	case 2: PORTC = (PORTC & 0x0f) | (copy_u8val & 0xF0);  break;
    1d82:	a5 e3       	ldi	r26, 0x35	; 53
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9f 70       	andi	r25, 0x0F	; 15
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	80 7f       	andi	r24, 0xF0	; 240
    1d94:	89 2b       	or	r24, r25
    1d96:	8c 93       	st	X, r24
    1d98:	0b c0       	rjmp	.+22     	; 0x1db0 <DIO_voidSetLastNipple+0xac>
	case 3: PORTD = (PORTD & 0x0f) | (copy_u8val & 0xF0);  break;
    1d9a:	a2 e3       	ldi	r26, 0x32	; 50
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e2 e3       	ldi	r30, 0x32	; 50
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	98 2f       	mov	r25, r24
    1da6:	9f 70       	andi	r25, 0x0F	; 15
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	80 7f       	andi	r24, 0xF0	; 240
    1dac:	89 2b       	or	r24, r25
    1dae:	8c 93       	st	X, r24
	}
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <DIO_voidPlaceFirstNipple>:
void DIO_voidPlaceFirstNipple(u8 copy_u8port, u8 copy_u8val){
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <DIO_voidPlaceFirstNipple+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <DIO_voidPlaceFirstNipple+0x8>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8port){
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3c 83       	std	Y+4, r19	; 0x04
    1dd6:	2b 83       	std	Y+3, r18	; 0x03
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	41 f1       	breq	.+80     	; 0x1e32 <DIO_voidPlaceFirstNipple+0x74>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <DIO_voidPlaceFirstNipple+0x38>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <DIO_voidPlaceFirstNipple+0x4e>
    1df4:	56 c0       	rjmp	.+172    	; 0x1ea2 <DIO_voidPlaceFirstNipple+0xe4>
    1df6:	2b 81       	ldd	r18, Y+3	; 0x03
    1df8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	61 f1       	breq	.+88     	; 0x1e58 <DIO_voidPlaceFirstNipple+0x9a>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	d1 f1       	breq	.+116    	; 0x1e7e <DIO_voidPlaceFirstNipple+0xc0>
    1e0a:	4b c0       	rjmp	.+150    	; 0x1ea2 <DIO_voidPlaceFirstNipple+0xe4>
	case 0: PORTA = (PORTA & 0x0f) | ((copy_u8val & 0x0f)<<4);  break;
    1e0c:	ab e3       	ldi	r26, 0x3B	; 59
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	eb e3       	ldi	r30, 0x3B	; 59
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	28 2f       	mov	r18, r24
    1e18:	2f 70       	andi	r18, 0x0F	; 15
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	82 95       	swap	r24
    1e22:	92 95       	swap	r25
    1e24:	90 7f       	andi	r25, 0xF0	; 240
    1e26:	98 27       	eor	r25, r24
    1e28:	80 7f       	andi	r24, 0xF0	; 240
    1e2a:	98 27       	eor	r25, r24
    1e2c:	82 2b       	or	r24, r18
    1e2e:	8c 93       	st	X, r24
    1e30:	38 c0       	rjmp	.+112    	; 0x1ea2 <DIO_voidPlaceFirstNipple+0xe4>
	case 1: PORTB = (PORTB & 0x0f) | ((copy_u8val & 0x0f)<<4);  break;
    1e32:	a8 e3       	ldi	r26, 0x38	; 56
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e8 e3       	ldi	r30, 0x38	; 56
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	2f 70       	andi	r18, 0x0F	; 15
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	82 95       	swap	r24
    1e48:	92 95       	swap	r25
    1e4a:	90 7f       	andi	r25, 0xF0	; 240
    1e4c:	98 27       	eor	r25, r24
    1e4e:	80 7f       	andi	r24, 0xF0	; 240
    1e50:	98 27       	eor	r25, r24
    1e52:	82 2b       	or	r24, r18
    1e54:	8c 93       	st	X, r24
    1e56:	25 c0       	rjmp	.+74     	; 0x1ea2 <DIO_voidPlaceFirstNipple+0xe4>
	case 2: PORTC = (PORTC & 0x0f) | ((copy_u8val & 0x0f)<<4);  break;
    1e58:	a5 e3       	ldi	r26, 0x35	; 53
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e3       	ldi	r30, 0x35	; 53
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	28 2f       	mov	r18, r24
    1e64:	2f 70       	andi	r18, 0x0F	; 15
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	82 95       	swap	r24
    1e6e:	92 95       	swap	r25
    1e70:	90 7f       	andi	r25, 0xF0	; 240
    1e72:	98 27       	eor	r25, r24
    1e74:	80 7f       	andi	r24, 0xF0	; 240
    1e76:	98 27       	eor	r25, r24
    1e78:	82 2b       	or	r24, r18
    1e7a:	8c 93       	st	X, r24
    1e7c:	12 c0       	rjmp	.+36     	; 0x1ea2 <DIO_voidPlaceFirstNipple+0xe4>
	case 3: PORTD = (PORTD & 0x0f) | ((copy_u8val & 0x0f)<<4);  break;
    1e7e:	a2 e3       	ldi	r26, 0x32	; 50
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e2 e3       	ldi	r30, 0x32	; 50
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	2f 70       	andi	r18, 0x0F	; 15
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	82 95       	swap	r24
    1e94:	92 95       	swap	r25
    1e96:	90 7f       	andi	r25, 0xF0	; 240
    1e98:	98 27       	eor	r25, r24
    1e9a:	80 7f       	andi	r24, 0xF0	; 240
    1e9c:	98 27       	eor	r25, r24
    1e9e:	82 2b       	or	r24, r18
    1ea0:	8c 93       	st	X, r24
	}
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <DIO_voidPLaceLastNipple>:

void DIO_voidPLaceLastNipple(u8 copy_u8port, u8 copy_u8val){
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <DIO_voidPLaceLastNipple+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <DIO_voidPLaceLastNipple+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	3c 83       	std	Y+4, r19	; 0x04
    1ec8:	2b 83       	std	Y+3, r18	; 0x03
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	11 f1       	breq	.+68     	; 0x1f18 <DIO_voidPLaceLastNipple+0x68>
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <DIO_voidPLaceLastNipple+0x38>
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <DIO_voidPLaceLastNipple+0x4e>
    1ee6:	3e c0       	rjmp	.+124    	; 0x1f64 <DIO_voidPLaceLastNipple+0xb4>
    1ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eea:	3c 81       	ldd	r19, Y+4	; 0x04
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	31 05       	cpc	r19, r1
    1ef0:	01 f1       	breq	.+64     	; 0x1f32 <DIO_voidPLaceLastNipple+0x82>
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	83 30       	cpi	r24, 0x03	; 3
    1ef8:	91 05       	cpc	r25, r1
    1efa:	41 f1       	breq	.+80     	; 0x1f4c <DIO_voidPLaceLastNipple+0x9c>
    1efc:	33 c0       	rjmp	.+102    	; 0x1f64 <DIO_voidPLaceLastNipple+0xb4>
	case 0: PORTA = (PORTA & 0x0F) | ((copy_u8val & 0xf0)>>4);  break;
    1efe:	ab e3       	ldi	r26, 0x3B	; 59
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	eb e3       	ldi	r30, 0x3B	; 59
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	98 2f       	mov	r25, r24
    1f0a:	9f 70       	andi	r25, 0x0F	; 15
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	82 95       	swap	r24
    1f10:	8f 70       	andi	r24, 0x0F	; 15
    1f12:	89 2b       	or	r24, r25
    1f14:	8c 93       	st	X, r24
    1f16:	26 c0       	rjmp	.+76     	; 0x1f64 <DIO_voidPLaceLastNipple+0xb4>
	case 1: PORTB = (PORTB & 0x0f) | ((copy_u8val & 0xf0)>>4);  break;
    1f18:	a8 e3       	ldi	r26, 0x38	; 56
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e8 e3       	ldi	r30, 0x38	; 56
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	98 2f       	mov	r25, r24
    1f24:	9f 70       	andi	r25, 0x0F	; 15
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	82 95       	swap	r24
    1f2a:	8f 70       	andi	r24, 0x0F	; 15
    1f2c:	89 2b       	or	r24, r25
    1f2e:	8c 93       	st	X, r24
    1f30:	19 c0       	rjmp	.+50     	; 0x1f64 <DIO_voidPLaceLastNipple+0xb4>
	case 2: PORTC = (PORTC & 0x0f) | ((copy_u8val & 0xf0)>>4);  break;
    1f32:	a5 e3       	ldi	r26, 0x35	; 53
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e5 e3       	ldi	r30, 0x35	; 53
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	9f 70       	andi	r25, 0x0F	; 15
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	82 95       	swap	r24
    1f44:	8f 70       	andi	r24, 0x0F	; 15
    1f46:	89 2b       	or	r24, r25
    1f48:	8c 93       	st	X, r24
    1f4a:	0c c0       	rjmp	.+24     	; 0x1f64 <DIO_voidPLaceLastNipple+0xb4>
	case 3: PORTD = (PORTD & 0x0f) | ((copy_u8val & 0xf0)>>4);  break;
    1f4c:	a2 e3       	ldi	r26, 0x32	; 50
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e2 e3       	ldi	r30, 0x32	; 50
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	98 2f       	mov	r25, r24
    1f58:	9f 70       	andi	r25, 0x0F	; 15
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	82 95       	swap	r24
    1f5e:	8f 70       	andi	r24, 0x0F	; 15
    1f60:	89 2b       	or	r24, r25
    1f62:	8c 93       	st	X, r24
	}
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <ADC_VoidInit>:
#include"../../MCAL/ADC/ADC_Private.h"
#include"../../MCAL/ADC/ADC_Interface.h"
#include"../../MCAL/ADC/ADC_Config.h"

void ADC_VoidInit(void)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
#if ADC_VREF == INTERNAL_OFF
	CLEAR_BIT( ADMUX , 6 ) ;  /*REFS0*/
	CLEAR_BIT( ADMUX , 7 ) ;  /*REFS1*/

#elif ADC_VREF == EXTERNAL_AVCC
	SET_BIT( ADMUX , 6 ) ;   /*REFS0*/
    1f7a:	a7 e2       	ldi	r26, 0x27	; 39
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e7 e2       	ldi	r30, 0x27	; 39
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 64       	ori	r24, 0x40	; 64
    1f86:	8c 93       	st	X, r24
	CLEAR_BIT( ADMUX , 7 ) ; /*REFS1*/
    1f88:	a7 e2       	ldi	r26, 0x27	; 39
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e7 e2       	ldi	r30, 0x27	; 39
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8f 77       	andi	r24, 0x7F	; 127
    1f94:	8c 93       	st	X, r24

#endif


#if ADC_ADJ	== RIGHT_ADJ
	CLEAR_BIT( ADMUX , 5 ) ; /*ADLAR*/
    1f96:	a7 e2       	ldi	r26, 0x27	; 39
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e7 e2       	ldi	r30, 0x27	; 39
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8f 7d       	andi	r24, 0xDF	; 223
    1fa2:	8c 93       	st	X, r24

#endif


#if ADC_PRESCALER == PRESCALER_2
	SET_BIT(ADCSRA, 0);
    1fa4:	a6 e2       	ldi	r26, 0x26	; 38
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e6 e2       	ldi	r30, 0x26	; 38
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	81 60       	ori	r24, 0x01	; 1
    1fb0:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,1);
    1fb2:	a6 e2       	ldi	r26, 0x26	; 38
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e6 e2       	ldi	r30, 0x26	; 38
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8d 7f       	andi	r24, 0xFD	; 253
    1fbe:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,2);
    1fc0:	a6 e2       	ldi	r26, 0x26	; 38
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e6 e2       	ldi	r30, 0x26	; 38
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8b 7f       	andi	r24, 0xFB	; 251
    1fcc:	8c 93       	st	X, r24
	SET_BIT( ADCSRA , 0 ) ;
	SET_BIT( ADCSRA , 1 ) ;
	SET_BIT( ADCSRA , 2 ) ;

#endif
	SET_BIT( ADCSRA , 7 ) ;       /*Enable ADC*/
    1fce:	a6 e2       	ldi	r26, 0x26	; 38
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e6 e2       	ldi	r30, 0x26	; 38
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 68       	ori	r24, 0x80	; 128
    1fda:	8c 93       	st	X, r24
}
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <ADC_U16GetChannelReading>:


u16 ADC_U16GetChannelReading(u8 Channel)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <ADC_U16GetChannelReading+0x6>
    1fe8:	0f 92       	push	r0
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	8b 83       	std	Y+3, r24	; 0x03
	u16 Relult = 0 ;
    1ff0:	1a 82       	std	Y+2, r1	; 0x02
    1ff2:	19 82       	std	Y+1, r1	; 0x01
	ADMUX&= 0XE0 ;                      /*0b11100000*/
    1ff4:	a7 e2       	ldi	r26, 0x27	; 39
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e7 e2       	ldi	r30, 0x27	; 39
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 7e       	andi	r24, 0xE0	; 224
    2000:	8c 93       	st	X, r24
	ADMUX |= Channel ;
    2002:	a7 e2       	ldi	r26, 0x27	; 39
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e7 e2       	ldi	r30, 0x27	; 39
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	90 81       	ld	r25, Z
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	89 2b       	or	r24, r25
    2010:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);                  /* Start Conversion*/
    2012:	a6 e2       	ldi	r26, 0x26	; 38
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e6 e2       	ldi	r30, 0x26	; 38
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 64       	ori	r24, 0x40	; 64
    201e:	8c 93       	st	X, r24
	while(IS_BIT_CLEAR(ADCSRA,4));     	/*polling on the conversion complete flag*/
    2020:	e6 e2       	ldi	r30, 0x26	; 38
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	80 71       	andi	r24, 0x10	; 16
    202c:	90 70       	andi	r25, 0x00	; 0
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	b9 f3       	breq	.-18     	; 0x2020 <ADC_U16GetChannelReading+0x3e>
	SET_BIT(ADCSRA,4);                  /*CLEAR THE FLAG*/
    2032:	a6 e2       	ldi	r26, 0x26	; 38
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e6 e2       	ldi	r30, 0x26	; 38
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	80 61       	ori	r24, 0x10	; 16
    203e:	8c 93       	st	X, r24
	Relult = ADC;                       /*get the result*/
    2040:	e4 e2       	ldi	r30, 0x24	; 36
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
	return Relult;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <POT_VoidInit>:
#include "../../../MCAL/ADC/ADC_Interface.h"
#include "../../../LIB/STD_Type.h"


void POT_VoidInit()
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit();
    2064:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <ADC_VoidInit>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_INPUT);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN1, DIO_INPUT);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>

}
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <POT_U16Read>:
u16 POT_U16Read(u8 Copy_u8ReadPOT35Channal)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <POT_U16Read+0x6>
    2088:	00 d0       	rcall	.+0      	; 0x208a <POT_U16Read+0x8>
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	8d 83       	std	Y+5, r24	; 0x05

	u16 Dig_ADC=ADC_U16GetChannelReading(Copy_u8ReadPOT35Channal);
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <ADC_U16GetChannelReading>
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Anl_ADC=(Dig_ADC * 5000UL )/1023;
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	cc 01       	movw	r24, r24
    20a2:	a0 e0       	ldi	r26, 0x00	; 0
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	28 e8       	ldi	r18, 0x88	; 136
    20a8:	33 e1       	ldi	r19, 0x13	; 19
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__mulsi3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	2f ef       	ldi	r18, 0xFF	; 255
    20bc:	33 e0       	ldi	r19, 0x03	; 3
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 75 26 	call	0x4cea	; 0x4cea <__udivmodsi4>
    20ca:	da 01       	movw	r26, r20
    20cc:	c9 01       	movw	r24, r18
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	return Anl_ADC;
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	9a 81       	ldd	r25, Y+2	; 0x02

}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <LM35_VoidInit>:

#include "../../../MCAL/DIO/DIO_Interface.h"
#include "../../../MCAL/ADC/ADC_Interface.h"
#include "../../../LIB/STD_Type.h"
void LM35_VoidInit(void)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit();
    20ee:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <ADC_VoidInit>
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN2, DIO_INPUT);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>

}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <LM35_U16Read>:


u16 LM35_U16Read(u8 Copy_u8readchannel)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <LM35_U16Read+0x6>
    2108:	00 d0       	rcall	.+0      	; 0x210a <LM35_U16Read+0x8>
    210a:	0f 92       	push	r0
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	8d 83       	std	Y+5, r24	; 0x05
	u32 temp = 0;
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	1a 82       	std	Y+2, r1	; 0x02
    2116:	1b 82       	std	Y+3, r1	; 0x03
    2118:	1c 82       	std	Y+4, r1	; 0x04
	temp = ADC_U16GetChannelReading(Copy_u8readchannel); /* read channel two where the temp sensor is connect */
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <ADC_U16GetChannelReading>
    2120:	cc 01       	movw	r24, r24
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	ab 83       	std	Y+3, r26	; 0x03
    212c:	bc 83       	std	Y+4, r27	; 0x04
	temp = (temp*150*5)/(1023*1.5);                      /* calculate the temp from the ADC value*/
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	ab 81       	ldd	r26, Y+3	; 0x03
    2134:	bc 81       	ldd	r27, Y+4	; 0x04
    2136:	2e ee       	ldi	r18, 0xEE	; 238
    2138:	32 e0       	ldi	r19, 0x02	; 2
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__mulsi3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 ed       	ldi	r19, 0xD0	; 208
    215e:	4f eb       	ldi	r20, 0xBF	; 191
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	ab 83       	std	Y+3, r26	; 0x03
    217c:	bc 83       	std	Y+4, r27	; 0x04

	 return temp;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <MOTOR_voidInit>:

#include "../../LIB/STD_Type.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../MCAL/TIMER/Timer1/timer1_Interface.h"
#include "../../HAL/MOTORS/MOTOR_Config.h"
void MOTOR_voidInit(void){
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,DIO_OUTPUT);
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,DIO_OUTPUT);

#elif  NUM_OF_MOTORS ==  CONNECT_ONE_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,DIO_OUTPUT);
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	63 e0       	ldi	r22, 0x03	; 3
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,DIO_OUTPUT);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	64 e0       	ldi	r22, 0x04	; 4
    21a8:	41 e0       	ldi	r20, 0x01	; 1
    21aa:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,DIO_OUTPUT);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	65 e0       	ldi	r22, 0x05	; 5
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>

#endif
#if MOTOR_STATE ==  MOTOR_Generate_pwm
DIO_voidSetPinDirection (MOTOR_PORT, MOTOR_PIN1,DIO_OUTPUT);
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	65 e0       	ldi	r22, 0x05	; 5
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,  MOTOR_PIN2,DIO_OUTPUT);
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	66 e0       	ldi	r22, 0x06	; 6
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,DIO_OUTPUT);
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	65 e0       	ldi	r22, 0x05	; 5
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,DIO_HIGH);
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	65 e0       	ldi	r22, 0x05	; 5
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,DIO_LOW);
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	66 e0       	ldi	r22, 0x06	; 6
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
#else
#endif
}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <MOTOR_voidRotateClkWise>:

void MOTOR_voidRotateClkWise(u8 copy_u8top,u8 copy_u8down){
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <MOTOR_voidRotateClkWise+0x6>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8top == 1){
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	81 f4       	brne	.+32     	; 0x2224 <MOTOR_voidRotateClkWise+0x34>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,DIO_HIGH);
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	63 e0       	ldi	r22, 0x03	; 3
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,DIO_LOW);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	64 e0       	ldi	r22, 0x04	; 4
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, DIO_HIGH);
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	65 e0       	ldi	r22, 0x05	; 5
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2222:	0d c0       	rjmp	.+26     	; 0x223e <MOTOR_voidRotateClkWise+0x4e>
	}
	else if(copy_u8top == 0){
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	88 23       	and	r24, r24
    2228:	51 f4       	brne	.+20     	; 0x223e <MOTOR_voidRotateClkWise+0x4e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,DIO_LOW);
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	64 e0       	ldi	r22, 0x04	; 4
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,DIO_LOW);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	64 e0       	ldi	r22, 0x04	; 4
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_u8down== 1){
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	81 f4       	brne	.+32     	; 0x2264 <MOTOR_voidRotateClkWise+0x74>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,DIO_HIGH);
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	65 e0       	ldi	r22, 0x05	; 5
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,DIO_LOW);
    224e:	83 e0       	ldi	r24, 0x03	; 3
    2250:	66 e0       	ldi	r22, 0x06	; 6
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, DIO_HIGH);
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	67 e0       	ldi	r22, 0x07	; 7
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2262:	0d c0       	rjmp	.+26     	; 0x227e <MOTOR_voidRotateClkWise+0x8e>
	}
	else if(copy_u8top == 0){
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	88 23       	and	r24, r24
    2268:	51 f4       	brne	.+20     	; 0x227e <MOTOR_voidRotateClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,DIO_LOW);
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	64 e0       	ldi	r22, 0x04	; 4
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,DIO_LOW);
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	64 e0       	ldi	r22, 0x04	; 4
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	}

}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(u8 copy_u8top,u8 copy_u8down){
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <MOTOR_voidRotateAntiClkWise+0x6>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8top == 1){
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	f9 f4       	brne	.+62     	; 0x22da <MOTOR_voidRotateAntiClkWise+0x52>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,DIO_LOW);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	63 e0       	ldi	r22, 0x03	; 3
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,DIO_HIGH);
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	64 e0       	ldi	r22, 0x04	; 4
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,DIO_HIGH);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	65 e0       	ldi	r22, 0x05	; 5
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,DIO_LOW);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	65 e0       	ldi	r22, 0x05	; 5
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,DIO_HIGH);
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	66 e0       	ldi	r22, 0x06	; 6
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,DIO_HIGH);
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	67 e0       	ldi	r22, 0x07	; 7
    22d2:	41 e0       	ldi	r20, 0x01	; 1
    22d4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    22d8:	1b c0       	rjmp	.+54     	; 0x2310 <MOTOR_voidRotateAntiClkWise+0x88>
	}
	else if(copy_u8top== 0){
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	88 23       	and	r24, r24
    22de:	59 f4       	brne	.+22     	; 0x22f6 <MOTOR_voidRotateAntiClkWise+0x6e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,DIO_LOW);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	63 e0       	ldi	r22, 0x03	; 3
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,DIO_LOW);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	64 e0       	ldi	r22, 0x04	; 4
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    22f4:	0d c0       	rjmp	.+26     	; 0x2310 <MOTOR_voidRotateAntiClkWise+0x88>
	}

	else if(copy_u8down == 0 ){
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	88 23       	and	r24, r24
    22fa:	51 f4       	brne	.+20     	; 0x2310 <MOTOR_voidRotateAntiClkWise+0x88>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,DIO_LOW);
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	65 e0       	ldi	r22, 0x05	; 5
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,DIO_LOW);
    2306:	83 e0       	ldi	r24, 0x03	; 3
    2308:	66 e0       	ldi	r22, 0x06	; 6
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	}


}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <MOTOR_voidGeneratePWM>:

void MOTOR_voidGeneratePWM(u8 copy_u8dutycycle){
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	0f 92       	push	r0
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Load_OCR1(copy_u8dutycycle);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 7e 07 	call	0xefc	; 0xefc <Timer1_Load_OCR1>
}
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <MOTOR_voidStop>:
void MOTOR_voidStop(void){
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_ENABLE,DIO_LOW);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	65 e0       	ldi	r22, 0x05	; 5
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,DIO_LOW);
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	67 e0       	ldi	r22, 0x07	; 7
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <LED_voidInitLed>:
 * DISCRIPTION: LED_Program.c
 **************************************************/
#include "../../LIB/STD_Type.h"
#include "../../MCAL/DIO/DIO_Interface.h"

void LED_voidInitLed(u8 copy_u8port, u8 copyu8pin){
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <LED_voidInitLed+0x6>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	6a 83       	std	Y+2, r22	; 0x02
#if LED_MODE ==   ACTIVE_HIGH
	DIO_voidSetPinDirection(copy_u8port,copyu8pin,DIO_OUTPUT);
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	6a 81       	ldd	r22, Y+2	; 0x02
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(copy_u8port,copyu8pin,DIO_LOW);
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	6a 81       	ldd	r22, Y+2	; 0x02
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(copy_u8port,copyu8pin,DIO_OUTPUT);
	DIO_voidSetPinValue(copy_u8port,copyu8pin,DIO_HIGH);

#endif

}
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <LED_voidOnLed>:
void LED_voidOnLed(u8 copy_u8port, u8 copyu8pin){
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <LED_voidOnLed+0x6>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	6a 83       	std	Y+2, r22	; 0x02
#if LED_MODE ==   ACTIVE_HIGH

	DIO_voidSetPinValue(copy_u8port,copyu8pin,DIO_HIGH);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	6a 81       	ldd	r22, Y+2	; 0x02
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(copy_u8port,copyu8pin,DIO_LOW);

#endif

}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <LED_voidOffLed>:
void LED_voidOffLed(u8 copy_u8port, u8 copyu8pin){
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <LED_voidOffLed+0x6>
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	6a 83       	std	Y+2, r22	; 0x02
#if LED_MODE ==   ACTIVE_HIGH

	DIO_voidSetPinValue(copy_u8port,copyu8pin,DIO_LOW);
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	6a 81       	ldd	r22, Y+2	; 0x02
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
#elif LED_MODE == ACTIVE_LOW
	DIO_voidSetPinValue(copy_u8port,copyu8pin,DIO_HIGH);

#endif

}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <LED_voidToggleLed>:
void LED_voidToggleLed(u8 copy_u8port, u8 copyu8pin){
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <LED_voidToggleLed+0x6>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePin(copy_u8port,  copyu8pin);
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	6a 81       	ldd	r22, Y+2	; 0x02
    23dc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DIO_voidTogglePin>
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <LCD_voidSendCommand>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include <util/delay.h>


void LCD_voidSendCommand(u8 Copy_U8Command)
{
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	c1 57       	subi	r28, 0x71	; 113
    23f8:	d0 40       	sbci	r29, 0x00	; 0
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	fe 01       	movw	r30, r28
    2406:	ef 58       	subi	r30, 0x8F	; 143
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 83       	st	Z, r24
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_LOW);	//RS = 0	D0
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, RW, DIO_LOW);	//RW = 0	D1
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2420:	fe 01       	movw	r30, r28
    2422:	e3 59       	subi	r30, 0x93	; 147
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	a2 83       	std	Z+2, r26	; 0x02
    2434:	b3 83       	std	Z+3, r27	; 0x03
    2436:	8e 01       	movw	r16, r28
    2438:	07 59       	subi	r16, 0x97	; 151
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	e3 59       	subi	r30, 0x93	; 147
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
    2464:	fe 01       	movw	r30, r28
    2466:	e7 59       	subi	r30, 0x97	; 151
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	44 f4       	brge	.+16     	; 0x2492 <LCD_voidSendCommand+0xa8>
    2482:	fe 01       	movw	r30, r28
    2484:	e9 59       	subi	r30, 0x99	; 153
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
    2490:	64 c0       	rjmp	.+200    	; 0x255a <LCD_voidSendCommand+0x170>
    2492:	fe 01       	movw	r30, r28
    2494:	e7 59       	subi	r30, 0x97	; 151
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	0c f0       	brlt	.+2      	; 0x24b2 <LCD_voidSendCommand+0xc8>
    24b0:	43 c0       	rjmp	.+134    	; 0x2538 <LCD_voidSendCommand+0x14e>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e3 59       	subi	r30, 0x93	; 147
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8e 01       	movw	r16, r28
    24d2:	09 59       	subi	r16, 0x99	; 153
    24d4:	1f 4f       	sbci	r17, 0xFF	; 255
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	f8 01       	movw	r30, r16
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	1f c0       	rjmp	.+62     	; 0x2528 <LCD_voidSendCommand+0x13e>
    24ea:	fe 01       	movw	r30, r28
    24ec:	eb 59       	subi	r30, 0x9B	; 155
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	88 ec       	ldi	r24, 0xC8	; 200
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	fe 01       	movw	r30, r28
    24fa:	eb 59       	subi	r30, 0x9B	; 155
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_voidSendCommand+0x118>
    2506:	fe 01       	movw	r30, r28
    2508:	eb 59       	subi	r30, 0x9B	; 155
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	de 01       	movw	r26, r28
    2512:	a9 59       	subi	r26, 0x99	; 153
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	e9 59       	subi	r30, 0x99	; 153
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	9c 93       	st	X, r25
    2526:	8e 93       	st	-X, r24
    2528:	fe 01       	movw	r30, r28
    252a:	e9 59       	subi	r30, 0x99	; 153
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	d1 f6       	brne	.-76     	; 0x24ea <LCD_voidSendCommand+0x100>
    2536:	27 c0       	rjmp	.+78     	; 0x2586 <LCD_voidSendCommand+0x19c>
    2538:	8e 01       	movw	r16, r28
    253a:	09 59       	subi	r16, 0x99	; 153
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e7 59       	subi	r30, 0x97	; 151
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	de 01       	movw	r26, r28
    255c:	ad 59       	subi	r26, 0x9D	; 157
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e9 59       	subi	r30, 0x99	; 153
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	8d 93       	st	X+, r24
    256c:	9c 93       	st	X, r25
    256e:	fe 01       	movw	r30, r28
    2570:	ed 59       	subi	r30, 0x9D	; 157
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_voidSendCommand+0x18e>
    257c:	fe 01       	movw	r30, r28
    257e:	ed 59       	subi	r30, 0x9D	; 157
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_HIGH); // Enable = 1
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	62 e0       	ldi	r22, 0x02	; 2
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2590:	fe 01       	movw	r30, r28
    2592:	e1 5a       	subi	r30, 0xA1	; 161
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a0 e8       	ldi	r26, 0x80	; 128
    259c:	bf e3       	ldi	r27, 0x3F	; 63
    259e:	80 83       	st	Z, r24
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	a2 83       	std	Z+2, r26	; 0x02
    25a4:	b3 83       	std	Z+3, r27	; 0x03
    25a6:	8e 01       	movw	r16, r28
    25a8:	05 5a       	subi	r16, 0xA5	; 165
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	e1 5a       	subi	r30, 0xA1	; 161
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a ef       	ldi	r20, 0xFA	; 250
    25c0:	54 e4       	ldi	r21, 0x44	; 68
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	80 83       	st	Z, r24
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	a2 83       	std	Z+2, r26	; 0x02
    25d2:	b3 83       	std	Z+3, r27	; 0x03
    25d4:	fe 01       	movw	r30, r28
    25d6:	e5 5a       	subi	r30, 0xA5	; 165
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	44 f4       	brge	.+16     	; 0x2602 <LCD_voidSendCommand+0x218>
    25f2:	fe 01       	movw	r30, r28
    25f4:	e7 5a       	subi	r30, 0xA7	; 167
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	64 c0       	rjmp	.+200    	; 0x26ca <LCD_voidSendCommand+0x2e0>
    2602:	fe 01       	movw	r30, r28
    2604:	e5 5a       	subi	r30, 0xA5	; 165
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	0c f0       	brlt	.+2      	; 0x2622 <LCD_voidSendCommand+0x238>
    2620:	43 c0       	rjmp	.+134    	; 0x26a8 <LCD_voidSendCommand+0x2be>
    2622:	fe 01       	movw	r30, r28
    2624:	e1 5a       	subi	r30, 0xA1	; 161
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8e 01       	movw	r16, r28
    2642:	07 5a       	subi	r16, 0xA7	; 167
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	1f c0       	rjmp	.+62     	; 0x2698 <LCD_voidSendCommand+0x2ae>
    265a:	fe 01       	movw	r30, r28
    265c:	e9 5a       	subi	r30, 0xA9	; 169
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	88 ec       	ldi	r24, 0xC8	; 200
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	80 83       	st	Z, r24
    2668:	fe 01       	movw	r30, r28
    266a:	e9 5a       	subi	r30, 0xA9	; 169
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_voidSendCommand+0x288>
    2676:	fe 01       	movw	r30, r28
    2678:	e9 5a       	subi	r30, 0xA9	; 169
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	de 01       	movw	r26, r28
    2682:	a7 5a       	subi	r26, 0xA7	; 167
    2684:	bf 4f       	sbci	r27, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	e7 5a       	subi	r30, 0xA7	; 167
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	11 96       	adiw	r26, 0x01	; 1
    2694:	9c 93       	st	X, r25
    2696:	8e 93       	st	-X, r24
    2698:	fe 01       	movw	r30, r28
    269a:	e7 5a       	subi	r30, 0xA7	; 167
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	d1 f6       	brne	.-76     	; 0x265a <LCD_voidSendCommand+0x270>
    26a6:	27 c0       	rjmp	.+78     	; 0x26f6 <LCD_voidSendCommand+0x30c>
    26a8:	8e 01       	movw	r16, r28
    26aa:	07 5a       	subi	r16, 0xA7	; 167
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e5 5a       	subi	r30, 0xA5	; 165
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	f8 01       	movw	r30, r16
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
    26ca:	de 01       	movw	r26, r28
    26cc:	ab 5a       	subi	r26, 0xAB	; 171
    26ce:	bf 4f       	sbci	r27, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 5a       	subi	r30, 0xA7	; 167
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	8d 93       	st	X+, r24
    26dc:	9c 93       	st	X, r25
    26de:	fe 01       	movw	r30, r28
    26e0:	eb 5a       	subi	r30, 0xAB	; 171
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_voidSendCommand+0x2fe>
    26ec:	fe 01       	movw	r30, r28
    26ee:	eb 5a       	subi	r30, 0xAB	; 171
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24

#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS

	DIO_voidSetLastNipple(LCD_DATA_CONNECTED_PORT,Copy_U8Command);
    26f6:	fe 01       	movw	r30, r28
    26f8:	ef 58       	subi	r30, 0x8F	; 143
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	60 81       	ld	r22, Z
    2700:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <DIO_voidSetLastNipple>
    2704:	fe 01       	movw	r30, r28
    2706:	ef 5a       	subi	r30, 0xAF	; 175
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a0 e8       	ldi	r26, 0x80	; 128
    2710:	bf e3       	ldi	r27, 0x3F	; 63
    2712:	80 83       	st	Z, r24
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	a2 83       	std	Z+2, r26	; 0x02
    2718:	b3 83       	std	Z+3, r27	; 0x03
    271a:	8e 01       	movw	r16, r28
    271c:	03 5b       	subi	r16, 0xB3	; 179
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	ef 5a       	subi	r30, 0xAF	; 175
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a ef       	ldi	r20, 0xFA	; 250
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	80 83       	st	Z, r24
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	a2 83       	std	Z+2, r26	; 0x02
    2746:	b3 83       	std	Z+3, r27	; 0x03
    2748:	fe 01       	movw	r30, r28
    274a:	e3 5b       	subi	r30, 0xB3	; 179
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2762:	88 23       	and	r24, r24
    2764:	44 f4       	brge	.+16     	; 0x2776 <LCD_voidSendCommand+0x38c>
    2766:	fe 01       	movw	r30, r28
    2768:	e5 5b       	subi	r30, 0xB5	; 181
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	64 c0       	rjmp	.+200    	; 0x283e <LCD_voidSendCommand+0x454>
    2776:	fe 01       	movw	r30, r28
    2778:	e3 5b       	subi	r30, 0xB3	; 179
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	0c f0       	brlt	.+2      	; 0x2796 <LCD_voidSendCommand+0x3ac>
    2794:	43 c0       	rjmp	.+134    	; 0x281c <LCD_voidSendCommand+0x432>
    2796:	fe 01       	movw	r30, r28
    2798:	ef 5a       	subi	r30, 0xAF	; 175
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8e 01       	movw	r16, r28
    27b6:	05 5b       	subi	r16, 0xB5	; 181
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	f8 01       	movw	r30, r16
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	1f c0       	rjmp	.+62     	; 0x280c <LCD_voidSendCommand+0x422>
    27ce:	fe 01       	movw	r30, r28
    27d0:	e7 5b       	subi	r30, 0xB7	; 183
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	88 ec       	ldi	r24, 0xC8	; 200
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	80 83       	st	Z, r24
    27dc:	fe 01       	movw	r30, r28
    27de:	e7 5b       	subi	r30, 0xB7	; 183
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	91 81       	ldd	r25, Z+1	; 0x01
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_voidSendCommand+0x3fc>
    27ea:	fe 01       	movw	r30, r28
    27ec:	e7 5b       	subi	r30, 0xB7	; 183
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	91 83       	std	Z+1, r25	; 0x01
    27f2:	80 83       	st	Z, r24
    27f4:	de 01       	movw	r26, r28
    27f6:	a5 5b       	subi	r26, 0xB5	; 181
    27f8:	bf 4f       	sbci	r27, 0xFF	; 255
    27fa:	fe 01       	movw	r30, r28
    27fc:	e5 5b       	subi	r30, 0xB5	; 181
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	11 96       	adiw	r26, 0x01	; 1
    2808:	9c 93       	st	X, r25
    280a:	8e 93       	st	-X, r24
    280c:	fe 01       	movw	r30, r28
    280e:	e5 5b       	subi	r30, 0xB5	; 181
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	d1 f6       	brne	.-76     	; 0x27ce <LCD_voidSendCommand+0x3e4>
    281a:	27 c0       	rjmp	.+78     	; 0x286a <LCD_voidSendCommand+0x480>
    281c:	8e 01       	movw	r16, r28
    281e:	05 5b       	subi	r16, 0xB5	; 181
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e3 5b       	subi	r30, 0xB3	; 179
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	f8 01       	movw	r30, r16
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
    283e:	de 01       	movw	r26, r28
    2840:	a9 5b       	subi	r26, 0xB9	; 185
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	fe 01       	movw	r30, r28
    2846:	e5 5b       	subi	r30, 0xB5	; 181
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	8d 93       	st	X+, r24
    2850:	9c 93       	st	X, r25
    2852:	fe 01       	movw	r30, r28
    2854:	e9 5b       	subi	r30, 0xB9	; 185
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_voidSendCommand+0x472>
    2860:	fe 01       	movw	r30, r28
    2862:	e9 5b       	subi	r30, 0xB9	; 185
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
    286a:	fe 01       	movw	r30, r28
    286c:	ed 5b       	subi	r30, 0xBD	; 189
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 e8       	ldi	r26, 0x80	; 128
    2876:	bf e3       	ldi	r27, 0x3F	; 63
    2878:	80 83       	st	Z, r24
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	a2 83       	std	Z+2, r26	; 0x02
    287e:	b3 83       	std	Z+3, r27	; 0x03
    2880:	8e 01       	movw	r16, r28
    2882:	01 5c       	subi	r16, 0xC1	; 193
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	fe 01       	movw	r30, r28
    2888:	ed 5b       	subi	r30, 0xBD	; 189
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a ef       	ldi	r20, 0xFA	; 250
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	f8 01       	movw	r30, r16
    28a6:	80 83       	st	Z, r24
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	a2 83       	std	Z+2, r26	; 0x02
    28ac:	b3 83       	std	Z+3, r27	; 0x03
    28ae:	fe 01       	movw	r30, r28
    28b0:	ff 96       	adiw	r30, 0x3f	; 63
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <LCD_voidSendCommand+0x4ea>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9e af       	std	Y+62, r25	; 0x3e
    28d0:	8d af       	std	Y+61, r24	; 0x3d
    28d2:	46 c0       	rjmp	.+140    	; 0x2960 <LCD_voidSendCommand+0x576>
    28d4:	fe 01       	movw	r30, r28
    28d6:	ff 96       	adiw	r30, 0x3f	; 63
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	64 f5       	brge	.+88     	; 0x2948 <LCD_voidSendCommand+0x55e>
    28f0:	fe 01       	movw	r30, r28
    28f2:	ed 5b       	subi	r30, 0xBD	; 189
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9e af       	std	Y+62, r25	; 0x3e
    291c:	8d af       	std	Y+61, r24	; 0x3d
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_voidSendCommand+0x554>
    2920:	88 ec       	ldi	r24, 0xC8	; 200
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c af       	std	Y+60, r25	; 0x3c
    2926:	8b af       	std	Y+59, r24	; 0x3b
    2928:	8b ad       	ldd	r24, Y+59	; 0x3b
    292a:	9c ad       	ldd	r25, Y+60	; 0x3c
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_voidSendCommand+0x542>
    2930:	9c af       	std	Y+60, r25	; 0x3c
    2932:	8b af       	std	Y+59, r24	; 0x3b
    2934:	8d ad       	ldd	r24, Y+61	; 0x3d
    2936:	9e ad       	ldd	r25, Y+62	; 0x3e
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9e af       	std	Y+62, r25	; 0x3e
    293c:	8d af       	std	Y+61, r24	; 0x3d
    293e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2940:	9e ad       	ldd	r25, Y+62	; 0x3e
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_voidSendCommand+0x536>
    2946:	16 c0       	rjmp	.+44     	; 0x2974 <LCD_voidSendCommand+0x58a>
    2948:	fe 01       	movw	r30, r28
    294a:	ff 96       	adiw	r30, 0x3f	; 63
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e af       	std	Y+62, r25	; 0x3e
    295e:	8d af       	std	Y+61, r24	; 0x3d
    2960:	8d ad       	ldd	r24, Y+61	; 0x3d
    2962:	9e ad       	ldd	r25, Y+62	; 0x3e
    2964:	9a af       	std	Y+58, r25	; 0x3a
    2966:	89 af       	std	Y+57, r24	; 0x39
    2968:	89 ad       	ldd	r24, Y+57	; 0x39
    296a:	9a ad       	ldd	r25, Y+58	; 0x3a
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_voidSendCommand+0x582>
    2970:	9a af       	std	Y+58, r25	; 0x3a
    2972:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidPLaceLastnipple(LCD_DATA_CONNECTED_PORT,Copy_U8Command);
	_delay_ms(1);
#endif

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_LOW); // Enable = 0
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	62 e0       	ldi	r22, 0x02	; 2
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a0 e8       	ldi	r26, 0x80	; 128
    2984:	bf e3       	ldi	r27, 0x3F	; 63
    2986:	8d ab       	std	Y+53, r24	; 0x35
    2988:	9e ab       	std	Y+54, r25	; 0x36
    298a:	af ab       	std	Y+55, r26	; 0x37
    298c:	b8 af       	std	Y+56, r27	; 0x38
    298e:	6d a9       	ldd	r22, Y+53	; 0x35
    2990:	7e a9       	ldd	r23, Y+54	; 0x36
    2992:	8f a9       	ldd	r24, Y+55	; 0x37
    2994:	98 ad       	ldd	r25, Y+56	; 0x38
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a ef       	ldi	r20, 0xFA	; 250
    299c:	54 e4       	ldi	r21, 0x44	; 68
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	89 ab       	std	Y+49, r24	; 0x31
    29a8:	9a ab       	std	Y+50, r25	; 0x32
    29aa:	ab ab       	std	Y+51, r26	; 0x33
    29ac:	bc ab       	std	Y+52, r27	; 0x34
    29ae:	69 a9       	ldd	r22, Y+49	; 0x31
    29b0:	7a a9       	ldd	r23, Y+50	; 0x32
    29b2:	8b a9       	ldd	r24, Y+51	; 0x33
    29b4:	9c a9       	ldd	r25, Y+52	; 0x34
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	2c f4       	brge	.+10     	; 0x29d0 <LCD_voidSendCommand+0x5e6>
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	98 ab       	std	Y+48, r25	; 0x30
    29cc:	8f a7       	std	Y+47, r24	; 0x2f
    29ce:	3f c0       	rjmp	.+126    	; 0x2a4e <LCD_voidSendCommand+0x664>
    29d0:	69 a9       	ldd	r22, Y+49	; 0x31
    29d2:	7a a9       	ldd	r23, Y+50	; 0x32
    29d4:	8b a9       	ldd	r24, Y+51	; 0x33
    29d6:	9c a9       	ldd	r25, Y+52	; 0x34
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	3f ef       	ldi	r19, 0xFF	; 255
    29dc:	4f e7       	ldi	r20, 0x7F	; 127
    29de:	57 e4       	ldi	r21, 0x47	; 71
    29e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e4:	18 16       	cp	r1, r24
    29e6:	4c f5       	brge	.+82     	; 0x2a3a <LCD_voidSendCommand+0x650>
    29e8:	6d a9       	ldd	r22, Y+53	; 0x35
    29ea:	7e a9       	ldd	r23, Y+54	; 0x36
    29ec:	8f a9       	ldd	r24, Y+55	; 0x37
    29ee:	98 ad       	ldd	r25, Y+56	; 0x38
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	98 ab       	std	Y+48, r25	; 0x30
    2a0e:	8f a7       	std	Y+47, r24	; 0x2f
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <LCD_voidSendCommand+0x646>
    2a12:	88 ec       	ldi	r24, 0xC8	; 200
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9e a7       	std	Y+46, r25	; 0x2e
    2a18:	8d a7       	std	Y+45, r24	; 0x2d
    2a1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <LCD_voidSendCommand+0x634>
    2a22:	9e a7       	std	Y+46, r25	; 0x2e
    2a24:	8d a7       	std	Y+45, r24	; 0x2d
    2a26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a28:	98 a9       	ldd	r25, Y+48	; 0x30
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	98 ab       	std	Y+48, r25	; 0x30
    2a2e:	8f a7       	std	Y+47, r24	; 0x2f
    2a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a32:	98 a9       	ldd	r25, Y+48	; 0x30
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <LCD_voidSendCommand+0x628>
    2a38:	14 c0       	rjmp	.+40     	; 0x2a62 <LCD_voidSendCommand+0x678>
    2a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a40:	9c a9       	ldd	r25, Y+52	; 0x34
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	98 ab       	std	Y+48, r25	; 0x30
    2a4c:	8f a7       	std	Y+47, r24	; 0x2f
    2a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a50:	98 a9       	ldd	r25, Y+48	; 0x30
    2a52:	9c a7       	std	Y+44, r25	; 0x2c
    2a54:	8b a7       	std	Y+43, r24	; 0x2b
    2a56:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a58:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_voidSendCommand+0x670>
    2a5e:	9c a7       	std	Y+44, r25	; 0x2c
    2a60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_HIGH); // Enable = 1
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	41 e0       	ldi	r20, 0x01	; 1
    2a68:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a0 e8       	ldi	r26, 0x80	; 128
    2a72:	bf e3       	ldi	r27, 0x3F	; 63
    2a74:	8f a3       	std	Y+39, r24	; 0x27
    2a76:	98 a7       	std	Y+40, r25	; 0x28
    2a78:	a9 a7       	std	Y+41, r26	; 0x29
    2a7a:	ba a7       	std	Y+42, r27	; 0x2a
    2a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a80:	89 a5       	ldd	r24, Y+41	; 0x29
    2a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8b a3       	std	Y+35, r24	; 0x23
    2a96:	9c a3       	std	Y+36, r25	; 0x24
    2a98:	ad a3       	std	Y+37, r26	; 0x25
    2a9a:	be a3       	std	Y+38, r27	; 0x26
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <LCD_voidSendCommand+0x6d4>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9a a3       	std	Y+34, r25	; 0x22
    2aba:	89 a3       	std	Y+33, r24	; 0x21
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <LCD_voidSendCommand+0x752>
    2abe:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <LCD_voidSendCommand+0x73e>
    2ad6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad8:	78 a5       	ldd	r23, Y+40	; 0x28
    2ada:	89 a5       	ldd	r24, Y+41	; 0x29
    2adc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9a a3       	std	Y+34, r25	; 0x22
    2afc:	89 a3       	std	Y+33, r24	; 0x21
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <LCD_voidSendCommand+0x734>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	98 a3       	std	Y+32, r25	; 0x20
    2b06:	8f 8f       	std	Y+31, r24	; 0x1f
    2b08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_voidSendCommand+0x722>
    2b10:	98 a3       	std	Y+32, r25	; 0x20
    2b12:	8f 8f       	std	Y+31, r24	; 0x1f
    2b14:	89 a1       	ldd	r24, Y+33	; 0x21
    2b16:	9a a1       	ldd	r25, Y+34	; 0x22
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
    2b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b20:	9a a1       	ldd	r25, Y+34	; 0x22
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <LCD_voidSendCommand+0x716>
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <LCD_voidSendCommand+0x766>
    2b28:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9a a3       	std	Y+34, r25	; 0x22
    2b3a:	89 a3       	std	Y+33, r24	; 0x21
    2b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b40:	9e 8f       	std	Y+30, r25	; 0x1e
    2b42:	8d 8f       	std	Y+29, r24	; 0x1d
    2b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_voidSendCommand+0x75e>
    2b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS

	DIO_voidPlaceFirstNipple(LCD_DATA_CONNECTED_PORT,Copy_U8Command);
    2b50:	fe 01       	movw	r30, r28
    2b52:	ef 58       	subi	r30, 0x8F	; 143
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	60 81       	ld	r22, Z
    2b5a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_voidPlaceFirstNipple>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e8       	ldi	r26, 0x80	; 128
    2b64:	bf e3       	ldi	r27, 0x3F	; 63
    2b66:	89 8f       	std	Y+25, r24	; 0x19
    2b68:	9a 8f       	std	Y+26, r25	; 0x1a
    2b6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b6c:	bc 8f       	std	Y+28, r27	; 0x1c
    2b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4a ef       	ldi	r20, 0xFA	; 250
    2b7c:	54 e4       	ldi	r21, 0x44	; 68
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	8d 8b       	std	Y+21, r24	; 0x15
    2b88:	9e 8b       	std	Y+22, r25	; 0x16
    2b8a:	af 8b       	std	Y+23, r26	; 0x17
    2b8c:	b8 8f       	std	Y+24, r27	; 0x18
    2b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b90:	7e 89       	ldd	r23, Y+22	; 0x16
    2b92:	8f 89       	ldd	r24, Y+23	; 0x17
    2b94:	98 8d       	ldd	r25, Y+24	; 0x18
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e8       	ldi	r20, 0x80	; 128
    2b9c:	5f e3       	ldi	r21, 0x3F	; 63
    2b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba2:	88 23       	and	r24, r24
    2ba4:	2c f4       	brge	.+10     	; 0x2bb0 <LCD_voidSendCommand+0x7c6>
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9c 8b       	std	Y+20, r25	; 0x14
    2bac:	8b 8b       	std	Y+19, r24	; 0x13
    2bae:	3f c0       	rjmp	.+126    	; 0x2c2e <LCD_voidSendCommand+0x844>
    2bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	3f ef       	ldi	r19, 0xFF	; 255
    2bbc:	4f e7       	ldi	r20, 0x7F	; 127
    2bbe:	57 e4       	ldi	r21, 0x47	; 71
    2bc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc4:	18 16       	cp	r1, r24
    2bc6:	4c f5       	brge	.+82     	; 0x2c1a <LCD_voidSendCommand+0x830>
    2bc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9c 8b       	std	Y+20, r25	; 0x14
    2bee:	8b 8b       	std	Y+19, r24	; 0x13
    2bf0:	0f c0       	rjmp	.+30     	; 0x2c10 <LCD_voidSendCommand+0x826>
    2bf2:	88 ec       	ldi	r24, 0xC8	; 200
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9a 8b       	std	Y+18, r25	; 0x12
    2bf8:	89 8b       	std	Y+17, r24	; 0x11
    2bfa:	89 89       	ldd	r24, Y+17	; 0x11
    2bfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <LCD_voidSendCommand+0x814>
    2c02:	9a 8b       	std	Y+18, r25	; 0x12
    2c04:	89 8b       	std	Y+17, r24	; 0x11
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	9c 8b       	std	Y+20, r25	; 0x14
    2c0e:	8b 8b       	std	Y+19, r24	; 0x13
    2c10:	8b 89       	ldd	r24, Y+19	; 0x13
    2c12:	9c 89       	ldd	r25, Y+20	; 0x14
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	69 f7       	brne	.-38     	; 0x2bf2 <LCD_voidSendCommand+0x808>
    2c18:	14 c0       	rjmp	.+40     	; 0x2c42 <LCD_voidSendCommand+0x858>
    2c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	9c 8b       	std	Y+20, r25	; 0x14
    2c2c:	8b 8b       	std	Y+19, r24	; 0x13
    2c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c30:	9c 89       	ldd	r25, Y+20	; 0x14
    2c32:	98 8b       	std	Y+16, r25	; 0x10
    2c34:	8f 87       	std	Y+15, r24	; 0x0f
    2c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c38:	98 89       	ldd	r25, Y+16	; 0x10
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <LCD_voidSendCommand+0x850>
    2c3e:	98 8b       	std	Y+16, r25	; 0x10
    2c40:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_voidSetFirstNipple(LCD_DATA_CONNECTED_PORT,Copy_U8Command);

#endif
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_LOW); // Enable = 0
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	62 e0       	ldi	r22, 0x02	; 2
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e8       	ldi	r26, 0x80	; 128
    2c52:	bf e3       	ldi	r27, 0x3F	; 63
    2c54:	8b 87       	std	Y+11, r24	; 0x0b
    2c56:	9c 87       	std	Y+12, r25	; 0x0c
    2c58:	ad 87       	std	Y+13, r26	; 0x0d
    2c5a:	be 87       	std	Y+14, r27	; 0x0e
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	98 87       	std	Y+8, r25	; 0x08
    2c78:	a9 87       	std	Y+9, r26	; 0x09
    2c7a:	ba 87       	std	Y+10, r27	; 0x0a
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <LCD_voidSendCommand+0x8b4>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <LCD_voidSendCommand+0x932>
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <LCD_voidSendCommand+0x91e>
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <LCD_voidSendCommand+0x914>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_voidSendCommand+0x902>
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <LCD_voidSendCommand+0x8f6>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <LCD_voidSendCommand+0x946>
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <LCD_voidSendCommand+0x93e>
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_LOW); // Enable = 0
	_delay_ms(1);
#endif

}
    2d30:	cf 58       	subi	r28, 0x8F	; 143
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	08 95       	ret

00002d48 <LCD_voidSendData>:

void LCD_voidSendData(char Copy_U8Data)
{
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	c1 57       	subi	r28, 0x71	; 113
    2d56:	d0 40       	sbci	r29, 0x00	; 0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	fe 01       	movw	r30, r28
    2d64:	ef 58       	subi	r30, 0x8F	; 143
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 83       	st	Z, r24
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, RS,DIO_HIGH);	//RS = 1	D0
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	60 e0       	ldi	r22, 0x00	; 0
    2d6e:	41 e0       	ldi	r20, 0x01	; 1
    2d70:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, RW,DIO_LOW);	//RW = 0	D1
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	61 e0       	ldi	r22, 0x01	; 1
    2d78:	40 e0       	ldi	r20, 0x00	; 0
    2d7a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e3 59       	subi	r30, 0x93	; 147
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e8       	ldi	r26, 0x80	; 128
    2d8a:	bf e3       	ldi	r27, 0x3F	; 63
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	a2 83       	std	Z+2, r26	; 0x02
    2d92:	b3 83       	std	Z+3, r27	; 0x03
    2d94:	8e 01       	movw	r16, r28
    2d96:	07 59       	subi	r16, 0x97	; 151
    2d98:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e3 59       	subi	r30, 0x93	; 147
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a ef       	ldi	r20, 0xFA	; 250
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	f8 01       	movw	r30, r16
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e7 59       	subi	r30, 0x97	; 151
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	44 f4       	brge	.+16     	; 0x2df0 <LCD_voidSendData+0xa8>
    2de0:	fe 01       	movw	r30, r28
    2de2:	e9 59       	subi	r30, 0x99	; 153
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
    2dee:	64 c0       	rjmp	.+200    	; 0x2eb8 <LCD_voidSendData+0x170>
    2df0:	fe 01       	movw	r30, r28
    2df2:	e7 59       	subi	r30, 0x97	; 151
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	0c f0       	brlt	.+2      	; 0x2e10 <LCD_voidSendData+0xc8>
    2e0e:	43 c0       	rjmp	.+134    	; 0x2e96 <LCD_voidSendData+0x14e>
    2e10:	fe 01       	movw	r30, r28
    2e12:	e3 59       	subi	r30, 0x93	; 147
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e2       	ldi	r20, 0x20	; 32
    2e24:	51 e4       	ldi	r21, 0x41	; 65
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	8e 01       	movw	r16, r28
    2e30:	09 59       	subi	r16, 0x99	; 153
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	1f c0       	rjmp	.+62     	; 0x2e86 <LCD_voidSendData+0x13e>
    2e48:	fe 01       	movw	r30, r28
    2e4a:	eb 59       	subi	r30, 0x9B	; 155
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
    2e56:	fe 01       	movw	r30, r28
    2e58:	eb 59       	subi	r30, 0x9B	; 155
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <LCD_voidSendData+0x118>
    2e64:	fe 01       	movw	r30, r28
    2e66:	eb 59       	subi	r30, 0x9B	; 155
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    2e6e:	de 01       	movw	r26, r28
    2e70:	a9 59       	subi	r26, 0x99	; 153
    2e72:	bf 4f       	sbci	r27, 0xFF	; 255
    2e74:	fe 01       	movw	r30, r28
    2e76:	e9 59       	subi	r30, 0x99	; 153
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	11 96       	adiw	r26, 0x01	; 1
    2e82:	9c 93       	st	X, r25
    2e84:	8e 93       	st	-X, r24
    2e86:	fe 01       	movw	r30, r28
    2e88:	e9 59       	subi	r30, 0x99	; 153
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	d1 f6       	brne	.-76     	; 0x2e48 <LCD_voidSendData+0x100>
    2e94:	27 c0       	rjmp	.+78     	; 0x2ee4 <LCD_voidSendData+0x19c>
    2e96:	8e 01       	movw	r16, r28
    2e98:	09 59       	subi	r16, 0x99	; 153
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e7 59       	subi	r30, 0x97	; 151
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
    2eb8:	de 01       	movw	r26, r28
    2eba:	ad 59       	subi	r26, 0x9D	; 157
    2ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e9 59       	subi	r30, 0x99	; 153
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	8d 93       	st	X+, r24
    2eca:	9c 93       	st	X, r25
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ed 59       	subi	r30, 0x9D	; 157
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <LCD_voidSendData+0x18e>
    2eda:	fe 01       	movw	r30, r28
    2edc:	ed 59       	subi	r30, 0x9D	; 157
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E,DIO_HIGH);
    2ee4:	82 e0       	ldi	r24, 0x02	; 2
    2ee6:	62 e0       	ldi	r22, 0x02	; 2
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e1 5a       	subi	r30, 0xA1	; 161
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	a0 e8       	ldi	r26, 0x80	; 128
    2efa:	bf e3       	ldi	r27, 0x3F	; 63
    2efc:	80 83       	st	Z, r24
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	a2 83       	std	Z+2, r26	; 0x02
    2f02:	b3 83       	std	Z+3, r27	; 0x03
    2f04:	8e 01       	movw	r16, r28
    2f06:	05 5a       	subi	r16, 0xA5	; 165
    2f08:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e1 5a       	subi	r30, 0xA1	; 161
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	4a ef       	ldi	r20, 0xFA	; 250
    2f1e:	54 e4       	ldi	r21, 0x44	; 68
    2f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	f8 01       	movw	r30, r16
    2f2a:	80 83       	st	Z, r24
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	a2 83       	std	Z+2, r26	; 0x02
    2f30:	b3 83       	std	Z+3, r27	; 0x03
    2f32:	fe 01       	movw	r30, r28
    2f34:	e5 5a       	subi	r30, 0xA5	; 165
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	44 f4       	brge	.+16     	; 0x2f60 <LCD_voidSendData+0x218>
    2f50:	fe 01       	movw	r30, r28
    2f52:	e7 5a       	subi	r30, 0xA7	; 167
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	91 83       	std	Z+1, r25	; 0x01
    2f5c:	80 83       	st	Z, r24
    2f5e:	64 c0       	rjmp	.+200    	; 0x3028 <LCD_voidSendData+0x2e0>
    2f60:	fe 01       	movw	r30, r28
    2f62:	e5 5a       	subi	r30, 0xA5	; 165
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	3f ef       	ldi	r19, 0xFF	; 255
    2f72:	4f e7       	ldi	r20, 0x7F	; 127
    2f74:	57 e4       	ldi	r21, 0x47	; 71
    2f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7a:	18 16       	cp	r1, r24
    2f7c:	0c f0       	brlt	.+2      	; 0x2f80 <LCD_voidSendData+0x238>
    2f7e:	43 c0       	rjmp	.+134    	; 0x3006 <LCD_voidSendData+0x2be>
    2f80:	fe 01       	movw	r30, r28
    2f82:	e1 5a       	subi	r30, 0xA1	; 161
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	60 81       	ld	r22, Z
    2f88:	71 81       	ldd	r23, Z+1	; 0x01
    2f8a:	82 81       	ldd	r24, Z+2	; 0x02
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e2       	ldi	r20, 0x20	; 32
    2f94:	51 e4       	ldi	r21, 0x41	; 65
    2f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	8e 01       	movw	r16, r28
    2fa0:	07 5a       	subi	r16, 0xA7	; 167
    2fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	80 83       	st	Z, r24
    2fb6:	1f c0       	rjmp	.+62     	; 0x2ff6 <LCD_voidSendData+0x2ae>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e9 5a       	subi	r30, 0xA9	; 169
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	88 ec       	ldi	r24, 0xC8	; 200
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	80 83       	st	Z, r24
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e9 5a       	subi	r30, 0xA9	; 169
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <LCD_voidSendData+0x288>
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e9 5a       	subi	r30, 0xA9	; 169
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	80 83       	st	Z, r24
    2fde:	de 01       	movw	r26, r28
    2fe0:	a7 5a       	subi	r26, 0xA7	; 167
    2fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e7 5a       	subi	r30, 0xA7	; 167
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	11 96       	adiw	r26, 0x01	; 1
    2ff2:	9c 93       	st	X, r25
    2ff4:	8e 93       	st	-X, r24
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e7 5a       	subi	r30, 0xA7	; 167
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	d1 f6       	brne	.-76     	; 0x2fb8 <LCD_voidSendData+0x270>
    3004:	27 c0       	rjmp	.+78     	; 0x3054 <LCD_voidSendData+0x30c>
    3006:	8e 01       	movw	r16, r28
    3008:	07 5a       	subi	r16, 0xA7	; 167
    300a:	1f 4f       	sbci	r17, 0xFF	; 255
    300c:	fe 01       	movw	r30, r28
    300e:	e5 5a       	subi	r30, 0xA5	; 165
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	f8 01       	movw	r30, r16
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	de 01       	movw	r26, r28
    302a:	ab 5a       	subi	r26, 0xAB	; 171
    302c:	bf 4f       	sbci	r27, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	e7 5a       	subi	r30, 0xA7	; 167
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	8d 93       	st	X+, r24
    303a:	9c 93       	st	X, r25
    303c:	fe 01       	movw	r30, r28
    303e:	eb 5a       	subi	r30, 0xAB	; 171
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <LCD_voidSendData+0x2fe>
    304a:	fe 01       	movw	r30, r28
    304c:	eb 5a       	subi	r30, 0xAB	; 171
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
	_delay_ms(1);
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS

	DIO_voidSetLastNipple(LCD_DATA_CONNECTED_PORT,  Copy_U8Data);
    3054:	fe 01       	movw	r30, r28
    3056:	ef 58       	subi	r30, 0x8F	; 143
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	82 e0       	ldi	r24, 0x02	; 2
    305c:	60 81       	ld	r22, Z
    305e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <DIO_voidSetLastNipple>
    3062:	fe 01       	movw	r30, r28
    3064:	ef 5a       	subi	r30, 0xAF	; 175
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e8       	ldi	r26, 0x80	; 128
    306e:	bf e3       	ldi	r27, 0x3F	; 63
    3070:	80 83       	st	Z, r24
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	a2 83       	std	Z+2, r26	; 0x02
    3076:	b3 83       	std	Z+3, r27	; 0x03
    3078:	8e 01       	movw	r16, r28
    307a:	03 5b       	subi	r16, 0xB3	; 179
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	ef 5a       	subi	r30, 0xAF	; 175
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4a ef       	ldi	r20, 0xFA	; 250
    3092:	54 e4       	ldi	r21, 0x44	; 68
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	f8 01       	movw	r30, r16
    309e:	80 83       	st	Z, r24
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	a2 83       	std	Z+2, r26	; 0x02
    30a4:	b3 83       	std	Z+3, r27	; 0x03
    30a6:	fe 01       	movw	r30, r28
    30a8:	e3 5b       	subi	r30, 0xB3	; 179
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e8       	ldi	r20, 0x80	; 128
    30ba:	5f e3       	ldi	r21, 0x3F	; 63
    30bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	44 f4       	brge	.+16     	; 0x30d4 <LCD_voidSendData+0x38c>
    30c4:	fe 01       	movw	r30, r28
    30c6:	e5 5b       	subi	r30, 0xB5	; 181
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	91 83       	std	Z+1, r25	; 0x01
    30d0:	80 83       	st	Z, r24
    30d2:	64 c0       	rjmp	.+200    	; 0x319c <LCD_voidSendData+0x454>
    30d4:	fe 01       	movw	r30, r28
    30d6:	e3 5b       	subi	r30, 0xB3	; 179
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	60 81       	ld	r22, Z
    30dc:	71 81       	ldd	r23, Z+1	; 0x01
    30de:	82 81       	ldd	r24, Z+2	; 0x02
    30e0:	93 81       	ldd	r25, Z+3	; 0x03
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	0c f0       	brlt	.+2      	; 0x30f4 <LCD_voidSendData+0x3ac>
    30f2:	43 c0       	rjmp	.+134    	; 0x317a <LCD_voidSendData+0x432>
    30f4:	fe 01       	movw	r30, r28
    30f6:	ef 5a       	subi	r30, 0xAF	; 175
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	60 81       	ld	r22, Z
    30fc:	71 81       	ldd	r23, Z+1	; 0x01
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	93 81       	ldd	r25, Z+3	; 0x03
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e2       	ldi	r20, 0x20	; 32
    3108:	51 e4       	ldi	r21, 0x41	; 65
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	8e 01       	movw	r16, r28
    3114:	05 5b       	subi	r16, 0xB5	; 181
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	f8 01       	movw	r30, r16
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	80 83       	st	Z, r24
    312a:	1f c0       	rjmp	.+62     	; 0x316a <LCD_voidSendData+0x422>
    312c:	fe 01       	movw	r30, r28
    312e:	e7 5b       	subi	r30, 0xB7	; 183
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	88 ec       	ldi	r24, 0xC8	; 200
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
    313a:	fe 01       	movw	r30, r28
    313c:	e7 5b       	subi	r30, 0xB7	; 183
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <LCD_voidSendData+0x3fc>
    3148:	fe 01       	movw	r30, r28
    314a:	e7 5b       	subi	r30, 0xB7	; 183
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	80 83       	st	Z, r24
    3152:	de 01       	movw	r26, r28
    3154:	a5 5b       	subi	r26, 0xB5	; 181
    3156:	bf 4f       	sbci	r27, 0xFF	; 255
    3158:	fe 01       	movw	r30, r28
    315a:	e5 5b       	subi	r30, 0xB5	; 181
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	11 96       	adiw	r26, 0x01	; 1
    3166:	9c 93       	st	X, r25
    3168:	8e 93       	st	-X, r24
    316a:	fe 01       	movw	r30, r28
    316c:	e5 5b       	subi	r30, 0xB5	; 181
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	d1 f6       	brne	.-76     	; 0x312c <LCD_voidSendData+0x3e4>
    3178:	27 c0       	rjmp	.+78     	; 0x31c8 <LCD_voidSendData+0x480>
    317a:	8e 01       	movw	r16, r28
    317c:	05 5b       	subi	r16, 0xB5	; 181
    317e:	1f 4f       	sbci	r17, 0xFF	; 255
    3180:	fe 01       	movw	r30, r28
    3182:	e3 5b       	subi	r30, 0xB3	; 179
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	f8 01       	movw	r30, r16
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	80 83       	st	Z, r24
    319c:	de 01       	movw	r26, r28
    319e:	a9 5b       	subi	r26, 0xB9	; 185
    31a0:	bf 4f       	sbci	r27, 0xFF	; 255
    31a2:	fe 01       	movw	r30, r28
    31a4:	e5 5b       	subi	r30, 0xB5	; 181
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	8d 93       	st	X+, r24
    31ae:	9c 93       	st	X, r25
    31b0:	fe 01       	movw	r30, r28
    31b2:	e9 5b       	subi	r30, 0xB9	; 185
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	91 81       	ldd	r25, Z+1	; 0x01
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <LCD_voidSendData+0x472>
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 5b       	subi	r30, 0xB9	; 185
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	91 83       	std	Z+1, r25	; 0x01
    31c6:	80 83       	st	Z, r24
#else
	DIO_voidPLaceLastnipple(LCD_DATA_CONNECTED_PORT, Copy_U8Data);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E,DIO_LOW);
    31c8:	82 e0       	ldi	r24, 0x02	; 2
    31ca:	62 e0       	ldi	r22, 0x02	; 2
    31cc:	40 e0       	ldi	r20, 0x00	; 0
    31ce:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    31d2:	fe 01       	movw	r30, r28
    31d4:	ed 5b       	subi	r30, 0xBD	; 189
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a0 e8       	ldi	r26, 0x80	; 128
    31de:	bf e3       	ldi	r27, 0x3F	; 63
    31e0:	80 83       	st	Z, r24
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	a2 83       	std	Z+2, r26	; 0x02
    31e6:	b3 83       	std	Z+3, r27	; 0x03
    31e8:	8e 01       	movw	r16, r28
    31ea:	01 5c       	subi	r16, 0xC1	; 193
    31ec:	1f 4f       	sbci	r17, 0xFF	; 255
    31ee:	fe 01       	movw	r30, r28
    31f0:	ed 5b       	subi	r30, 0xBD	; 189
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a ef       	ldi	r20, 0xFA	; 250
    3202:	54 e4       	ldi	r21, 0x44	; 68
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	f8 01       	movw	r30, r16
    320e:	80 83       	st	Z, r24
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	a2 83       	std	Z+2, r26	; 0x02
    3214:	b3 83       	std	Z+3, r27	; 0x03
    3216:	fe 01       	movw	r30, r28
    3218:	ff 96       	adiw	r30, 0x3f	; 63
    321a:	60 81       	ld	r22, Z
    321c:	71 81       	ldd	r23, Z+1	; 0x01
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	93 81       	ldd	r25, Z+3	; 0x03
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	2c f4       	brge	.+10     	; 0x323c <LCD_voidSendData+0x4f4>
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9e af       	std	Y+62, r25	; 0x3e
    3238:	8d af       	std	Y+61, r24	; 0x3d
    323a:	46 c0       	rjmp	.+140    	; 0x32c8 <LCD_voidSendData+0x580>
    323c:	fe 01       	movw	r30, r28
    323e:	ff 96       	adiw	r30, 0x3f	; 63
    3240:	60 81       	ld	r22, Z
    3242:	71 81       	ldd	r23, Z+1	; 0x01
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	64 f5       	brge	.+88     	; 0x32b0 <LCD_voidSendData+0x568>
    3258:	fe 01       	movw	r30, r28
    325a:	ed 5b       	subi	r30, 0xBD	; 189
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	60 81       	ld	r22, Z
    3260:	71 81       	ldd	r23, Z+1	; 0x01
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e2       	ldi	r20, 0x20	; 32
    326c:	51 e4       	ldi	r21, 0x41	; 65
    326e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	bc 01       	movw	r22, r24
    3278:	cd 01       	movw	r24, r26
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e af       	std	Y+62, r25	; 0x3e
    3284:	8d af       	std	Y+61, r24	; 0x3d
    3286:	0f c0       	rjmp	.+30     	; 0x32a6 <LCD_voidSendData+0x55e>
    3288:	88 ec       	ldi	r24, 0xC8	; 200
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9c af       	std	Y+60, r25	; 0x3c
    328e:	8b af       	std	Y+59, r24	; 0x3b
    3290:	8b ad       	ldd	r24, Y+59	; 0x3b
    3292:	9c ad       	ldd	r25, Y+60	; 0x3c
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <LCD_voidSendData+0x54c>
    3298:	9c af       	std	Y+60, r25	; 0x3c
    329a:	8b af       	std	Y+59, r24	; 0x3b
    329c:	8d ad       	ldd	r24, Y+61	; 0x3d
    329e:	9e ad       	ldd	r25, Y+62	; 0x3e
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	9e af       	std	Y+62, r25	; 0x3e
    32a4:	8d af       	std	Y+61, r24	; 0x3d
    32a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    32a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	69 f7       	brne	.-38     	; 0x3288 <LCD_voidSendData+0x540>
    32ae:	16 c0       	rjmp	.+44     	; 0x32dc <LCD_voidSendData+0x594>
    32b0:	fe 01       	movw	r30, r28
    32b2:	ff 96       	adiw	r30, 0x3f	; 63
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	9e af       	std	Y+62, r25	; 0x3e
    32c6:	8d af       	std	Y+61, r24	; 0x3d
    32c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    32ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    32cc:	9a af       	std	Y+58, r25	; 0x3a
    32ce:	89 af       	std	Y+57, r24	; 0x39
    32d0:	89 ad       	ldd	r24, Y+57	; 0x39
    32d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	f1 f7       	brne	.-4      	; 0x32d4 <LCD_voidSendData+0x58c>
    32d8:	9a af       	std	Y+58, r25	; 0x3a
    32da:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E,DIO_HIGH);
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	62 e0       	ldi	r22, 0x02	; 2
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	a0 e8       	ldi	r26, 0x80	; 128
    32ec:	bf e3       	ldi	r27, 0x3F	; 63
    32ee:	8d ab       	std	Y+53, r24	; 0x35
    32f0:	9e ab       	std	Y+54, r25	; 0x36
    32f2:	af ab       	std	Y+55, r26	; 0x37
    32f4:	b8 af       	std	Y+56, r27	; 0x38
    32f6:	6d a9       	ldd	r22, Y+53	; 0x35
    32f8:	7e a9       	ldd	r23, Y+54	; 0x36
    32fa:	8f a9       	ldd	r24, Y+55	; 0x37
    32fc:	98 ad       	ldd	r25, Y+56	; 0x38
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4a ef       	ldi	r20, 0xFA	; 250
    3304:	54 e4       	ldi	r21, 0x44	; 68
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	89 ab       	std	Y+49, r24	; 0x31
    3310:	9a ab       	std	Y+50, r25	; 0x32
    3312:	ab ab       	std	Y+51, r26	; 0x33
    3314:	bc ab       	std	Y+52, r27	; 0x34
    3316:	69 a9       	ldd	r22, Y+49	; 0x31
    3318:	7a a9       	ldd	r23, Y+50	; 0x32
    331a:	8b a9       	ldd	r24, Y+51	; 0x33
    331c:	9c a9       	ldd	r25, Y+52	; 0x34
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e8       	ldi	r20, 0x80	; 128
    3324:	5f e3       	ldi	r21, 0x3F	; 63
    3326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332a:	88 23       	and	r24, r24
    332c:	2c f4       	brge	.+10     	; 0x3338 <LCD_voidSendData+0x5f0>
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	98 ab       	std	Y+48, r25	; 0x30
    3334:	8f a7       	std	Y+47, r24	; 0x2f
    3336:	3f c0       	rjmp	.+126    	; 0x33b6 <LCD_voidSendData+0x66e>
    3338:	69 a9       	ldd	r22, Y+49	; 0x31
    333a:	7a a9       	ldd	r23, Y+50	; 0x32
    333c:	8b a9       	ldd	r24, Y+51	; 0x33
    333e:	9c a9       	ldd	r25, Y+52	; 0x34
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	4f e7       	ldi	r20, 0x7F	; 127
    3346:	57 e4       	ldi	r21, 0x47	; 71
    3348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334c:	18 16       	cp	r1, r24
    334e:	4c f5       	brge	.+82     	; 0x33a2 <LCD_voidSendData+0x65a>
    3350:	6d a9       	ldd	r22, Y+53	; 0x35
    3352:	7e a9       	ldd	r23, Y+54	; 0x36
    3354:	8f a9       	ldd	r24, Y+55	; 0x37
    3356:	98 ad       	ldd	r25, Y+56	; 0x38
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e2       	ldi	r20, 0x20	; 32
    335e:	51 e4       	ldi	r21, 0x41	; 65
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	98 ab       	std	Y+48, r25	; 0x30
    3376:	8f a7       	std	Y+47, r24	; 0x2f
    3378:	0f c0       	rjmp	.+30     	; 0x3398 <LCD_voidSendData+0x650>
    337a:	88 ec       	ldi	r24, 0xC8	; 200
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9e a7       	std	Y+46, r25	; 0x2e
    3380:	8d a7       	std	Y+45, r24	; 0x2d
    3382:	8d a5       	ldd	r24, Y+45	; 0x2d
    3384:	9e a5       	ldd	r25, Y+46	; 0x2e
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <LCD_voidSendData+0x63e>
    338a:	9e a7       	std	Y+46, r25	; 0x2e
    338c:	8d a7       	std	Y+45, r24	; 0x2d
    338e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3390:	98 a9       	ldd	r25, Y+48	; 0x30
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	98 ab       	std	Y+48, r25	; 0x30
    3396:	8f a7       	std	Y+47, r24	; 0x2f
    3398:	8f a5       	ldd	r24, Y+47	; 0x2f
    339a:	98 a9       	ldd	r25, Y+48	; 0x30
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	69 f7       	brne	.-38     	; 0x337a <LCD_voidSendData+0x632>
    33a0:	14 c0       	rjmp	.+40     	; 0x33ca <LCD_voidSendData+0x682>
    33a2:	69 a9       	ldd	r22, Y+49	; 0x31
    33a4:	7a a9       	ldd	r23, Y+50	; 0x32
    33a6:	8b a9       	ldd	r24, Y+51	; 0x33
    33a8:	9c a9       	ldd	r25, Y+52	; 0x34
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	98 ab       	std	Y+48, r25	; 0x30
    33b4:	8f a7       	std	Y+47, r24	; 0x2f
    33b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ba:	9c a7       	std	Y+44, r25	; 0x2c
    33bc:	8b a7       	std	Y+43, r24	; 0x2b
    33be:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <LCD_voidSendData+0x67a>
    33c6:	9c a7       	std	Y+44, r25	; 0x2c
    33c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	DIO_voidPlaceFirstNipple(LCD_DATA_CONNECTED_PORT,  Copy_U8Data );
    33ca:	fe 01       	movw	r30, r28
    33cc:	ef 58       	subi	r30, 0x8F	; 143
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	60 81       	ld	r22, Z
    33d4:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <DIO_voidPlaceFirstNipple>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	a0 e8       	ldi	r26, 0x80	; 128
    33de:	bf e3       	ldi	r27, 0x3F	; 63
    33e0:	8f a3       	std	Y+39, r24	; 0x27
    33e2:	98 a7       	std	Y+40, r25	; 0x28
    33e4:	a9 a7       	std	Y+41, r26	; 0x29
    33e6:	ba a7       	std	Y+42, r27	; 0x2a
    33e8:	6f a1       	ldd	r22, Y+39	; 0x27
    33ea:	78 a5       	ldd	r23, Y+40	; 0x28
    33ec:	89 a5       	ldd	r24, Y+41	; 0x29
    33ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	4a ef       	ldi	r20, 0xFA	; 250
    33f6:	54 e4       	ldi	r21, 0x44	; 68
    33f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	8b a3       	std	Y+35, r24	; 0x23
    3402:	9c a3       	std	Y+36, r25	; 0x24
    3404:	ad a3       	std	Y+37, r26	; 0x25
    3406:	be a3       	std	Y+38, r27	; 0x26
    3408:	6b a1       	ldd	r22, Y+35	; 0x23
    340a:	7c a1       	ldd	r23, Y+36	; 0x24
    340c:	8d a1       	ldd	r24, Y+37	; 0x25
    340e:	9e a1       	ldd	r25, Y+38	; 0x26
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e8       	ldi	r20, 0x80	; 128
    3416:	5f e3       	ldi	r21, 0x3F	; 63
    3418:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341c:	88 23       	and	r24, r24
    341e:	2c f4       	brge	.+10     	; 0x342a <LCD_voidSendData+0x6e2>
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	9a a3       	std	Y+34, r25	; 0x22
    3426:	89 a3       	std	Y+33, r24	; 0x21
    3428:	3f c0       	rjmp	.+126    	; 0x34a8 <LCD_voidSendData+0x760>
    342a:	6b a1       	ldd	r22, Y+35	; 0x23
    342c:	7c a1       	ldd	r23, Y+36	; 0x24
    342e:	8d a1       	ldd	r24, Y+37	; 0x25
    3430:	9e a1       	ldd	r25, Y+38	; 0x26
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	3f ef       	ldi	r19, 0xFF	; 255
    3436:	4f e7       	ldi	r20, 0x7F	; 127
    3438:	57 e4       	ldi	r21, 0x47	; 71
    343a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    343e:	18 16       	cp	r1, r24
    3440:	4c f5       	brge	.+82     	; 0x3494 <LCD_voidSendData+0x74c>
    3442:	6f a1       	ldd	r22, Y+39	; 0x27
    3444:	78 a5       	ldd	r23, Y+40	; 0x28
    3446:	89 a5       	ldd	r24, Y+41	; 0x29
    3448:	9a a5       	ldd	r25, Y+42	; 0x2a
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	40 e2       	ldi	r20, 0x20	; 32
    3450:	51 e4       	ldi	r21, 0x41	; 65
    3452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	9a a3       	std	Y+34, r25	; 0x22
    3468:	89 a3       	std	Y+33, r24	; 0x21
    346a:	0f c0       	rjmp	.+30     	; 0x348a <LCD_voidSendData+0x742>
    346c:	88 ec       	ldi	r24, 0xC8	; 200
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	98 a3       	std	Y+32, r25	; 0x20
    3472:	8f 8f       	std	Y+31, r24	; 0x1f
    3474:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3476:	98 a1       	ldd	r25, Y+32	; 0x20
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <LCD_voidSendData+0x730>
    347c:	98 a3       	std	Y+32, r25	; 0x20
    347e:	8f 8f       	std	Y+31, r24	; 0x1f
    3480:	89 a1       	ldd	r24, Y+33	; 0x21
    3482:	9a a1       	ldd	r25, Y+34	; 0x22
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	9a a3       	std	Y+34, r25	; 0x22
    3488:	89 a3       	std	Y+33, r24	; 0x21
    348a:	89 a1       	ldd	r24, Y+33	; 0x21
    348c:	9a a1       	ldd	r25, Y+34	; 0x22
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	69 f7       	brne	.-38     	; 0x346c <LCD_voidSendData+0x724>
    3492:	14 c0       	rjmp	.+40     	; 0x34bc <LCD_voidSendData+0x774>
    3494:	6b a1       	ldd	r22, Y+35	; 0x23
    3496:	7c a1       	ldd	r23, Y+36	; 0x24
    3498:	8d a1       	ldd	r24, Y+37	; 0x25
    349a:	9e a1       	ldd	r25, Y+38	; 0x26
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9a a3       	std	Y+34, r25	; 0x22
    34a6:	89 a3       	std	Y+33, r24	; 0x21
    34a8:	89 a1       	ldd	r24, Y+33	; 0x21
    34aa:	9a a1       	ldd	r25, Y+34	; 0x22
    34ac:	9e 8f       	std	Y+30, r25	; 0x1e
    34ae:	8d 8f       	std	Y+29, r24	; 0x1d
    34b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <LCD_voidSendData+0x76c>
    34b8:	9e 8f       	std	Y+30, r25	; 0x1e
    34ba:	8d 8f       	std	Y+29, r24	; 0x1d
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e8       	ldi	r26, 0x80	; 128
    34c2:	bf e3       	ldi	r27, 0x3F	; 63
    34c4:	89 8f       	std	Y+25, r24	; 0x19
    34c6:	9a 8f       	std	Y+26, r25	; 0x1a
    34c8:	ab 8f       	std	Y+27, r26	; 0x1b
    34ca:	bc 8f       	std	Y+28, r27	; 0x1c
    34cc:	69 8d       	ldd	r22, Y+25	; 0x19
    34ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	4a ef       	ldi	r20, 0xFA	; 250
    34da:	54 e4       	ldi	r21, 0x44	; 68
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8d 8b       	std	Y+21, r24	; 0x15
    34e6:	9e 8b       	std	Y+22, r25	; 0x16
    34e8:	af 8b       	std	Y+23, r26	; 0x17
    34ea:	b8 8f       	std	Y+24, r27	; 0x18
    34ec:	6d 89       	ldd	r22, Y+21	; 0x15
    34ee:	7e 89       	ldd	r23, Y+22	; 0x16
    34f0:	8f 89       	ldd	r24, Y+23	; 0x17
    34f2:	98 8d       	ldd	r25, Y+24	; 0x18
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	2c f4       	brge	.+10     	; 0x350e <LCD_voidSendData+0x7c6>
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9c 8b       	std	Y+20, r25	; 0x14
    350a:	8b 8b       	std	Y+19, r24	; 0x13
    350c:	3f c0       	rjmp	.+126    	; 0x358c <LCD_voidSendData+0x844>
    350e:	6d 89       	ldd	r22, Y+21	; 0x15
    3510:	7e 89       	ldd	r23, Y+22	; 0x16
    3512:	8f 89       	ldd	r24, Y+23	; 0x17
    3514:	98 8d       	ldd	r25, Y+24	; 0x18
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	3f ef       	ldi	r19, 0xFF	; 255
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	57 e4       	ldi	r21, 0x47	; 71
    351e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	4c f5       	brge	.+82     	; 0x3578 <LCD_voidSendData+0x830>
    3526:	69 8d       	ldd	r22, Y+25	; 0x19
    3528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    352c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	9c 8b       	std	Y+20, r25	; 0x14
    354c:	8b 8b       	std	Y+19, r24	; 0x13
    354e:	0f c0       	rjmp	.+30     	; 0x356e <LCD_voidSendData+0x826>
    3550:	88 ec       	ldi	r24, 0xC8	; 200
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9a 8b       	std	Y+18, r25	; 0x12
    3556:	89 8b       	std	Y+17, r24	; 0x11
    3558:	89 89       	ldd	r24, Y+17	; 0x11
    355a:	9a 89       	ldd	r25, Y+18	; 0x12
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_voidSendData+0x814>
    3560:	9a 8b       	std	Y+18, r25	; 0x12
    3562:	89 8b       	std	Y+17, r24	; 0x11
    3564:	8b 89       	ldd	r24, Y+19	; 0x13
    3566:	9c 89       	ldd	r25, Y+20	; 0x14
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	9c 8b       	std	Y+20, r25	; 0x14
    356c:	8b 8b       	std	Y+19, r24	; 0x13
    356e:	8b 89       	ldd	r24, Y+19	; 0x13
    3570:	9c 89       	ldd	r25, Y+20	; 0x14
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	69 f7       	brne	.-38     	; 0x3550 <LCD_voidSendData+0x808>
    3576:	14 c0       	rjmp	.+40     	; 0x35a0 <LCD_voidSendData+0x858>
    3578:	6d 89       	ldd	r22, Y+21	; 0x15
    357a:	7e 89       	ldd	r23, Y+22	; 0x16
    357c:	8f 89       	ldd	r24, Y+23	; 0x17
    357e:	98 8d       	ldd	r25, Y+24	; 0x18
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	9c 8b       	std	Y+20, r25	; 0x14
    358a:	8b 8b       	std	Y+19, r24	; 0x13
    358c:	8b 89       	ldd	r24, Y+19	; 0x13
    358e:	9c 89       	ldd	r25, Y+20	; 0x14
    3590:	98 8b       	std	Y+16, r25	; 0x10
    3592:	8f 87       	std	Y+15, r24	; 0x0f
    3594:	8f 85       	ldd	r24, Y+15	; 0x0f
    3596:	98 89       	ldd	r25, Y+16	; 0x10
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <LCD_voidSendData+0x850>
    359c:	98 8b       	std	Y+16, r25	; 0x10
    359e:	8f 87       	std	Y+15, r24	; 0x0f
#else
	DIO_voidSetFirstNipple(LCD_DATA_CONNECTED_PORT,  Copy_U8Data);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E,DIO_LOW);
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	62 e0       	ldi	r22, 0x02	; 2
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	a0 e8       	ldi	r26, 0x80	; 128
    35b0:	bf e3       	ldi	r27, 0x3F	; 63
    35b2:	8b 87       	std	Y+11, r24	; 0x0b
    35b4:	9c 87       	std	Y+12, r25	; 0x0c
    35b6:	ad 87       	std	Y+13, r26	; 0x0d
    35b8:	be 87       	std	Y+14, r27	; 0x0e
    35ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    35bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	4a ef       	ldi	r20, 0xFA	; 250
    35c8:	54 e4       	ldi	r21, 0x44	; 68
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8f 83       	std	Y+7, r24	; 0x07
    35d4:	98 87       	std	Y+8, r25	; 0x08
    35d6:	a9 87       	std	Y+9, r26	; 0x09
    35d8:	ba 87       	std	Y+10, r27	; 0x0a
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e8       	ldi	r20, 0x80	; 128
    35e8:	5f e3       	ldi	r21, 0x3F	; 63
    35ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ee:	88 23       	and	r24, r24
    35f0:	2c f4       	brge	.+10     	; 0x35fc <LCD_voidSendData+0x8b4>
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	3f c0       	rjmp	.+126    	; 0x367a <LCD_voidSendData+0x932>
    35fc:	6f 81       	ldd	r22, Y+7	; 0x07
    35fe:	78 85       	ldd	r23, Y+8	; 0x08
    3600:	89 85       	ldd	r24, Y+9	; 0x09
    3602:	9a 85       	ldd	r25, Y+10	; 0x0a
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	3f ef       	ldi	r19, 0xFF	; 255
    3608:	4f e7       	ldi	r20, 0x7F	; 127
    360a:	57 e4       	ldi	r21, 0x47	; 71
    360c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3610:	18 16       	cp	r1, r24
    3612:	4c f5       	brge	.+82     	; 0x3666 <LCD_voidSendData+0x91e>
    3614:	6b 85       	ldd	r22, Y+11	; 0x0b
    3616:	7c 85       	ldd	r23, Y+12	; 0x0c
    3618:	8d 85       	ldd	r24, Y+13	; 0x0d
    361a:	9e 85       	ldd	r25, Y+14	; 0x0e
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	bc 01       	movw	r22, r24
    362e:	cd 01       	movw	r24, r26
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	0f c0       	rjmp	.+30     	; 0x365c <LCD_voidSendData+0x914>
    363e:	88 ec       	ldi	r24, 0xC8	; 200
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9c 83       	std	Y+4, r25	; 0x04
    3644:	8b 83       	std	Y+3, r24	; 0x03
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	9c 81       	ldd	r25, Y+4	; 0x04
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <LCD_voidSendData+0x902>
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	8b 83       	std	Y+3, r24	; 0x03
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	69 f7       	brne	.-38     	; 0x363e <LCD_voidSendData+0x8f6>
    3664:	14 c0       	rjmp	.+40     	; 0x368e <LCD_voidSendData+0x946>
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	9a 83       	std	Y+2, r25	; 0x02
    3680:	89 83       	std	Y+1, r24	; 0x01
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_voidSendData+0x93e>
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortValue(DIO_DDRC,Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(LCD_CONTROL_CONNECTED_PORT, E,DIO_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    368e:	cf 58       	subi	r28, 0x8F	; 143
    3690:	df 4f       	sbci	r29, 0xFF	; 255
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	1f 91       	pop	r17
    36a2:	0f 91       	pop	r16
    36a4:	08 95       	ret

000036a6 <LCD_voidInit>:


void LCD_voidInit(void)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(LCD_CONTROL_CONNECTED_PORT, RS, DIO_OUTPUT);  // RS = output
    36ae:	82 e0       	ldi	r24, 0x02	; 2
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	41 e0       	ldi	r20, 0x01	; 1
    36b4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_CONNECTED_PORT, RW, DIO_OUTPUT);  // RE = output
    36b8:	82 e0       	ldi	r24, 0x02	; 2
    36ba:	61 e0       	ldi	r22, 0x01	; 1
    36bc:	41 e0       	ldi	r20, 0x01	; 1
    36be:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_CONNECTED_PORT, E,  DIO_OUTPUT);   // E  = output
    36c2:	82 e0       	ldi	r24, 0x02	; 2
    36c4:	62 e0       	ldi	r22, 0x02	; 2
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
	DIO_voidSetlastnippleDir (LCD_DATA_CONNECTED_PORT, 1);
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	61 e0       	ldi	r22, 0x01	; 1
    36d0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <DIO_voidSetlastnippleDir>
#else
	DIO_SetfirstnippleDir(LCD_DATA_CONNECTED_PORT, 1);
#endif
	LCD_voidSendCommand( Four_Bit_Mode); /* initialize LCD in 4-bit mode */
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidSendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode +
    36da:	88 e2       	ldi	r24, 0x28	; 40
    36dc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	DIO_SetPortDirection(LCD_DATA_CONNECTED_PORT, DIO_PORT_OUTPUT); /* Configure the data port as output port */
	LCD_voidSendCommand(Eight_Bit_Mode); /* use 2-line lcd + 8-bit Data Mode + 5*7
dot display Mode */
#endif

	LCD_voidSendCommand(LCD_COM_DISPLAY_ON	); /* cursor off */
    36e0:	8c e0       	ldi	r24, 0x0C	; 12
    36e2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_COM_CLEAR); /* clear LCD at the beginning */
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>

}
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <LCD_voidSendString>:




void LCD_voidSendString( char * Copy_U8String)
{
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	00 d0       	rcall	.+0      	; 0x36f8 <LCD_voidSendString+0x6>
    36f8:	0f 92       	push	r0
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	9b 83       	std	Y+3, r25	; 0x03
    3700:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    3702:	19 82       	std	Y+1, r1	; 0x01
    3704:	0e c0       	rjmp	.+28     	; 0x3722 <LCD_voidSendString+0x30>
	while(Copy_U8String[i] != '\0'){
		LCD_voidSendData(Copy_U8String[i]);
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	fc 01       	movw	r30, r24
    3712:	e2 0f       	add	r30, r18
    3714:	f3 1f       	adc	r31, r19
    3716:	80 81       	ld	r24, Z
    3718:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_voidSendData>
		i++;
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString( char * Copy_U8String)
{
	u8 i = 0 ;
	while(Copy_U8String[i] != '\0'){
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	fc 01       	movw	r30, r24
    372e:	e2 0f       	add	r30, r18
    3730:	f3 1f       	adc	r31, r19
    3732:	80 81       	ld	r24, Z
    3734:	88 23       	and	r24, r24
    3736:	39 f7       	brne	.-50     	; 0x3706 <LCD_voidSendString+0x14>
		LCD_voidSendData(Copy_U8String[i]);
		i++;
	}
}
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <LCD_voidgotorowcolum>:
void LCD_voidgotorowcolum(u8 copy_u8row, u8 copy_u8colum){
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	00 d0       	rcall	.+0      	; 0x374a <LCD_voidgotorowcolum+0x6>
    374a:	00 d0       	rcall	.+0      	; 0x374c <LCD_voidgotorowcolum+0x8>
    374c:	0f 92       	push	r0
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
    3752:	8a 83       	std	Y+2, r24	; 0x02
    3754:	6b 83       	std	Y+3, r22	; 0x03

	u8 Address;
	switch(copy_u8row)
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	28 2f       	mov	r18, r24
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	3d 83       	std	Y+5, r19	; 0x05
    375e:	2c 83       	std	Y+4, r18	; 0x04
    3760:	8c 81       	ldd	r24, Y+4	; 0x04
    3762:	9d 81       	ldd	r25, Y+5	; 0x05
    3764:	00 97       	sbiw	r24, 0x00	; 0
    3766:	31 f0       	breq	.+12     	; 0x3774 <LCD_voidgotorowcolum+0x30>
    3768:	2c 81       	ldd	r18, Y+4	; 0x04
    376a:	3d 81       	ldd	r19, Y+5	; 0x05
    376c:	21 30       	cpi	r18, 0x01	; 1
    376e:	31 05       	cpc	r19, r1
    3770:	21 f0       	breq	.+8      	; 0x377a <LCD_voidgotorowcolum+0x36>
    3772:	06 c0       	rjmp	.+12     	; 0x3780 <LCD_voidgotorowcolum+0x3c>
	{
	case 0:	 Address = copy_u8colum;  break;
    3774:	8b 81       	ldd	r24, Y+3	; 0x03
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <LCD_voidgotorowcolum+0x3c>
	case 1:  Address = copy_u8colum + 0x40;  break;
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	80 5c       	subi	r24, 0xC0	; 192
    377e:	89 83       	std	Y+1, r24	; 0x01

	}

	LCD_voidSendCommand(Address |0x80);
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	80 68       	ori	r24, 0x80	; 128
    3784:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>

}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <LCD_displayStringRowColum>:
void LCD_displayStringRowColum(u8 copy_u8row, u8 copy_u8colum, u32 *string){
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	00 d0       	rcall	.+0      	; 0x379e <LCD_displayStringRowColum+0x6>
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <LCD_displayStringRowColum+0x8>
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	89 83       	std	Y+1, r24	; 0x01
    37a6:	6a 83       	std	Y+2, r22	; 0x02
    37a8:	5c 83       	std	Y+4, r21	; 0x04
    37aa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidgotorowcolum(copy_u8row, copy_u8colum);
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	6a 81       	ldd	r22, Y+2	; 0x02
    37b0:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	LCD_voidSendString(string);
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	9c 81       	ldd	r25, Y+4	; 0x04
    37b8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>

}
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	cf 91       	pop	r28
    37c6:	df 91       	pop	r29
    37c8:	08 95       	ret

000037ca <LCD_1ByteToString>:

void LCD_1ByteToString(u8 copy_u8num){
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	64 97       	sbiw	r28, 0x14	; 20
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	8c 8b       	std	Y+20, r24	; 0x14
	int i, rem, len = 0, n;
    37e0:	1c 82       	std	Y+4, r1	; 0x04
    37e2:	1b 82       	std	Y+3, r1	; 0x03
	u8 str[11]={0};
    37e4:	8b e0       	ldi	r24, 0x0B	; 11
    37e6:	fe 01       	movw	r30, r28
    37e8:	39 96       	adiw	r30, 0x09	; 9
    37ea:	df 01       	movw	r26, r30
    37ec:	98 2f       	mov	r25, r24
    37ee:	1d 92       	st	X+, r1
    37f0:	9a 95       	dec	r25
    37f2:	e9 f7       	brne	.-6      	; 0x37ee <LCD_1ByteToString+0x24>
	n = copy_u8num;
    37f4:	8c 89       	ldd	r24, Y+20	; 0x14
    37f6:	88 2f       	mov	r24, r24
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8num == 0){
    37fe:	8c 89       	ldd	r24, Y+20	; 0x14
    3800:	88 23       	and	r24, r24
    3802:	99 f4       	brne	.+38     	; 0x382a <LCD_1ByteToString+0x60>
		LCD_voidSendData('0');
    3804:	80 e3       	ldi	r24, 0x30	; 48
    3806:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_voidSendData>
    380a:	0f c0       	rjmp	.+30     	; 0x382a <LCD_1ByteToString+0x60>
	}
	while (n != 0)
	{
		len++;
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	9c 81       	ldd	r25, Y+4	; 0x04
    3810:	01 96       	adiw	r24, 0x01	; 1
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	8b 83       	std	Y+3, r24	; 0x03
		n /= 10;
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	9a 81       	ldd	r25, Y+2	; 0x02
    381a:	2a e0       	ldi	r18, 0x0A	; 10
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	b9 01       	movw	r22, r18
    3820:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__divmodhi4>
    3824:	cb 01       	movw	r24, r22
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
	u8 str[11]={0};
	n = copy_u8num;
	if(copy_u8num == 0){
		LCD_voidSendData('0');
	}
	while (n != 0)
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	69 f7       	brne	.-38     	; 0x380c <LCD_1ByteToString+0x42>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    3832:	18 86       	std	Y+8, r1	; 0x08
    3834:	1f 82       	std	Y+7, r1	; 0x07
    3836:	27 c0       	rjmp	.+78     	; 0x3886 <LCD_1ByteToString+0xbc>
	{
		rem = copy_u8num % 10;
    3838:	8c 89       	ldd	r24, Y+20	; 0x14
    383a:	9a e0       	ldi	r25, 0x0A	; 10
    383c:	69 2f       	mov	r22, r25
    383e:	0e 94 56 26 	call	0x4cac	; 0x4cac <__udivmodqi4>
    3842:	89 2f       	mov	r24, r25
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
		copy_u8num = copy_u8num / 10;
    384c:	8c 89       	ldd	r24, Y+20	; 0x14
    384e:	9a e0       	ldi	r25, 0x0A	; 10
    3850:	69 2f       	mov	r22, r25
    3852:	0e 94 56 26 	call	0x4cac	; 0x4cac <__udivmodqi4>
    3856:	8c 8b       	std	Y+20, r24	; 0x14
		str[len - (i + 1)] = rem + '0';
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	98 85       	ldd	r25, Y+8	; 0x08
    385c:	9c 01       	movw	r18, r24
    385e:	20 95       	com	r18
    3860:	30 95       	com	r19
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	28 0f       	add	r18, r24
    3868:	39 1f       	adc	r19, r25
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	48 2f       	mov	r20, r24
    386e:	40 5d       	subi	r20, 0xD0	; 208
    3870:	ce 01       	movw	r24, r28
    3872:	09 96       	adiw	r24, 0x09	; 9
    3874:	fc 01       	movw	r30, r24
    3876:	e2 0f       	add	r30, r18
    3878:	f3 1f       	adc	r31, r19
    387a:	40 83       	st	Z, r20
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    387c:	8f 81       	ldd	r24, Y+7	; 0x07
    387e:	98 85       	ldd	r25, Y+8	; 0x08
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	98 87       	std	Y+8, r25	; 0x08
    3884:	8f 83       	std	Y+7, r24	; 0x07
    3886:	2f 81       	ldd	r18, Y+7	; 0x07
    3888:	38 85       	ldd	r19, Y+8	; 0x08
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	9c 81       	ldd	r25, Y+4	; 0x04
    388e:	28 17       	cp	r18, r24
    3890:	39 07       	cpc	r19, r25
    3892:	94 f2       	brlt	.-92     	; 0x3838 <LCD_1ByteToString+0x6e>
		rem = copy_u8num % 10;
		copy_u8num = copy_u8num / 10;
		str[len - (i + 1)] = rem + '0';
	}

	str[len] = '\0';
    3894:	2b 81       	ldd	r18, Y+3	; 0x03
    3896:	3c 81       	ldd	r19, Y+4	; 0x04
    3898:	ce 01       	movw	r24, r28
    389a:	09 96       	adiw	r24, 0x09	; 9
    389c:	fc 01       	movw	r30, r24
    389e:	e2 0f       	add	r30, r18
    38a0:	f3 1f       	adc	r31, r19
    38a2:	10 82       	st	Z, r1
	LCD_voidSendString(str);
    38a4:	ce 01       	movw	r24, r28
    38a6:	09 96       	adiw	r24, 0x09	; 9
    38a8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>


}
    38ac:	64 96       	adiw	r28, 0x14	; 20
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <LCD_4ByteToString>:

void LCD_4ByteToString(u32 copy_u8num){
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	6f 97       	sbiw	r28, 0x1f	; 31
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
    38d2:	6c 8f       	std	Y+28, r22	; 0x1c
    38d4:	7d 8f       	std	Y+29, r23	; 0x1d
    38d6:	8e 8f       	std	Y+30, r24	; 0x1e
    38d8:	9f 8f       	std	Y+31, r25	; 0x1f
	u32 i, rem, len = 0, n;
    38da:	1d 82       	std	Y+5, r1	; 0x05
    38dc:	1e 82       	std	Y+6, r1	; 0x06
    38de:	1f 82       	std	Y+7, r1	; 0x07
    38e0:	18 86       	std	Y+8, r1	; 0x08
	u8 str[11]={0};
    38e2:	8b e0       	ldi	r24, 0x0B	; 11
    38e4:	fe 01       	movw	r30, r28
    38e6:	71 96       	adiw	r30, 0x11	; 17
    38e8:	df 01       	movw	r26, r30
    38ea:	98 2f       	mov	r25, r24
    38ec:	1d 92       	st	X+, r1
    38ee:	9a 95       	dec	r25
    38f0:	e9 f7       	brne	.-6      	; 0x38ec <LCD_4ByteToString+0x2e>
	n = copy_u8num;
    38f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38f6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    38f8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	9a 83       	std	Y+2, r25	; 0x02
    38fe:	ab 83       	std	Y+3, r26	; 0x03
    3900:	bc 83       	std	Y+4, r27	; 0x04
	if(copy_u8num == 0){
    3902:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3904:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3906:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3908:	bf 8d       	ldd	r27, Y+31	; 0x1f
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	a1 05       	cpc	r26, r1
    390e:	b1 05       	cpc	r27, r1
    3910:	09 f5       	brne	.+66     	; 0x3954 <LCD_4ByteToString+0x96>
		LCD_voidSendData('0');
    3912:	80 e3       	ldi	r24, 0x30	; 48
    3914:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_voidSendData>
    3918:	1d c0       	rjmp	.+58     	; 0x3954 <LCD_4ByteToString+0x96>
	}
	while (n != 0)
	{
		len++;
    391a:	8d 81       	ldd	r24, Y+5	; 0x05
    391c:	9e 81       	ldd	r25, Y+6	; 0x06
    391e:	af 81       	ldd	r26, Y+7	; 0x07
    3920:	b8 85       	ldd	r27, Y+8	; 0x08
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	a1 1d       	adc	r26, r1
    3926:	b1 1d       	adc	r27, r1
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	9e 83       	std	Y+6, r25	; 0x06
    392c:	af 83       	std	Y+7, r26	; 0x07
    392e:	b8 87       	std	Y+8, r27	; 0x08
		n /= 10;
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	ab 81       	ldd	r26, Y+3	; 0x03
    3936:	bc 81       	ldd	r27, Y+4	; 0x04
    3938:	2a e0       	ldi	r18, 0x0A	; 10
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 75 26 	call	0x4cea	; 0x4cea <__udivmodsi4>
    3948:	da 01       	movw	r26, r20
    394a:	c9 01       	movw	r24, r18
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	9a 83       	std	Y+2, r25	; 0x02
    3950:	ab 83       	std	Y+3, r26	; 0x03
    3952:	bc 83       	std	Y+4, r27	; 0x04
	u8 str[11]={0};
	n = copy_u8num;
	if(copy_u8num == 0){
		LCD_voidSendData('0');
	}
	while (n != 0)
    3954:	89 81       	ldd	r24, Y+1	; 0x01
    3956:	9a 81       	ldd	r25, Y+2	; 0x02
    3958:	ab 81       	ldd	r26, Y+3	; 0x03
    395a:	bc 81       	ldd	r27, Y+4	; 0x04
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	a1 05       	cpc	r26, r1
    3960:	b1 05       	cpc	r27, r1
    3962:	d9 f6       	brne	.-74     	; 0x391a <LCD_4ByteToString+0x5c>
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    3964:	1d 86       	std	Y+13, r1	; 0x0d
    3966:	1e 86       	std	Y+14, r1	; 0x0e
    3968:	1f 86       	std	Y+15, r1	; 0x0f
    396a:	18 8a       	std	Y+16, r1	; 0x10
    396c:	4a c0       	rjmp	.+148    	; 0x3a02 <LCD_4ByteToString+0x144>
	{
		rem = copy_u8num % 10;
    396e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3970:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3972:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3974:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3976:	2a e0       	ldi	r18, 0x0A	; 10
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	50 e0       	ldi	r21, 0x00	; 0
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 75 26 	call	0x4cea	; 0x4cea <__udivmodsi4>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	89 87       	std	Y+9, r24	; 0x09
    398c:	9a 87       	std	Y+10, r25	; 0x0a
    398e:	ab 87       	std	Y+11, r26	; 0x0b
    3990:	bc 87       	std	Y+12, r27	; 0x0c
		copy_u8num = copy_u8num / 10;
    3992:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3994:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3996:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3998:	bf 8d       	ldd	r27, Y+31	; 0x1f
    399a:	2a e0       	ldi	r18, 0x0A	; 10
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	bc 01       	movw	r22, r24
    39a4:	cd 01       	movw	r24, r26
    39a6:	0e 94 75 26 	call	0x4cea	; 0x4cea <__udivmodsi4>
    39aa:	da 01       	movw	r26, r20
    39ac:	c9 01       	movw	r24, r18
    39ae:	8c 8f       	std	Y+28, r24	; 0x1c
    39b0:	9d 8f       	std	Y+29, r25	; 0x1d
    39b2:	ae 8f       	std	Y+30, r26	; 0x1e
    39b4:	bf 8f       	std	Y+31, r27	; 0x1f
		str[len - (i + 1)] = rem + '0';
    39b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ba:	af 85       	ldd	r26, Y+15	; 0x0f
    39bc:	b8 89       	ldd	r27, Y+16	; 0x10
    39be:	9c 01       	movw	r18, r24
    39c0:	ad 01       	movw	r20, r26
    39c2:	20 95       	com	r18
    39c4:	30 95       	com	r19
    39c6:	40 95       	com	r20
    39c8:	50 95       	com	r21
    39ca:	8d 81       	ldd	r24, Y+5	; 0x05
    39cc:	9e 81       	ldd	r25, Y+6	; 0x06
    39ce:	af 81       	ldd	r26, Y+7	; 0x07
    39d0:	b8 85       	ldd	r27, Y+8	; 0x08
    39d2:	28 0f       	add	r18, r24
    39d4:	39 1f       	adc	r19, r25
    39d6:	4a 1f       	adc	r20, r26
    39d8:	5b 1f       	adc	r21, r27
    39da:	89 85       	ldd	r24, Y+9	; 0x09
    39dc:	68 2f       	mov	r22, r24
    39de:	60 5d       	subi	r22, 0xD0	; 208
    39e0:	ce 01       	movw	r24, r28
    39e2:	41 96       	adiw	r24, 0x11	; 17
    39e4:	fc 01       	movw	r30, r24
    39e6:	e2 0f       	add	r30, r18
    39e8:	f3 1f       	adc	r31, r19
    39ea:	60 83       	st	Z, r22
	while (n != 0)
	{
		len++;
		n /= 10;
	}
	for (i = 0; i < len; i++)
    39ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f0:	af 85       	ldd	r26, Y+15	; 0x0f
    39f2:	b8 89       	ldd	r27, Y+16	; 0x10
    39f4:	01 96       	adiw	r24, 0x01	; 1
    39f6:	a1 1d       	adc	r26, r1
    39f8:	b1 1d       	adc	r27, r1
    39fa:	8d 87       	std	Y+13, r24	; 0x0d
    39fc:	9e 87       	std	Y+14, r25	; 0x0e
    39fe:	af 87       	std	Y+15, r26	; 0x0f
    3a00:	b8 8b       	std	Y+16, r27	; 0x10
    3a02:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a04:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a06:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a08:	58 89       	ldd	r21, Y+16	; 0x10
    3a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0e:	af 81       	ldd	r26, Y+7	; 0x07
    3a10:	b8 85       	ldd	r27, Y+8	; 0x08
    3a12:	28 17       	cp	r18, r24
    3a14:	39 07       	cpc	r19, r25
    3a16:	4a 07       	cpc	r20, r26
    3a18:	5b 07       	cpc	r21, r27
    3a1a:	08 f4       	brcc	.+2      	; 0x3a1e <LCD_4ByteToString+0x160>
    3a1c:	a8 cf       	rjmp	.-176    	; 0x396e <LCD_4ByteToString+0xb0>
	{
		rem = copy_u8num % 10;
		copy_u8num = copy_u8num / 10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
    3a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a20:	9e 81       	ldd	r25, Y+6	; 0x06
    3a22:	af 81       	ldd	r26, Y+7	; 0x07
    3a24:	b8 85       	ldd	r27, Y+8	; 0x08
    3a26:	9e 01       	movw	r18, r28
    3a28:	2f 5e       	subi	r18, 0xEF	; 239
    3a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2c:	f9 01       	movw	r30, r18
    3a2e:	e8 0f       	add	r30, r24
    3a30:	f9 1f       	adc	r31, r25
    3a32:	10 82       	st	Z, r1
	LCD_voidSendString(str);
    3a34:	ce 01       	movw	r24, r28
    3a36:	41 96       	adiw	r24, 0x11	; 17
    3a38:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>

}
    3a3c:	6f 96       	adiw	r28, 0x1f	; 31
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <LCD_DeleteChar>:

void LCD_DeleteChar(void){
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	2e 97       	sbiw	r28, 0x0e	; 14
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(CURSOR_ON);
    3a62:	8e e0       	ldi	r24, 0x0E	; 14
    3a64:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidSendCommand(0x10); //shift cursor left
    3a68:	80 e1       	ldi	r24, 0x10	; 16
    3a6a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidSendData(' ');
    3a6e:	80 e2       	ldi	r24, 0x20	; 32
    3a70:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_voidSendData>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a0 e2       	ldi	r26, 0x20	; 32
    3a7a:	b1 e4       	ldi	r27, 0x41	; 65
    3a7c:	8b 87       	std	Y+11, r24	; 0x0b
    3a7e:	9c 87       	std	Y+12, r25	; 0x0c
    3a80:	ad 87       	std	Y+13, r26	; 0x0d
    3a82:	be 87       	std	Y+14, r27	; 0x0e
    3a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	4a ef       	ldi	r20, 0xFA	; 250
    3a92:	54 e4       	ldi	r21, 0x44	; 68
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	8f 83       	std	Y+7, r24	; 0x07
    3a9e:	98 87       	std	Y+8, r25	; 0x08
    3aa0:	a9 87       	std	Y+9, r26	; 0x09
    3aa2:	ba 87       	std	Y+10, r27	; 0x0a
    3aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa6:	78 85       	ldd	r23, Y+8	; 0x08
    3aa8:	89 85       	ldd	r24, Y+9	; 0x09
    3aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e8       	ldi	r20, 0x80	; 128
    3ab2:	5f e3       	ldi	r21, 0x3F	; 63
    3ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab8:	88 23       	and	r24, r24
    3aba:	2c f4       	brge	.+10     	; 0x3ac6 <LCD_DeleteChar+0x78>
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	3f c0       	rjmp	.+126    	; 0x3b44 <LCD_DeleteChar+0xf6>
    3ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac8:	78 85       	ldd	r23, Y+8	; 0x08
    3aca:	89 85       	ldd	r24, Y+9	; 0x09
    3acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	57 e4       	ldi	r21, 0x47	; 71
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	4c f5       	brge	.+82     	; 0x3b30 <LCD_DeleteChar+0xe2>
    3ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e2       	ldi	r20, 0x20	; 32
    3aec:	51 e4       	ldi	r21, 0x41	; 65
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	bc 01       	movw	r22, r24
    3af8:	cd 01       	movw	r24, r26
    3afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9e 83       	std	Y+6, r25	; 0x06
    3b04:	8d 83       	std	Y+5, r24	; 0x05
    3b06:	0f c0       	rjmp	.+30     	; 0x3b26 <LCD_DeleteChar+0xd8>
    3b08:	88 ec       	ldi	r24, 0xC8	; 200
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9c 83       	std	Y+4, r25	; 0x04
    3b0e:	8b 83       	std	Y+3, r24	; 0x03
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	9c 81       	ldd	r25, Y+4	; 0x04
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <LCD_DeleteChar+0xc6>
    3b18:	9c 83       	std	Y+4, r25	; 0x04
    3b1a:	8b 83       	std	Y+3, r24	; 0x03
    3b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	9e 83       	std	Y+6, r25	; 0x06
    3b24:	8d 83       	std	Y+5, r24	; 0x05
    3b26:	8d 81       	ldd	r24, Y+5	; 0x05
    3b28:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	69 f7       	brne	.-38     	; 0x3b08 <LCD_DeleteChar+0xba>
    3b2e:	14 c0       	rjmp	.+40     	; 0x3b58 <LCD_DeleteChar+0x10a>
    3b30:	6f 81       	ldd	r22, Y+7	; 0x07
    3b32:	78 85       	ldd	r23, Y+8	; 0x08
    3b34:	89 85       	ldd	r24, Y+9	; 0x09
    3b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9e 83       	std	Y+6, r25	; 0x06
    3b42:	8d 83       	std	Y+5, r24	; 0x05
    3b44:	8d 81       	ldd	r24, Y+5	; 0x05
    3b46:	9e 81       	ldd	r25, Y+6	; 0x06
    3b48:	9a 83       	std	Y+2, r25	; 0x02
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <LCD_DeleteChar+0x102>
    3b54:	9a 83       	std	Y+2, r25	; 0x02
    3b56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_voidSendCommand(0x10);
    3b58:	80 e1       	ldi	r24, 0x10	; 16
    3b5a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
}
    3b5e:	2e 96       	adiw	r28, 0x0e	; 14
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
u8 KeyPad_getPressedKey(void){
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <KeyPad_getPressedKey+0x6>
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
	u8 col,row;
	while(1){

		for(col=0;col<N_col;col++) /* loop for columns */
    3b7a:	1a 82       	std	Y+2, r1	; 0x02
    3b7c:	63 c0       	rjmp	.+198    	; 0x3c44 <KeyPad_getPressedKey+0xd4>
		{

			 DIO_voidSetPortDirection(1, 0b00010000<<col);
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	28 2f       	mov	r18, r24
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	80 e1       	ldi	r24, 0x10	; 16
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	02 c0       	rjmp	.+4      	; 0x3b8e <KeyPad_getPressedKey+0x1e>
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	2a 95       	dec	r18
    3b90:	e2 f7       	brpl	.-8      	; 0x3b8a <KeyPad_getPressedKey+0x1a>
    3b92:	98 2f       	mov	r25, r24
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	69 2f       	mov	r22, r25
    3b98:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <DIO_voidSetPortDirection>
			  DIO_voidSetPortValue(1, (~(0b00010000<<col)) );
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	80 e1       	ldi	r24, 0x10	; 16
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <KeyPad_getPressedKey+0x3c>
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	2a 95       	dec	r18
    3bae:	e2 f7       	brpl	.-8      	; 0x3ba8 <KeyPad_getPressedKey+0x38>
    3bb0:	98 2f       	mov	r25, r24
    3bb2:	90 95       	com	r25
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	69 2f       	mov	r22, r25
    3bb8:	0e 94 39 0c 	call	0x1872	; 0x1872 <DIO_voidSetPortValue>
			for(row=0;row<N_row;row++) /* loop for rows */
    3bbc:	19 82       	std	Y+1, r1	; 0x01
    3bbe:	3b c0       	rjmp	.+118    	; 0x3c36 <KeyPad_getPressedKey+0xc6>
			{
				if(  IS_BIT_CLEAR(KEYPAD_PORT_IN,row))
    3bc0:	e6 e3       	ldi	r30, 0x36	; 54
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	88 2f       	mov	r24, r24
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	a9 01       	movw	r20, r18
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <KeyPad_getPressedKey+0x68>
    3bd4:	55 95       	asr	r21
    3bd6:	47 95       	ror	r20
    3bd8:	8a 95       	dec	r24
    3bda:	e2 f7       	brpl	.-8      	; 0x3bd4 <KeyPad_getPressedKey+0x64>
    3bdc:	ca 01       	movw	r24, r20
    3bde:	81 70       	andi	r24, 0x01	; 1
    3be0:	90 70       	andi	r25, 0x00	; 0
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	29 f5       	brne	.+74     	; 0x3c30 <KeyPad_getPressedKey+0xc0>
				{
					while(  IS_BIT_CLEAR(KEYPAD_PORT_IN,row));
    3be6:	e6 e3       	ldi	r30, 0x36	; 54
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	28 2f       	mov	r18, r24
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	88 2f       	mov	r24, r24
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	a9 01       	movw	r20, r18
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <KeyPad_getPressedKey+0x8e>
    3bfa:	55 95       	asr	r21
    3bfc:	47 95       	ror	r20
    3bfe:	8a 95       	dec	r24
    3c00:	e2 f7       	brpl	.-8      	; 0x3bfa <KeyPad_getPressedKey+0x8a>
    3c02:	ca 01       	movw	r24, r20
    3c04:	81 70       	andi	r24, 0x01	; 1
    3c06:	90 70       	andi	r25, 0x00	; 0
    3c08:	00 97       	sbiw	r24, 0x00	; 0
    3c0a:	69 f3       	breq	.-38     	; 0x3be6 <KeyPad_getPressedKey+0x76>
#if (N_col == 3)
					 return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);

#elif (N_col == 4)
					return  KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	88 2f       	mov	r24, r24
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	98 2f       	mov	r25, r24
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	89 0f       	add	r24, r25
    3c20:	8f 5f       	subi	r24, 0xFF	; 255
    3c22:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <KeyPad_4x4_adjustKeyNumber>
			}
		}

	}

}
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	cf 91       	pop	r28
    3c2c:	df 91       	pop	r29
    3c2e:	08 95       	ret
		for(col=0;col<N_col;col++) /* loop for columns */
		{

			 DIO_voidSetPortDirection(1, 0b00010000<<col);
			  DIO_voidSetPortValue(1, (~(0b00010000<<col)) );
			for(row=0;row<N_row;row++) /* loop for rows */
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	8f 5f       	subi	r24, 0xFF	; 255
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	84 30       	cpi	r24, 0x04	; 4
    3c3a:	08 f4       	brcc	.+2      	; 0x3c3e <KeyPad_getPressedKey+0xce>
    3c3c:	c1 cf       	rjmp	.-126    	; 0x3bc0 <KeyPad_getPressedKey+0x50>
 *******************************************************************************/
u8 KeyPad_getPressedKey(void){
	u8 col,row;
	while(1){

		for(col=0;col<N_col;col++) /* loop for columns */
    3c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c40:	8f 5f       	subi	r24, 0xFF	; 255
    3c42:	8a 83       	std	Y+2, r24	; 0x02
    3c44:	8a 81       	ldd	r24, Y+2	; 0x02
    3c46:	84 30       	cpi	r24, 0x04	; 4
    3c48:	08 f4       	brcc	.+2      	; 0x3c4c <KeyPad_getPressedKey+0xdc>
    3c4a:	99 cf       	rjmp	.-206    	; 0x3b7e <KeyPad_getPressedKey+0xe>
    3c4c:	96 cf       	rjmp	.-212    	; 0x3b7a <KeyPad_getPressedKey+0xa>

00003c4e <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)

static u8 KeyPad_4x4_adjustKeyNumber(u8 button_number)
{
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <KeyPad_4x4_adjustKeyNumber+0x6>
    3c54:	00 d0       	rcall	.+0      	; 0x3c56 <KeyPad_4x4_adjustKeyNumber+0x8>
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	3c 83       	std	Y+4, r19	; 0x04
    3c64:	2b 83       	std	Y+3, r18	; 0x03
    3c66:	8b 81       	ldd	r24, Y+3	; 0x03
    3c68:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6a:	88 30       	cpi	r24, 0x08	; 8
    3c6c:	91 05       	cpc	r25, r1
    3c6e:	09 f4       	brne	.+2      	; 0x3c72 <KeyPad_4x4_adjustKeyNumber+0x24>
    3c70:	70 c0       	rjmp	.+224    	; 0x3d52 <KeyPad_4x4_adjustKeyNumber+0x104>
    3c72:	2b 81       	ldd	r18, Y+3	; 0x03
    3c74:	3c 81       	ldd	r19, Y+4	; 0x04
    3c76:	29 30       	cpi	r18, 0x09	; 9
    3c78:	31 05       	cpc	r19, r1
    3c7a:	5c f5       	brge	.+86     	; 0x3cd2 <KeyPad_4x4_adjustKeyNumber+0x84>
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c80:	84 30       	cpi	r24, 0x04	; 4
    3c82:	91 05       	cpc	r25, r1
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <KeyPad_4x4_adjustKeyNumber+0x3a>
    3c86:	59 c0       	rjmp	.+178    	; 0x3d3a <KeyPad_4x4_adjustKeyNumber+0xec>
    3c88:	2b 81       	ldd	r18, Y+3	; 0x03
    3c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c8c:	25 30       	cpi	r18, 0x05	; 5
    3c8e:	31 05       	cpc	r19, r1
    3c90:	9c f4       	brge	.+38     	; 0x3cb8 <KeyPad_4x4_adjustKeyNumber+0x6a>
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	82 30       	cpi	r24, 0x02	; 2
    3c98:	91 05       	cpc	r25, r1
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <KeyPad_4x4_adjustKeyNumber+0x50>
    3c9c:	48 c0       	rjmp	.+144    	; 0x3d2e <KeyPad_4x4_adjustKeyNumber+0xe0>
    3c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    3ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ca2:	23 30       	cpi	r18, 0x03	; 3
    3ca4:	31 05       	cpc	r19, r1
    3ca6:	0c f0       	brlt	.+2      	; 0x3caa <KeyPad_4x4_adjustKeyNumber+0x5c>
    3ca8:	45 c0       	rjmp	.+138    	; 0x3d34 <KeyPad_4x4_adjustKeyNumber+0xe6>
    3caa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cac:	9c 81       	ldd	r25, Y+4	; 0x04
    3cae:	81 30       	cpi	r24, 0x01	; 1
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <KeyPad_4x4_adjustKeyNumber+0x68>
    3cb4:	39 c0       	rjmp	.+114    	; 0x3d28 <KeyPad_4x4_adjustKeyNumber+0xda>
    3cb6:	67 c0       	rjmp	.+206    	; 0x3d86 <KeyPad_4x4_adjustKeyNumber+0x138>
    3cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    3cba:	3c 81       	ldd	r19, Y+4	; 0x04
    3cbc:	26 30       	cpi	r18, 0x06	; 6
    3cbe:	31 05       	cpc	r19, r1
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <KeyPad_4x4_adjustKeyNumber+0x76>
    3cc2:	41 c0       	rjmp	.+130    	; 0x3d46 <KeyPad_4x4_adjustKeyNumber+0xf8>
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc8:	87 30       	cpi	r24, 0x07	; 7
    3cca:	91 05       	cpc	r25, r1
    3ccc:	0c f0       	brlt	.+2      	; 0x3cd0 <KeyPad_4x4_adjustKeyNumber+0x82>
    3cce:	3e c0       	rjmp	.+124    	; 0x3d4c <KeyPad_4x4_adjustKeyNumber+0xfe>
    3cd0:	37 c0       	rjmp	.+110    	; 0x3d40 <KeyPad_4x4_adjustKeyNumber+0xf2>
    3cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    3cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    3cd6:	2c 30       	cpi	r18, 0x0C	; 12
    3cd8:	31 05       	cpc	r19, r1
    3cda:	09 f4       	brne	.+2      	; 0x3cde <KeyPad_4x4_adjustKeyNumber+0x90>
    3cdc:	46 c0       	rjmp	.+140    	; 0x3d6a <KeyPad_4x4_adjustKeyNumber+0x11c>
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce2:	8d 30       	cpi	r24, 0x0D	; 13
    3ce4:	91 05       	cpc	r25, r1
    3ce6:	5c f4       	brge	.+22     	; 0x3cfe <KeyPad_4x4_adjustKeyNumber+0xb0>
    3ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    3cea:	3c 81       	ldd	r19, Y+4	; 0x04
    3cec:	2a 30       	cpi	r18, 0x0A	; 10
    3cee:	31 05       	cpc	r19, r1
    3cf0:	b1 f1       	breq	.+108    	; 0x3d5e <KeyPad_4x4_adjustKeyNumber+0x110>
    3cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf6:	8b 30       	cpi	r24, 0x0B	; 11
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	a4 f5       	brge	.+104    	; 0x3d64 <KeyPad_4x4_adjustKeyNumber+0x116>
    3cfc:	2d c0       	rjmp	.+90     	; 0x3d58 <KeyPad_4x4_adjustKeyNumber+0x10a>
    3cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    3d00:	3c 81       	ldd	r19, Y+4	; 0x04
    3d02:	2e 30       	cpi	r18, 0x0E	; 14
    3d04:	31 05       	cpc	r19, r1
    3d06:	b9 f1       	breq	.+110    	; 0x3d76 <KeyPad_4x4_adjustKeyNumber+0x128>
    3d08:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0c:	8e 30       	cpi	r24, 0x0E	; 14
    3d0e:	91 05       	cpc	r25, r1
    3d10:	7c f1       	brlt	.+94     	; 0x3d70 <KeyPad_4x4_adjustKeyNumber+0x122>
    3d12:	2b 81       	ldd	r18, Y+3	; 0x03
    3d14:	3c 81       	ldd	r19, Y+4	; 0x04
    3d16:	2f 30       	cpi	r18, 0x0F	; 15
    3d18:	31 05       	cpc	r19, r1
    3d1a:	79 f1       	breq	.+94     	; 0x3d7a <KeyPad_4x4_adjustKeyNumber+0x12c>
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	80 31       	cpi	r24, 0x10	; 16
    3d22:	91 05       	cpc	r25, r1
    3d24:	69 f1       	breq	.+90     	; 0x3d80 <KeyPad_4x4_adjustKeyNumber+0x132>
    3d26:	2f c0       	rjmp	.+94     	; 0x3d86 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1: return 7;
    3d28:	97 e0       	ldi	r25, 0x07	; 7
    3d2a:	9a 83       	std	Y+2, r25	; 0x02
    3d2c:	2e c0       	rjmp	.+92     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 2: return 8;
    3d2e:	28 e0       	ldi	r18, 0x08	; 8
    3d30:	2a 83       	std	Y+2, r18	; 0x02
    3d32:	2b c0       	rjmp	.+86     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 3: return 9;
    3d34:	39 e0       	ldi	r19, 0x09	; 9
    3d36:	3a 83       	std	Y+2, r19	; 0x02
    3d38:	28 c0       	rjmp	.+80     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 4: return '%'; // ASCII Code of %
    3d3a:	85 e2       	ldi	r24, 0x25	; 37
    3d3c:	8a 83       	std	Y+2, r24	; 0x02
    3d3e:	25 c0       	rjmp	.+74     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 5: return 4;
    3d40:	94 e0       	ldi	r25, 0x04	; 4
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	22 c0       	rjmp	.+68     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 6: return 5;
    3d46:	25 e0       	ldi	r18, 0x05	; 5
    3d48:	2a 83       	std	Y+2, r18	; 0x02
    3d4a:	1f c0       	rjmp	.+62     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 7: return 6;
    3d4c:	36 e0       	ldi	r19, 0x06	; 6
    3d4e:	3a 83       	std	Y+2, r19	; 0x02
    3d50:	1c c0       	rjmp	.+56     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 8: return '*'; /* ASCII Code of '*' */
    3d52:	8a e2       	ldi	r24, 0x2A	; 42
    3d54:	8a 83       	std	Y+2, r24	; 0x02
    3d56:	19 c0       	rjmp	.+50     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 9: return 1;
    3d58:	91 e0       	ldi	r25, 0x01	; 1
    3d5a:	9a 83       	std	Y+2, r25	; 0x02
    3d5c:	16 c0       	rjmp	.+44     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 10: return 2;
    3d5e:	22 e0       	ldi	r18, 0x02	; 2
    3d60:	2a 83       	std	Y+2, r18	; 0x02
    3d62:	13 c0       	rjmp	.+38     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 11: return 3;
    3d64:	33 e0       	ldi	r19, 0x03	; 3
    3d66:	3a 83       	std	Y+2, r19	; 0x02
    3d68:	10 c0       	rjmp	.+32     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 12: return '-'; /* ASCII Code of '-' */
    3d6a:	8d e2       	ldi	r24, 0x2D	; 45
    3d6c:	8a 83       	std	Y+2, r24	; 0x02
    3d6e:	0d c0       	rjmp	.+26     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 13: return 'c';  /* ASCII of Enter */
    3d70:	93 e6       	ldi	r25, 0x63	; 99
    3d72:	9a 83       	std	Y+2, r25	; 0x02
    3d74:	0a c0       	rjmp	.+20     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 14: return 0;
    3d76:	1a 82       	std	Y+2, r1	; 0x02
    3d78:	08 c0       	rjmp	.+16     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 15: return '='; /* ASCII Code of '=' */
    3d7a:	2d e3       	ldi	r18, 0x3D	; 61
    3d7c:	2a 83       	std	Y+2, r18	; 0x02
    3d7e:	05 c0       	rjmp	.+10     	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	case 16: return '+'; /* ASCII Code of '+' */
    3d80:	3b e2       	ldi	r19, 0x2B	; 43
    3d82:	3a 83       	std	Y+2, r19	; 0x02
    3d84:	02 c0       	rjmp	.+4      	; 0x3d8a <KeyPad_4x4_adjustKeyNumber+0x13c>
	break;
	default: return button_number;
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	8a 83       	std	Y+2, r24	; 0x02
    3d8a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <Buzzer_voidInit>:

#include "../../LIB/STD_Type.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../HAL/BUZZERS/Buzzer_Config.h"

void Buzzer_voidInit(void){
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(BUZZER_PORT,BUZZER_PIN,DIO_OUTPUT);
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	63 e0       	ldi	r22, 0x03	; 3
    3da6:	41 e0       	ldi	r20, 0x01	; 1
    3da8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_voidSetPinDirection>
}
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <Buzzer_voidOn>:

void Buzzer_voidOn(void){
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BUZZER_PORT,BUZZER_PIN,DIO_HIGH);
    3dba:	82 e0       	ldi	r24, 0x02	; 2
    3dbc:	63 e0       	ldi	r22, 0x03	; 3
    3dbe:	41 e0       	ldi	r20, 0x01	; 1
    3dc0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
}
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <Buzzer_voidOff>:
void Buzzer_voidOff(void){
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	cd b7       	in	r28, 0x3d	; 61
    3dd0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BUZZER_PORT,BUZZER_PIN,DIO_LOW);
    3dd2:	82 e0       	ldi	r24, 0x02	; 2
    3dd4:	63 e0       	ldi	r22, 0x03	; 3
    3dd6:	40 e0       	ldi	r20, 0x00	; 0
    3dd8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <DIO_voidSetPinValue>
}
    3ddc:	cf 91       	pop	r28
    3dde:	df 91       	pop	r29
    3de0:	08 95       	ret

00003de2 <System_voidInit>:
static void TurnON_Heater_Fan(u8 copy_u8dutycycle);
static void Time_Update(void);
static void GETTIME(void);
static void System_Cancel(void);

void System_voidInit(void){
    3de2:	df 93       	push	r29
    3de4:	cf 93       	push	r28
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    3dea:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidInit>
	SetCallBack(&Time_Update);
    3dee:	88 e3       	ldi	r24, 0x38	; 56
    3df0:	95 e2       	ldi	r25, 0x25	; 37
    3df2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SetCallBack>
	POT_VoidInit();
    3df6:	0e 94 2e 10 	call	0x205c	; 0x205c <POT_VoidInit>
	LM35_VoidInit();
    3dfa:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LM35_VoidInit>
	MOTOR_voidInit();
    3dfe:	0e 94 c9 10 	call	0x2192	; 0x2192 <MOTOR_voidInit>
	LED_voidInitLed(DIO_PORTD,DIO_PIN0);
    3e02:	83 e0       	ldi	r24, 0x03	; 3
    3e04:	60 e0       	ldi	r22, 0x00	; 0
    3e06:	0e 94 ad 11 	call	0x235a	; 0x235a <LED_voidInitLed>
	LED_voidInitLed(DIO_PORTD,DIO_PIN1);
    3e0a:	83 e0       	ldi	r24, 0x03	; 3
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	0e 94 ad 11 	call	0x235a	; 0x235a <LED_voidInitLed>
	LED_voidInitLed(DIO_PORTD,DIO_PIN3);
    3e12:	83 e0       	ldi	r24, 0x03	; 3
    3e14:	63 e0       	ldi	r22, 0x03	; 3
    3e16:	0e 94 ad 11 	call	0x235a	; 0x235a <LED_voidInitLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN0);
    3e1a:	83 e0       	ldi	r24, 0x03	; 3
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN1);
    3e22:	83 e0       	ldi	r24, 0x03	; 3
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN3);
    3e2a:	83 e0       	ldi	r24, 0x03	; 3
    3e2c:	63 e0       	ldi	r22, 0x03	; 3
    3e2e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	Buzzer_voidInit();
    3e32:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <Buzzer_voidInit>
	Buzzer_voidOff();
    3e36:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <Buzzer_voidOff>
	EXIT_VidInit();
    3e3a:	0e 94 65 08 	call	0x10ca	; 0x10ca <EXIT_VidInit>
	EXIT0_Enable();
    3e3e:	0e 94 99 08 	call	0x1132	; 0x1132 <EXIT0_Enable>
	timer1_init();
    3e42:	0e 94 71 07 	call	0xee2	; 0xee2 <timer1_init>
	VECT_INT0_CallBack (&System_Cancel); /*initiate call back function*/
    3e46:	8c e2       	ldi	r24, 0x2C	; 44
    3e48:	93 e2       	ldi	r25, 0x23	; 35
    3e4a:	0e 94 ef 08 	call	0x11de	; 0x11de <VECT_INT0_CallBack>
}
    3e4e:	cf 91       	pop	r28
    3e50:	df 91       	pop	r29
    3e52:	08 95       	ret

00003e54 <MicroWave_voidStart>:

void MicroWave_voidStart(void){
    3e54:	df 93       	push	r29
    3e56:	cf 93       	push	r28
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
    3e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	cd bf       	out	0x3d, r28	; 61
	LCD_voidgotorowcolum(0,0);
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	60 e0       	ldi	r22, 0x00	; 0
    3e6c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	LCD_voidSendString("****Welcome****");
    3e70:	80 e6       	ldi	r24, 0x60	; 96
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>
	LED_voidOnLed(DIO_PORTD,DIO_PIN1);  /*led yallow to indicate microwave don't turn on*/
    3e78:	83 e0       	ldi	r24, 0x03	; 3
    3e7a:	61 e0       	ldi	r22, 0x01	; 1
    3e7c:	0e 94 c3 11 	call	0x2386	; 0x2386 <LED_voidOnLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN3);  /*led green to indicate microwave don't turn on*/
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	63 e0       	ldi	r22, 0x03	; 3
    3e84:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN0);  /*led red to indicate microwave don't turn on*/
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	60 e0       	ldi	r22, 0x00	; 0
    3e8c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	aa ef       	ldi	r26, 0xFA	; 250
    3e96:	b4 e4       	ldi	r27, 0x44	; 68
    3e98:	8b 87       	std	Y+11, r24	; 0x0b
    3e9a:	9c 87       	std	Y+12, r25	; 0x0c
    3e9c:	ad 87       	std	Y+13, r26	; 0x0d
    3e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	4a ef       	ldi	r20, 0xFA	; 250
    3eae:	54 e4       	ldi	r21, 0x44	; 68
    3eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	8f 83       	std	Y+7, r24	; 0x07
    3eba:	98 87       	std	Y+8, r25	; 0x08
    3ebc:	a9 87       	std	Y+9, r26	; 0x09
    3ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec2:	78 85       	ldd	r23, Y+8	; 0x08
    3ec4:	89 85       	ldd	r24, Y+9	; 0x09
    3ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed4:	88 23       	and	r24, r24
    3ed6:	2c f4       	brge	.+10     	; 0x3ee2 <MicroWave_voidStart+0x8e>
		__ticks = 1;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	9e 83       	std	Y+6, r25	; 0x06
    3ede:	8d 83       	std	Y+5, r24	; 0x05
    3ee0:	3f c0       	rjmp	.+126    	; 0x3f60 <MicroWave_voidStart+0x10c>
	else if (__tmp > 65535)
    3ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee4:	78 85       	ldd	r23, Y+8	; 0x08
    3ee6:	89 85       	ldd	r24, Y+9	; 0x09
    3ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	3f ef       	ldi	r19, 0xFF	; 255
    3eee:	4f e7       	ldi	r20, 0x7F	; 127
    3ef0:	57 e4       	ldi	r21, 0x47	; 71
    3ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef6:	18 16       	cp	r1, r24
    3ef8:	4c f5       	brge	.+82     	; 0x3f4c <MicroWave_voidStart+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e2       	ldi	r20, 0x20	; 32
    3f08:	51 e4       	ldi	r21, 0x41	; 65
    3f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	bc 01       	movw	r22, r24
    3f14:	cd 01       	movw	r24, r26
    3f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	9e 83       	std	Y+6, r25	; 0x06
    3f20:	8d 83       	std	Y+5, r24	; 0x05
    3f22:	0f c0       	rjmp	.+30     	; 0x3f42 <MicroWave_voidStart+0xee>
    3f24:	88 ec       	ldi	r24, 0xC8	; 200
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	9c 83       	std	Y+4, r25	; 0x04
    3f2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <MicroWave_voidStart+0xdc>
    3f34:	9c 83       	std	Y+4, r25	; 0x04
    3f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f38:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3c:	01 97       	sbiw	r24, 0x01	; 1
    3f3e:	9e 83       	std	Y+6, r25	; 0x06
    3f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f42:	8d 81       	ldd	r24, Y+5	; 0x05
    3f44:	9e 81       	ldd	r25, Y+6	; 0x06
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	69 f7       	brne	.-38     	; 0x3f24 <MicroWave_voidStart+0xd0>
    3f4a:	14 c0       	rjmp	.+40     	; 0x3f74 <MicroWave_voidStart+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4e:	78 85       	ldd	r23, Y+8	; 0x08
    3f50:	89 85       	ldd	r24, Y+9	; 0x09
    3f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	9e 83       	std	Y+6, r25	; 0x06
    3f5e:	8d 83       	std	Y+5, r24	; 0x05
    3f60:	8d 81       	ldd	r24, Y+5	; 0x05
    3f62:	9e 81       	ldd	r25, Y+6	; 0x06
    3f64:	9a 83       	std	Y+2, r25	; 0x02
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <MicroWave_voidStart+0x118>
    3f70:	9a 83       	std	Y+2, r25	; 0x02
    3f72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	Check_weight();
    3f74:	0e 94 80 20 	call	0x4100	; 0x4100 <Check_weight>
}
    3f78:	2e 96       	adiw	r28, 0x0e	; 14
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	f8 94       	cli
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	0f be       	out	0x3f, r0	; 63
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	08 95       	ret

00003f8a <GETTIME>:

static void GETTIME(void){
    3f8a:	df 93       	push	r29
    3f8c:	cf 93       	push	r28
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	2e 97       	sbiw	r28, 0x0e	; 14
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidgotorowcolum(0,0);
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	LCD_voidSendString("ENTER TIME:");
    3fa6:	80 e7       	ldi	r24, 0x70	; 112
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>
	LCD_voidgotorowcolum(1,5);
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	65 e0       	ldi	r22, 0x05	; 5
    3fb2:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>

	Time_value[0]=KeyPad_getPressedKey(); /*get first digit of min*/
    3fb6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <KeyPad_getPressedKey>
    3fba:	80 93 01 02 	sts	0x0201, r24
	LCD_1ByteToString(Time_value[0]);
    3fbe:	80 91 01 02 	lds	r24, 0x0201
    3fc2:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>

	Time_value[1]=KeyPad_getPressedKey(); /*get second digit of min*/
    3fc6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <KeyPad_getPressedKey>
    3fca:	80 93 02 02 	sts	0x0202, r24
	LCD_1ByteToString(Time_value[1]);
    3fce:	80 91 02 02 	lds	r24, 0x0202
    3fd2:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>

	LCD_voidSendData(':');
    3fd6:	8a e3       	ldi	r24, 0x3A	; 58
    3fd8:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_voidSendData>


	Time_value[2]=KeyPad_getPressedKey(); /*get first digit of sec*/
    3fdc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <KeyPad_getPressedKey>
    3fe0:	80 93 03 02 	sts	0x0203, r24
	LCD_1ByteToString(Time_value[2]);
    3fe4:	80 91 03 02 	lds	r24, 0x0203
    3fe8:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>

	Time_value[3]=KeyPad_getPressedKey();  /*get second digit of sec*/
    3fec:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <KeyPad_getPressedKey>
    3ff0:	80 93 04 02 	sts	0x0204, r24
	LCD_1ByteToString(Time_value[3]);
    3ff4:	80 91 04 02 	lds	r24, 0x0204
    3ff8:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	aa e7       	ldi	r26, 0x7A	; 122
    4002:	b4 e4       	ldi	r27, 0x44	; 68
    4004:	8b 87       	std	Y+11, r24	; 0x0b
    4006:	9c 87       	std	Y+12, r25	; 0x0c
    4008:	ad 87       	std	Y+13, r26	; 0x0d
    400a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400c:	6b 85       	ldd	r22, Y+11	; 0x0b
    400e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4010:	8d 85       	ldd	r24, Y+13	; 0x0d
    4012:	9e 85       	ldd	r25, Y+14	; 0x0e
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	4a ef       	ldi	r20, 0xFA	; 250
    401a:	54 e4       	ldi	r21, 0x44	; 68
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	8f 83       	std	Y+7, r24	; 0x07
    4026:	98 87       	std	Y+8, r25	; 0x08
    4028:	a9 87       	std	Y+9, r26	; 0x09
    402a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    402c:	6f 81       	ldd	r22, Y+7	; 0x07
    402e:	78 85       	ldd	r23, Y+8	; 0x08
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	40 e8       	ldi	r20, 0x80	; 128
    403a:	5f e3       	ldi	r21, 0x3F	; 63
    403c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4040:	88 23       	and	r24, r24
    4042:	2c f4       	brge	.+10     	; 0x404e <GETTIME+0xc4>
		__ticks = 1;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	9e 83       	std	Y+6, r25	; 0x06
    404a:	8d 83       	std	Y+5, r24	; 0x05
    404c:	3f c0       	rjmp	.+126    	; 0x40cc <GETTIME+0x142>
	else if (__tmp > 65535)
    404e:	6f 81       	ldd	r22, Y+7	; 0x07
    4050:	78 85       	ldd	r23, Y+8	; 0x08
    4052:	89 85       	ldd	r24, Y+9	; 0x09
    4054:	9a 85       	ldd	r25, Y+10	; 0x0a
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	3f ef       	ldi	r19, 0xFF	; 255
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	57 e4       	ldi	r21, 0x47	; 71
    405e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4062:	18 16       	cp	r1, r24
    4064:	4c f5       	brge	.+82     	; 0x40b8 <GETTIME+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4066:	6b 85       	ldd	r22, Y+11	; 0x0b
    4068:	7c 85       	ldd	r23, Y+12	; 0x0c
    406a:	8d 85       	ldd	r24, Y+13	; 0x0d
    406c:	9e 85       	ldd	r25, Y+14	; 0x0e
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e2       	ldi	r20, 0x20	; 32
    4074:	51 e4       	ldi	r21, 0x41	; 65
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9e 83       	std	Y+6, r25	; 0x06
    408c:	8d 83       	std	Y+5, r24	; 0x05
    408e:	0f c0       	rjmp	.+30     	; 0x40ae <GETTIME+0x124>
    4090:	88 ec       	ldi	r24, 0xC8	; 200
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	9c 83       	std	Y+4, r25	; 0x04
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	8b 81       	ldd	r24, Y+3	; 0x03
    409a:	9c 81       	ldd	r25, Y+4	; 0x04
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <GETTIME+0x112>
    40a0:	9c 83       	std	Y+4, r25	; 0x04
    40a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a4:	8d 81       	ldd	r24, Y+5	; 0x05
    40a6:	9e 81       	ldd	r25, Y+6	; 0x06
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    40ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ae:	8d 81       	ldd	r24, Y+5	; 0x05
    40b0:	9e 81       	ldd	r25, Y+6	; 0x06
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	69 f7       	brne	.-38     	; 0x4090 <GETTIME+0x106>
    40b6:	14 c0       	rjmp	.+40     	; 0x40e0 <GETTIME+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ba:	78 85       	ldd	r23, Y+8	; 0x08
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	9e 83       	std	Y+6, r25	; 0x06
    40ca:	8d 83       	std	Y+5, r24	; 0x05
    40cc:	8d 81       	ldd	r24, Y+5	; 0x05
    40ce:	9e 81       	ldd	r25, Y+6	; 0x06
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	9a 81       	ldd	r25, Y+2	; 0x02
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <GETTIME+0x14e>
    40dc:	9a 83       	std	Y+2, r25	; 0x02
    40de:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(1000);
	Prepare_Time();     /*prepare time which the user entered it*/
    40e0:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <Prepare_Time>
	LCD_voidSendCommand(0x01);
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	check_temp();
    40ea:	0e 94 99 20 	call	0x4132	; 0x4132 <check_temp>

}
    40ee:	2e 96       	adiw	r28, 0x0e	; 14
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	cf 91       	pop	r28
    40fc:	df 91       	pop	r29
    40fe:	08 95       	ret

00004100 <Check_weight>:

static void Check_weight(void){
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0x01);
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
    410e:	07 c0       	rjmp	.+14     	; 0x411e <Check_weight+0x1e>
	while ( POT_U16Read(1) == 0){
		LCD_displayStringRowColum(0,0,"pls Enter Food");
    4110:	2c e7       	ldi	r18, 0x7C	; 124
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	80 e0       	ldi	r24, 0x00	; 0
    4116:	60 e0       	ldi	r22, 0x00	; 0
    4118:	a9 01       	movw	r20, r18
    411a:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_displayStringRowColum>

}

static void Check_weight(void){
	LCD_voidSendCommand(0x01);
	while ( POT_U16Read(1) == 0){
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	0e 94 41 10 	call	0x2082	; 0x2082 <POT_U16Read>
    4124:	00 97       	sbiw	r24, 0x00	; 0
    4126:	a1 f3       	breq	.-24     	; 0x4110 <Check_weight+0x10>
		LCD_displayStringRowColum(0,0,"pls Enter Food");
	}
	Check_door();
    4128:	0e 94 db 21 	call	0x43b6	; 0x43b6 <Check_door>
}
    412c:	cf 91       	pop	r28
    412e:	df 91       	pop	r29
    4130:	08 95       	ret

00004132 <check_temp>:

static void check_temp(void){
    4132:	df 93       	push	r29
    4134:	cf 93       	push	r28
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	6d 97       	sbiw	r28, 0x1d	; 29
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
	u8 temp =0;
    4146:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_displayStringRowColum(0,0,"pls Enter Temp");
    4148:	2b e8       	ldi	r18, 0x8B	; 139
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	a9 01       	movw	r20, r18
    4152:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_displayStringRowColum>
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	a0 e0       	ldi	r26, 0x00	; 0
    415c:	b0 e0       	ldi	r27, 0x00	; 0
    415e:	89 8f       	std	Y+25, r24	; 0x19
    4160:	9a 8f       	std	Y+26, r25	; 0x1a
    4162:	ab 8f       	std	Y+27, r26	; 0x1b
    4164:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4166:	69 8d       	ldd	r22, Y+25	; 0x19
    4168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    416a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    416c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	4a ef       	ldi	r20, 0xFA	; 250
    4174:	54 e4       	ldi	r21, 0x44	; 68
    4176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	8d 8b       	std	Y+21, r24	; 0x15
    4180:	9e 8b       	std	Y+22, r25	; 0x16
    4182:	af 8b       	std	Y+23, r26	; 0x17
    4184:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4186:	6d 89       	ldd	r22, Y+21	; 0x15
    4188:	7e 89       	ldd	r23, Y+22	; 0x16
    418a:	8f 89       	ldd	r24, Y+23	; 0x17
    418c:	98 8d       	ldd	r25, Y+24	; 0x18
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e8       	ldi	r20, 0x80	; 128
    4194:	5f e3       	ldi	r21, 0x3F	; 63
    4196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    419a:	88 23       	and	r24, r24
    419c:	2c f4       	brge	.+10     	; 0x41a8 <check_temp+0x76>
		__ticks = 1;
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	9c 8b       	std	Y+20, r25	; 0x14
    41a4:	8b 8b       	std	Y+19, r24	; 0x13
    41a6:	3f c0       	rjmp	.+126    	; 0x4226 <check_temp+0xf4>
	else if (__tmp > 65535)
    41a8:	6d 89       	ldd	r22, Y+21	; 0x15
    41aa:	7e 89       	ldd	r23, Y+22	; 0x16
    41ac:	8f 89       	ldd	r24, Y+23	; 0x17
    41ae:	98 8d       	ldd	r25, Y+24	; 0x18
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	3f ef       	ldi	r19, 0xFF	; 255
    41b4:	4f e7       	ldi	r20, 0x7F	; 127
    41b6:	57 e4       	ldi	r21, 0x47	; 71
    41b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41bc:	18 16       	cp	r1, r24
    41be:	4c f5       	brge	.+82     	; 0x4212 <check_temp+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c0:	69 8d       	ldd	r22, Y+25	; 0x19
    41c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e2       	ldi	r20, 0x20	; 32
    41ce:	51 e4       	ldi	r21, 0x41	; 65
    41d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	bc 01       	movw	r22, r24
    41da:	cd 01       	movw	r24, r26
    41dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	9c 8b       	std	Y+20, r25	; 0x14
    41e6:	8b 8b       	std	Y+19, r24	; 0x13
    41e8:	0f c0       	rjmp	.+30     	; 0x4208 <check_temp+0xd6>
    41ea:	88 ec       	ldi	r24, 0xC8	; 200
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	9a 8b       	std	Y+18, r25	; 0x12
    41f0:	89 8b       	std	Y+17, r24	; 0x11
    41f2:	89 89       	ldd	r24, Y+17	; 0x11
    41f4:	9a 89       	ldd	r25, Y+18	; 0x12
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	f1 f7       	brne	.-4      	; 0x41f6 <check_temp+0xc4>
    41fa:	9a 8b       	std	Y+18, r25	; 0x12
    41fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4200:	9c 89       	ldd	r25, Y+20	; 0x14
    4202:	01 97       	sbiw	r24, 0x01	; 1
    4204:	9c 8b       	std	Y+20, r25	; 0x14
    4206:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4208:	8b 89       	ldd	r24, Y+19	; 0x13
    420a:	9c 89       	ldd	r25, Y+20	; 0x14
    420c:	00 97       	sbiw	r24, 0x00	; 0
    420e:	69 f7       	brne	.-38     	; 0x41ea <check_temp+0xb8>
    4210:	14 c0       	rjmp	.+40     	; 0x423a <check_temp+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4212:	6d 89       	ldd	r22, Y+21	; 0x15
    4214:	7e 89       	ldd	r23, Y+22	; 0x16
    4216:	8f 89       	ldd	r24, Y+23	; 0x17
    4218:	98 8d       	ldd	r25, Y+24	; 0x18
    421a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9c 8b       	std	Y+20, r25	; 0x14
    4224:	8b 8b       	std	Y+19, r24	; 0x13
    4226:	8b 89       	ldd	r24, Y+19	; 0x13
    4228:	9c 89       	ldd	r25, Y+20	; 0x14
    422a:	98 8b       	std	Y+16, r25	; 0x10
    422c:	8f 87       	std	Y+15, r24	; 0x0f
    422e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4230:	98 89       	ldd	r25, Y+16	; 0x10
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	f1 f7       	brne	.-4      	; 0x4232 <check_temp+0x100>
    4236:	98 8b       	std	Y+16, r25	; 0x10
    4238:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(000);
	temp = LM35_U16Read(2);
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	0e 94 81 10 	call	0x2102	; 0x2102 <LM35_U16Read>
    4240:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_voidSendCommand(0x01);
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_displayStringRowColum(0,0,"temp is ");
    4248:	2a e9       	ldi	r18, 0x9A	; 154
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	60 e0       	ldi	r22, 0x00	; 0
    4250:	a9 01       	movw	r20, r18
    4252:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_displayStringRowColum>
	LCD_1ByteToString(temp);
    4256:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4258:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	aa ef       	ldi	r26, 0xFA	; 250
    4262:	b4 e4       	ldi	r27, 0x44	; 68
    4264:	8b 87       	std	Y+11, r24	; 0x0b
    4266:	9c 87       	std	Y+12, r25	; 0x0c
    4268:	ad 87       	std	Y+13, r26	; 0x0d
    426a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    426c:	6b 85       	ldd	r22, Y+11	; 0x0b
    426e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4270:	8d 85       	ldd	r24, Y+13	; 0x0d
    4272:	9e 85       	ldd	r25, Y+14	; 0x0e
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	4a ef       	ldi	r20, 0xFA	; 250
    427a:	54 e4       	ldi	r21, 0x44	; 68
    427c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	8f 83       	std	Y+7, r24	; 0x07
    4286:	98 87       	std	Y+8, r25	; 0x08
    4288:	a9 87       	std	Y+9, r26	; 0x09
    428a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    428c:	6f 81       	ldd	r22, Y+7	; 0x07
    428e:	78 85       	ldd	r23, Y+8	; 0x08
    4290:	89 85       	ldd	r24, Y+9	; 0x09
    4292:	9a 85       	ldd	r25, Y+10	; 0x0a
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e8       	ldi	r20, 0x80	; 128
    429a:	5f e3       	ldi	r21, 0x3F	; 63
    429c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42a0:	88 23       	and	r24, r24
    42a2:	2c f4       	brge	.+10     	; 0x42ae <check_temp+0x17c>
		__ticks = 1;
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	3f c0       	rjmp	.+126    	; 0x432c <check_temp+0x1fa>
	else if (__tmp > 65535)
    42ae:	6f 81       	ldd	r22, Y+7	; 0x07
    42b0:	78 85       	ldd	r23, Y+8	; 0x08
    42b2:	89 85       	ldd	r24, Y+9	; 0x09
    42b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	3f ef       	ldi	r19, 0xFF	; 255
    42ba:	4f e7       	ldi	r20, 0x7F	; 127
    42bc:	57 e4       	ldi	r21, 0x47	; 71
    42be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42c2:	18 16       	cp	r1, r24
    42c4:	4c f5       	brge	.+82     	; 0x4318 <check_temp+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    42cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e2       	ldi	r20, 0x20	; 32
    42d4:	51 e4       	ldi	r21, 0x41	; 65
    42d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	bc 01       	movw	r22, r24
    42e0:	cd 01       	movw	r24, r26
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
    42ee:	0f c0       	rjmp	.+30     	; 0x430e <check_temp+0x1dc>
    42f0:	88 ec       	ldi	r24, 0xC8	; 200
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	9c 83       	std	Y+4, r25	; 0x04
    42f6:	8b 83       	std	Y+3, r24	; 0x03
    42f8:	8b 81       	ldd	r24, Y+3	; 0x03
    42fa:	9c 81       	ldd	r25, Y+4	; 0x04
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	f1 f7       	brne	.-4      	; 0x42fc <check_temp+0x1ca>
    4300:	9c 83       	std	Y+4, r25	; 0x04
    4302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4304:	8d 81       	ldd	r24, Y+5	; 0x05
    4306:	9e 81       	ldd	r25, Y+6	; 0x06
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	9e 83       	std	Y+6, r25	; 0x06
    430c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    430e:	8d 81       	ldd	r24, Y+5	; 0x05
    4310:	9e 81       	ldd	r25, Y+6	; 0x06
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	69 f7       	brne	.-38     	; 0x42f0 <check_temp+0x1be>
    4316:	14 c0       	rjmp	.+40     	; 0x4340 <check_temp+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4318:	6f 81       	ldd	r22, Y+7	; 0x07
    431a:	78 85       	ldd	r23, Y+8	; 0x08
    431c:	89 85       	ldd	r24, Y+9	; 0x09
    431e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9e 83       	std	Y+6, r25	; 0x06
    432a:	8d 83       	std	Y+5, r24	; 0x05
    432c:	8d 81       	ldd	r24, Y+5	; 0x05
    432e:	9e 81       	ldd	r25, Y+6	; 0x06
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	9a 81       	ldd	r25, Y+2	; 0x02
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <check_temp+0x206>
    433c:	9a 83       	std	Y+2, r25	; 0x02
    433e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	TurnON_Heater_Fan(temp);
    4340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4342:	0e 94 ac 21 	call	0x4358	; 0x4358 <TurnON_Heater_Fan>
}
    4346:	6d 96       	adiw	r28, 0x1d	; 29
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	cf 91       	pop	r28
    4354:	df 91       	pop	r29
    4356:	08 95       	ret

00004358 <TurnON_Heater_Fan>:

static void TurnON_Heater_Fan(u8 copy_u8dutycycle){
    4358:	df 93       	push	r29
    435a:	cf 93       	push	r28
    435c:	0f 92       	push	r0
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	89 83       	std	Y+1, r24	; 0x01

	while(KeyPad_getPressedKey() != '=');
    4364:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <KeyPad_getPressedKey>
    4368:	8d 33       	cpi	r24, 0x3D	; 61
    436a:	e1 f7       	brne	.-8      	; 0x4364 <TurnON_Heater_Fan+0xc>
	MOTOR_voidGeneratePWM(copy_u8dutycycle);
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	0e 94 8d 11 	call	0x231a	; 0x231a <MOTOR_voidGeneratePWM>
	MOTOR_voidRotateClkWise(1,0);
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	60 e0       	ldi	r22, 0x00	; 0
    4376:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <MOTOR_voidRotateClkWise>
	LED_voidOffLed(DIO_PORTD,DIO_PIN1);
    437a:	83 e0       	ldi	r24, 0x03	; 3
    437c:	61 e0       	ldi	r22, 0x01	; 1
    437e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN3);
    4382:	83 e0       	ldi	r24, 0x03	; 3
    4384:	63 e0       	ldi	r22, 0x03	; 3
    4386:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOnLed(DIO_PORTD,DIO_PIN0);
    438a:	83 e0       	ldi	r24, 0x03	; 3
    438c:	60 e0       	ldi	r22, 0x00	; 0
    438e:	0e 94 c3 11 	call	0x2386	; 0x2386 <LED_voidOnLed>
	LCD_voidSendCommand(0x01);
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_displayStringRowColum(0,0,"The Reset Time");
    4398:	23 ea       	ldi	r18, 0xA3	; 163
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	60 e0       	ldi	r22, 0x00	; 0
    43a0:	a9 01       	movw	r20, r18
    43a2:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_displayStringRowColum>
	Timer0_voidInit();
    43a6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer0_voidInit>
	Time_Update();
    43aa:	0e 94 38 25 	call	0x4a70	; 0x4a70 <Time_Update>
}
    43ae:	0f 90       	pop	r0
    43b0:	cf 91       	pop	r28
    43b2:	df 91       	pop	r29
    43b4:	08 95       	ret

000043b6 <Check_door>:



static void Check_door(){
    43b6:	df 93       	push	r29
    43b8:	cf 93       	push	r28
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
    43be:	2e 97       	sbiw	r28, 0x0e	; 14
    43c0:	0f b6       	in	r0, 0x3f	; 63
    43c2:	f8 94       	cli
    43c4:	de bf       	out	0x3e, r29	; 62
    43c6:	0f be       	out	0x3f, r0	; 63
    43c8:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(0x01);
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
    43d0:	07 c0       	rjmp	.+14     	; 0x43e0 <Check_door+0x2a>
	while( POT_U16Read(0) < 5000){
		LCD_displayStringRowColum(0,0,"Pls Close Door");
    43d2:	22 eb       	ldi	r18, 0xB2	; 178
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	a9 01       	movw	r20, r18
    43dc:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_displayStringRowColum>



static void Check_door(){
	LCD_voidSendCommand(0x01);
	while( POT_U16Read(0) < 5000){
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	0e 94 41 10 	call	0x2082	; 0x2082 <POT_U16Read>
    43e6:	23 e1       	ldi	r18, 0x13	; 19
    43e8:	88 38       	cpi	r24, 0x88	; 136
    43ea:	92 07       	cpc	r25, r18
    43ec:	90 f3       	brcs	.-28     	; 0x43d2 <Check_door+0x1c>
		LCD_displayStringRowColum(0,0,"Pls Close Door");
	}
	LCD_voidSendCommand(0x01);
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_displayStringRowColum(0,0,"Door is Closed");
    43f4:	21 ec       	ldi	r18, 0xC1	; 193
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	a9 01       	movw	r20, r18
    43fe:	0e 94 cc 1b 	call	0x3798	; 0x3798 <LCD_displayStringRowColum>
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	aa ef       	ldi	r26, 0xFA	; 250
    4408:	b4 e4       	ldi	r27, 0x44	; 68
    440a:	8b 87       	std	Y+11, r24	; 0x0b
    440c:	9c 87       	std	Y+12, r25	; 0x0c
    440e:	ad 87       	std	Y+13, r26	; 0x0d
    4410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4412:	6b 85       	ldd	r22, Y+11	; 0x0b
    4414:	7c 85       	ldd	r23, Y+12	; 0x0c
    4416:	8d 85       	ldd	r24, Y+13	; 0x0d
    4418:	9e 85       	ldd	r25, Y+14	; 0x0e
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	4a ef       	ldi	r20, 0xFA	; 250
    4420:	54 e4       	ldi	r21, 0x44	; 68
    4422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	8f 83       	std	Y+7, r24	; 0x07
    442c:	98 87       	std	Y+8, r25	; 0x08
    442e:	a9 87       	std	Y+9, r26	; 0x09
    4430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4432:	6f 81       	ldd	r22, Y+7	; 0x07
    4434:	78 85       	ldd	r23, Y+8	; 0x08
    4436:	89 85       	ldd	r24, Y+9	; 0x09
    4438:	9a 85       	ldd	r25, Y+10	; 0x0a
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	40 e8       	ldi	r20, 0x80	; 128
    4440:	5f e3       	ldi	r21, 0x3F	; 63
    4442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4446:	88 23       	and	r24, r24
    4448:	2c f4       	brge	.+10     	; 0x4454 <Check_door+0x9e>
		__ticks = 1;
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	9e 83       	std	Y+6, r25	; 0x06
    4450:	8d 83       	std	Y+5, r24	; 0x05
    4452:	3f c0       	rjmp	.+126    	; 0x44d2 <Check_door+0x11c>
	else if (__tmp > 65535)
    4454:	6f 81       	ldd	r22, Y+7	; 0x07
    4456:	78 85       	ldd	r23, Y+8	; 0x08
    4458:	89 85       	ldd	r24, Y+9	; 0x09
    445a:	9a 85       	ldd	r25, Y+10	; 0x0a
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	3f ef       	ldi	r19, 0xFF	; 255
    4460:	4f e7       	ldi	r20, 0x7F	; 127
    4462:	57 e4       	ldi	r21, 0x47	; 71
    4464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4468:	18 16       	cp	r1, r24
    446a:	4c f5       	brge	.+82     	; 0x44be <Check_door+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    446c:	6b 85       	ldd	r22, Y+11	; 0x0b
    446e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4470:	8d 85       	ldd	r24, Y+13	; 0x0d
    4472:	9e 85       	ldd	r25, Y+14	; 0x0e
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	40 e2       	ldi	r20, 0x20	; 32
    447a:	51 e4       	ldi	r21, 0x41	; 65
    447c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	bc 01       	movw	r22, r24
    4486:	cd 01       	movw	r24, r26
    4488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	9e 83       	std	Y+6, r25	; 0x06
    4492:	8d 83       	std	Y+5, r24	; 0x05
    4494:	0f c0       	rjmp	.+30     	; 0x44b4 <Check_door+0xfe>
    4496:	88 ec       	ldi	r24, 0xC8	; 200
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	9c 83       	std	Y+4, r25	; 0x04
    449c:	8b 83       	std	Y+3, r24	; 0x03
    449e:	8b 81       	ldd	r24, Y+3	; 0x03
    44a0:	9c 81       	ldd	r25, Y+4	; 0x04
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <Check_door+0xec>
    44a6:	9c 83       	std	Y+4, r25	; 0x04
    44a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44aa:	8d 81       	ldd	r24, Y+5	; 0x05
    44ac:	9e 81       	ldd	r25, Y+6	; 0x06
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	9e 83       	std	Y+6, r25	; 0x06
    44b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b4:	8d 81       	ldd	r24, Y+5	; 0x05
    44b6:	9e 81       	ldd	r25, Y+6	; 0x06
    44b8:	00 97       	sbiw	r24, 0x00	; 0
    44ba:	69 f7       	brne	.-38     	; 0x4496 <Check_door+0xe0>
    44bc:	14 c0       	rjmp	.+40     	; 0x44e6 <Check_door+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44be:	6f 81       	ldd	r22, Y+7	; 0x07
    44c0:	78 85       	ldd	r23, Y+8	; 0x08
    44c2:	89 85       	ldd	r24, Y+9	; 0x09
    44c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	9e 83       	std	Y+6, r25	; 0x06
    44d0:	8d 83       	std	Y+5, r24	; 0x05
    44d2:	8d 81       	ldd	r24, Y+5	; 0x05
    44d4:	9e 81       	ldd	r25, Y+6	; 0x06
    44d6:	9a 83       	std	Y+2, r25	; 0x02
    44d8:	89 83       	std	Y+1, r24	; 0x01
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	9a 81       	ldd	r25, Y+2	; 0x02
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	f1 f7       	brne	.-4      	; 0x44de <Check_door+0x128>
    44e2:	9a 83       	std	Y+2, r25	; 0x02
    44e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	LCD_voidSendCommand(0x01);
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	GETTIME();
    44ec:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <GETTIME>


}
    44f0:	2e 96       	adiw	r28, 0x0e	; 14
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	f8 94       	cli
    44f6:	de bf       	out	0x3e, r29	; 62
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	cd bf       	out	0x3d, r28	; 61
    44fc:	cf 91       	pop	r28
    44fe:	df 91       	pop	r29
    4500:	08 95       	ret

00004502 <System_Stop>:
static void System_Stop(void){
    4502:	df 93       	push	r29
    4504:	cf 93       	push	r28
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	2e 97       	sbiw	r28, 0x0e	; 14
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
	MOTOR_voidStop();
    4516:	0e 94 9c 11 	call	0x2338	; 0x2338 <MOTOR_voidStop>
	MOTOR_voidGeneratePWM(0);
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	0e 94 8d 11 	call	0x231a	; 0x231a <MOTOR_voidGeneratePWM>
	LCD_voidSendCommand(0x01);
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidgotorowcolum(0,2);
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	62 e0       	ldi	r22, 0x02	; 2
    452a:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	LCD_voidSendString("happy meal");
    452e:	80 ed       	ldi	r24, 0xD0	; 208
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>
	microwave_time.seconds_count=0;
    4536:	10 92 06 02 	sts	0x0206, r1
	microwave_time.minutes_count=0;
    453a:	10 92 07 02 	sts	0x0207, r1
	LED_voidOffLed(DIO_PORTD,DIO_PIN0);  /*LED GREEN OFF*/
    453e:	83 e0       	ldi	r24, 0x03	; 3
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN1);  /*LED YALLOW OFF*/
    4546:	83 e0       	ldi	r24, 0x03	; 3
    4548:	61 e0       	ldi	r22, 0x01	; 1
    454a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOnLed(DIO_PORTD,DIO_PIN3);   /*LED RED ON*/
    454e:	83 e0       	ldi	r24, 0x03	; 3
    4550:	63 e0       	ldi	r22, 0x03	; 3
    4552:	0e 94 c3 11 	call	0x2386	; 0x2386 <LED_voidOnLed>
	Buzzer_voidOn();
    4556:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <Buzzer_voidOn>
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e8       	ldi	r25, 0x80	; 128
    455e:	ab e3       	ldi	r26, 0x3B	; 59
    4560:	b5 e4       	ldi	r27, 0x45	; 69
    4562:	8b 87       	std	Y+11, r24	; 0x0b
    4564:	9c 87       	std	Y+12, r25	; 0x0c
    4566:	ad 87       	std	Y+13, r26	; 0x0d
    4568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456a:	6b 85       	ldd	r22, Y+11	; 0x0b
    456c:	7c 85       	ldd	r23, Y+12	; 0x0c
    456e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4570:	9e 85       	ldd	r25, Y+14	; 0x0e
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	4a ef       	ldi	r20, 0xFA	; 250
    4578:	54 e4       	ldi	r21, 0x44	; 68
    457a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	8f 83       	std	Y+7, r24	; 0x07
    4584:	98 87       	std	Y+8, r25	; 0x08
    4586:	a9 87       	std	Y+9, r26	; 0x09
    4588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    458a:	6f 81       	ldd	r22, Y+7	; 0x07
    458c:	78 85       	ldd	r23, Y+8	; 0x08
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e8       	ldi	r20, 0x80	; 128
    4598:	5f e3       	ldi	r21, 0x3F	; 63
    459a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    459e:	88 23       	and	r24, r24
    45a0:	2c f4       	brge	.+10     	; 0x45ac <System_Stop+0xaa>
		__ticks = 1;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9e 83       	std	Y+6, r25	; 0x06
    45a8:	8d 83       	std	Y+5, r24	; 0x05
    45aa:	3f c0       	rjmp	.+126    	; 0x462a <System_Stop+0x128>
	else if (__tmp > 65535)
    45ac:	6f 81       	ldd	r22, Y+7	; 0x07
    45ae:	78 85       	ldd	r23, Y+8	; 0x08
    45b0:	89 85       	ldd	r24, Y+9	; 0x09
    45b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	3f ef       	ldi	r19, 0xFF	; 255
    45b8:	4f e7       	ldi	r20, 0x7F	; 127
    45ba:	57 e4       	ldi	r21, 0x47	; 71
    45bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45c0:	18 16       	cp	r1, r24
    45c2:	4c f5       	brge	.+82     	; 0x4616 <System_Stop+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e2       	ldi	r20, 0x20	; 32
    45d2:	51 e4       	ldi	r21, 0x41	; 65
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	bc 01       	movw	r22, r24
    45de:	cd 01       	movw	r24, r26
    45e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	9e 83       	std	Y+6, r25	; 0x06
    45ea:	8d 83       	std	Y+5, r24	; 0x05
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <System_Stop+0x10a>
    45ee:	88 ec       	ldi	r24, 0xC8	; 200
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	9c 83       	std	Y+4, r25	; 0x04
    45f4:	8b 83       	std	Y+3, r24	; 0x03
    45f6:	8b 81       	ldd	r24, Y+3	; 0x03
    45f8:	9c 81       	ldd	r25, Y+4	; 0x04
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <System_Stop+0xf8>
    45fe:	9c 83       	std	Y+4, r25	; 0x04
    4600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	9e 83       	std	Y+6, r25	; 0x06
    460a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460c:	8d 81       	ldd	r24, Y+5	; 0x05
    460e:	9e 81       	ldd	r25, Y+6	; 0x06
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	69 f7       	brne	.-38     	; 0x45ee <System_Stop+0xec>
    4614:	14 c0       	rjmp	.+40     	; 0x463e <System_Stop+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4616:	6f 81       	ldd	r22, Y+7	; 0x07
    4618:	78 85       	ldd	r23, Y+8	; 0x08
    461a:	89 85       	ldd	r24, Y+9	; 0x09
    461c:	9a 85       	ldd	r25, Y+10	; 0x0a
    461e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	9e 83       	std	Y+6, r25	; 0x06
    4628:	8d 83       	std	Y+5, r24	; 0x05
    462a:	8d 81       	ldd	r24, Y+5	; 0x05
    462c:	9e 81       	ldd	r25, Y+6	; 0x06
    462e:	9a 83       	std	Y+2, r25	; 0x02
    4630:	89 83       	std	Y+1, r24	; 0x01
    4632:	89 81       	ldd	r24, Y+1	; 0x01
    4634:	9a 81       	ldd	r25, Y+2	; 0x02
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	f1 f7       	brne	.-4      	; 0x4636 <System_Stop+0x134>
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	Buzzer_voidOff();
    463e:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <Buzzer_voidOff>
	MicroWave_voidStart();
    4642:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <MicroWave_voidStart>

}
    4646:	2e 96       	adiw	r28, 0x0e	; 14
    4648:	0f b6       	in	r0, 0x3f	; 63
    464a:	f8 94       	cli
    464c:	de bf       	out	0x3e, r29	; 62
    464e:	0f be       	out	0x3f, r0	; 63
    4650:	cd bf       	out	0x3d, r28	; 61
    4652:	cf 91       	pop	r28
    4654:	df 91       	pop	r29
    4656:	08 95       	ret

00004658 <System_Cancel>:

static void System_Cancel(void)
{
    4658:	df 93       	push	r29
    465a:	cf 93       	push	r28
    465c:	cd b7       	in	r28, 0x3d	; 61
    465e:	de b7       	in	r29, 0x3e	; 62
    4660:	e8 97       	sbiw	r28, 0x38	; 56
    4662:	0f b6       	in	r0, 0x3f	; 63
    4664:	f8 94       	cli
    4666:	de bf       	out	0x3e, r29	; 62
    4668:	0f be       	out	0x3f, r0	; 63
    466a:	cd bf       	out	0x3d, r28	; 61
	MOTOR_voidGeneratePWM(0);
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	0e 94 8d 11 	call	0x231a	; 0x231a <MOTOR_voidGeneratePWM>
	LCD_voidSendCommand(0x01);
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidgotorowcolum(0,2);
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	62 e0       	ldi	r22, 0x02	; 2
    467c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	LCD_voidSendString("System Reset");
    4680:	8b ed       	ldi	r24, 0xDB	; 219
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	aa e7       	ldi	r26, 0x7A	; 122
    468e:	b4 e4       	ldi	r27, 0x44	; 68
    4690:	8d ab       	std	Y+53, r24	; 0x35
    4692:	9e ab       	std	Y+54, r25	; 0x36
    4694:	af ab       	std	Y+55, r26	; 0x37
    4696:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4698:	6d a9       	ldd	r22, Y+53	; 0x35
    469a:	7e a9       	ldd	r23, Y+54	; 0x36
    469c:	8f a9       	ldd	r24, Y+55	; 0x37
    469e:	98 ad       	ldd	r25, Y+56	; 0x38
    46a0:	20 e0       	ldi	r18, 0x00	; 0
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	4a ef       	ldi	r20, 0xFA	; 250
    46a6:	54 e4       	ldi	r21, 0x44	; 68
    46a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	89 ab       	std	Y+49, r24	; 0x31
    46b2:	9a ab       	std	Y+50, r25	; 0x32
    46b4:	ab ab       	std	Y+51, r26	; 0x33
    46b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46b8:	69 a9       	ldd	r22, Y+49	; 0x31
    46ba:	7a a9       	ldd	r23, Y+50	; 0x32
    46bc:	8b a9       	ldd	r24, Y+51	; 0x33
    46be:	9c a9       	ldd	r25, Y+52	; 0x34
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	40 e8       	ldi	r20, 0x80	; 128
    46c6:	5f e3       	ldi	r21, 0x3F	; 63
    46c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46cc:	88 23       	and	r24, r24
    46ce:	2c f4       	brge	.+10     	; 0x46da <System_Cancel+0x82>
		__ticks = 1;
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	98 ab       	std	Y+48, r25	; 0x30
    46d6:	8f a7       	std	Y+47, r24	; 0x2f
    46d8:	3f c0       	rjmp	.+126    	; 0x4758 <System_Cancel+0x100>
	else if (__tmp > 65535)
    46da:	69 a9       	ldd	r22, Y+49	; 0x31
    46dc:	7a a9       	ldd	r23, Y+50	; 0x32
    46de:	8b a9       	ldd	r24, Y+51	; 0x33
    46e0:	9c a9       	ldd	r25, Y+52	; 0x34
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	3f ef       	ldi	r19, 0xFF	; 255
    46e6:	4f e7       	ldi	r20, 0x7F	; 127
    46e8:	57 e4       	ldi	r21, 0x47	; 71
    46ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ee:	18 16       	cp	r1, r24
    46f0:	4c f5       	brge	.+82     	; 0x4744 <System_Cancel+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f2:	6d a9       	ldd	r22, Y+53	; 0x35
    46f4:	7e a9       	ldd	r23, Y+54	; 0x36
    46f6:	8f a9       	ldd	r24, Y+55	; 0x37
    46f8:	98 ad       	ldd	r25, Y+56	; 0x38
    46fa:	20 e0       	ldi	r18, 0x00	; 0
    46fc:	30 e0       	ldi	r19, 0x00	; 0
    46fe:	40 e2       	ldi	r20, 0x20	; 32
    4700:	51 e4       	ldi	r21, 0x41	; 65
    4702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	bc 01       	movw	r22, r24
    470c:	cd 01       	movw	r24, r26
    470e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4712:	dc 01       	movw	r26, r24
    4714:	cb 01       	movw	r24, r22
    4716:	98 ab       	std	Y+48, r25	; 0x30
    4718:	8f a7       	std	Y+47, r24	; 0x2f
    471a:	0f c0       	rjmp	.+30     	; 0x473a <System_Cancel+0xe2>
    471c:	88 ec       	ldi	r24, 0xC8	; 200
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	9e a7       	std	Y+46, r25	; 0x2e
    4722:	8d a7       	std	Y+45, r24	; 0x2d
    4724:	8d a5       	ldd	r24, Y+45	; 0x2d
    4726:	9e a5       	ldd	r25, Y+46	; 0x2e
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <System_Cancel+0xd0>
    472c:	9e a7       	std	Y+46, r25	; 0x2e
    472e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4730:	8f a5       	ldd	r24, Y+47	; 0x2f
    4732:	98 a9       	ldd	r25, Y+48	; 0x30
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	98 ab       	std	Y+48, r25	; 0x30
    4738:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473a:	8f a5       	ldd	r24, Y+47	; 0x2f
    473c:	98 a9       	ldd	r25, Y+48	; 0x30
    473e:	00 97       	sbiw	r24, 0x00	; 0
    4740:	69 f7       	brne	.-38     	; 0x471c <System_Cancel+0xc4>
    4742:	14 c0       	rjmp	.+40     	; 0x476c <System_Cancel+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4744:	69 a9       	ldd	r22, Y+49	; 0x31
    4746:	7a a9       	ldd	r23, Y+50	; 0x32
    4748:	8b a9       	ldd	r24, Y+51	; 0x33
    474a:	9c a9       	ldd	r25, Y+52	; 0x34
    474c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4750:	dc 01       	movw	r26, r24
    4752:	cb 01       	movw	r24, r22
    4754:	98 ab       	std	Y+48, r25	; 0x30
    4756:	8f a7       	std	Y+47, r24	; 0x2f
    4758:	8f a5       	ldd	r24, Y+47	; 0x2f
    475a:	98 a9       	ldd	r25, Y+48	; 0x30
    475c:	9c a7       	std	Y+44, r25	; 0x2c
    475e:	8b a7       	std	Y+43, r24	; 0x2b
    4760:	8b a5       	ldd	r24, Y+43	; 0x2b
    4762:	9c a5       	ldd	r25, Y+44	; 0x2c
    4764:	01 97       	sbiw	r24, 0x01	; 1
    4766:	f1 f7       	brne	.-4      	; 0x4764 <System_Cancel+0x10c>
    4768:	9c a7       	std	Y+44, r25	; 0x2c
    476a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	MOTOR_voidStop();
    476c:	0e 94 9c 11 	call	0x2338	; 0x2338 <MOTOR_voidStop>
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	a0 e2       	ldi	r26, 0x20	; 32
    4776:	b1 e4       	ldi	r27, 0x41	; 65
    4778:	8f a3       	std	Y+39, r24	; 0x27
    477a:	98 a7       	std	Y+40, r25	; 0x28
    477c:	a9 a7       	std	Y+41, r26	; 0x29
    477e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4780:	6f a1       	ldd	r22, Y+39	; 0x27
    4782:	78 a5       	ldd	r23, Y+40	; 0x28
    4784:	89 a5       	ldd	r24, Y+41	; 0x29
    4786:	9a a5       	ldd	r25, Y+42	; 0x2a
    4788:	20 e0       	ldi	r18, 0x00	; 0
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	4a ef       	ldi	r20, 0xFA	; 250
    478e:	54 e4       	ldi	r21, 0x44	; 68
    4790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	8b a3       	std	Y+35, r24	; 0x23
    479a:	9c a3       	std	Y+36, r25	; 0x24
    479c:	ad a3       	std	Y+37, r26	; 0x25
    479e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47a0:	6b a1       	ldd	r22, Y+35	; 0x23
    47a2:	7c a1       	ldd	r23, Y+36	; 0x24
    47a4:	8d a1       	ldd	r24, Y+37	; 0x25
    47a6:	9e a1       	ldd	r25, Y+38	; 0x26
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	40 e8       	ldi	r20, 0x80	; 128
    47ae:	5f e3       	ldi	r21, 0x3F	; 63
    47b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47b4:	88 23       	and	r24, r24
    47b6:	2c f4       	brge	.+10     	; 0x47c2 <System_Cancel+0x16a>
		__ticks = 1;
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	9a a3       	std	Y+34, r25	; 0x22
    47be:	89 a3       	std	Y+33, r24	; 0x21
    47c0:	3f c0       	rjmp	.+126    	; 0x4840 <System_Cancel+0x1e8>
	else if (__tmp > 65535)
    47c2:	6b a1       	ldd	r22, Y+35	; 0x23
    47c4:	7c a1       	ldd	r23, Y+36	; 0x24
    47c6:	8d a1       	ldd	r24, Y+37	; 0x25
    47c8:	9e a1       	ldd	r25, Y+38	; 0x26
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	3f ef       	ldi	r19, 0xFF	; 255
    47ce:	4f e7       	ldi	r20, 0x7F	; 127
    47d0:	57 e4       	ldi	r21, 0x47	; 71
    47d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47d6:	18 16       	cp	r1, r24
    47d8:	4c f5       	brge	.+82     	; 0x482c <System_Cancel+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47da:	6f a1       	ldd	r22, Y+39	; 0x27
    47dc:	78 a5       	ldd	r23, Y+40	; 0x28
    47de:	89 a5       	ldd	r24, Y+41	; 0x29
    47e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e2       	ldi	r20, 0x20	; 32
    47e8:	51 e4       	ldi	r21, 0x41	; 65
    47ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ee:	dc 01       	movw	r26, r24
    47f0:	cb 01       	movw	r24, r22
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	9a a3       	std	Y+34, r25	; 0x22
    4800:	89 a3       	std	Y+33, r24	; 0x21
    4802:	0f c0       	rjmp	.+30     	; 0x4822 <System_Cancel+0x1ca>
    4804:	88 ec       	ldi	r24, 0xC8	; 200
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	98 a3       	std	Y+32, r25	; 0x20
    480a:	8f 8f       	std	Y+31, r24	; 0x1f
    480c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    480e:	98 a1       	ldd	r25, Y+32	; 0x20
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <System_Cancel+0x1b8>
    4814:	98 a3       	std	Y+32, r25	; 0x20
    4816:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4818:	89 a1       	ldd	r24, Y+33	; 0x21
    481a:	9a a1       	ldd	r25, Y+34	; 0x22
    481c:	01 97       	sbiw	r24, 0x01	; 1
    481e:	9a a3       	std	Y+34, r25	; 0x22
    4820:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4822:	89 a1       	ldd	r24, Y+33	; 0x21
    4824:	9a a1       	ldd	r25, Y+34	; 0x22
    4826:	00 97       	sbiw	r24, 0x00	; 0
    4828:	69 f7       	brne	.-38     	; 0x4804 <System_Cancel+0x1ac>
    482a:	14 c0       	rjmp	.+40     	; 0x4854 <System_Cancel+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482c:	6b a1       	ldd	r22, Y+35	; 0x23
    482e:	7c a1       	ldd	r23, Y+36	; 0x24
    4830:	8d a1       	ldd	r24, Y+37	; 0x25
    4832:	9e a1       	ldd	r25, Y+38	; 0x26
    4834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	9a a3       	std	Y+34, r25	; 0x22
    483e:	89 a3       	std	Y+33, r24	; 0x21
    4840:	89 a1       	ldd	r24, Y+33	; 0x21
    4842:	9a a1       	ldd	r25, Y+34	; 0x22
    4844:	9e 8f       	std	Y+30, r25	; 0x1e
    4846:	8d 8f       	std	Y+29, r24	; 0x1d
    4848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    484a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	f1 f7       	brne	.-4      	; 0x484c <System_Cancel+0x1f4>
    4850:	9e 8f       	std	Y+30, r25	; 0x1e
    4852:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LED_voidOffLed(DIO_PORTD,DIO_PIN0);  /*LED GREEN OFF*/
    4854:	83 e0       	ldi	r24, 0x03	; 3
    4856:	60 e0       	ldi	r22, 0x00	; 0
    4858:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN1);  /*LED YALLOW OFF*/
    485c:	83 e0       	ldi	r24, 0x03	; 3
    485e:	61 e0       	ldi	r22, 0x01	; 1
    4860:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
	LED_voidOffLed(DIO_PORTD,DIO_PIN3);   /*LED RED ON*/
    4864:	83 e0       	ldi	r24, 0x03	; 3
    4866:	63 e0       	ldi	r22, 0x03	; 3
    4868:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LED_voidOffLed>
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	a0 e2       	ldi	r26, 0x20	; 32
    4872:	b1 e4       	ldi	r27, 0x41	; 65
    4874:	89 8f       	std	Y+25, r24	; 0x19
    4876:	9a 8f       	std	Y+26, r25	; 0x1a
    4878:	ab 8f       	std	Y+27, r26	; 0x1b
    487a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    487c:	69 8d       	ldd	r22, Y+25	; 0x19
    487e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	4a ef       	ldi	r20, 0xFA	; 250
    488a:	54 e4       	ldi	r21, 0x44	; 68
    488c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	8d 8b       	std	Y+21, r24	; 0x15
    4896:	9e 8b       	std	Y+22, r25	; 0x16
    4898:	af 8b       	std	Y+23, r26	; 0x17
    489a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    489c:	6d 89       	ldd	r22, Y+21	; 0x15
    489e:	7e 89       	ldd	r23, Y+22	; 0x16
    48a0:	8f 89       	ldd	r24, Y+23	; 0x17
    48a2:	98 8d       	ldd	r25, Y+24	; 0x18
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	40 e8       	ldi	r20, 0x80	; 128
    48aa:	5f e3       	ldi	r21, 0x3F	; 63
    48ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48b0:	88 23       	and	r24, r24
    48b2:	2c f4       	brge	.+10     	; 0x48be <System_Cancel+0x266>
		__ticks = 1;
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	9c 8b       	std	Y+20, r25	; 0x14
    48ba:	8b 8b       	std	Y+19, r24	; 0x13
    48bc:	3f c0       	rjmp	.+126    	; 0x493c <System_Cancel+0x2e4>
	else if (__tmp > 65535)
    48be:	6d 89       	ldd	r22, Y+21	; 0x15
    48c0:	7e 89       	ldd	r23, Y+22	; 0x16
    48c2:	8f 89       	ldd	r24, Y+23	; 0x17
    48c4:	98 8d       	ldd	r25, Y+24	; 0x18
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	3f ef       	ldi	r19, 0xFF	; 255
    48ca:	4f e7       	ldi	r20, 0x7F	; 127
    48cc:	57 e4       	ldi	r21, 0x47	; 71
    48ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48d2:	18 16       	cp	r1, r24
    48d4:	4c f5       	brge	.+82     	; 0x4928 <System_Cancel+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48d6:	69 8d       	ldd	r22, Y+25	; 0x19
    48d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e2       	ldi	r20, 0x20	; 32
    48e4:	51 e4       	ldi	r21, 0x41	; 65
    48e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	bc 01       	movw	r22, r24
    48f0:	cd 01       	movw	r24, r26
    48f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	9c 8b       	std	Y+20, r25	; 0x14
    48fc:	8b 8b       	std	Y+19, r24	; 0x13
    48fe:	0f c0       	rjmp	.+30     	; 0x491e <System_Cancel+0x2c6>
    4900:	88 ec       	ldi	r24, 0xC8	; 200
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	9a 8b       	std	Y+18, r25	; 0x12
    4906:	89 8b       	std	Y+17, r24	; 0x11
    4908:	89 89       	ldd	r24, Y+17	; 0x11
    490a:	9a 89       	ldd	r25, Y+18	; 0x12
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <System_Cancel+0x2b4>
    4910:	9a 8b       	std	Y+18, r25	; 0x12
    4912:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4914:	8b 89       	ldd	r24, Y+19	; 0x13
    4916:	9c 89       	ldd	r25, Y+20	; 0x14
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	9c 8b       	std	Y+20, r25	; 0x14
    491c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    491e:	8b 89       	ldd	r24, Y+19	; 0x13
    4920:	9c 89       	ldd	r25, Y+20	; 0x14
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	69 f7       	brne	.-38     	; 0x4900 <System_Cancel+0x2a8>
    4926:	14 c0       	rjmp	.+40     	; 0x4950 <System_Cancel+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4928:	6d 89       	ldd	r22, Y+21	; 0x15
    492a:	7e 89       	ldd	r23, Y+22	; 0x16
    492c:	8f 89       	ldd	r24, Y+23	; 0x17
    492e:	98 8d       	ldd	r25, Y+24	; 0x18
    4930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	9c 8b       	std	Y+20, r25	; 0x14
    493a:	8b 8b       	std	Y+19, r24	; 0x13
    493c:	8b 89       	ldd	r24, Y+19	; 0x13
    493e:	9c 89       	ldd	r25, Y+20	; 0x14
    4940:	98 8b       	std	Y+16, r25	; 0x10
    4942:	8f 87       	std	Y+15, r24	; 0x0f
    4944:	8f 85       	ldd	r24, Y+15	; 0x0f
    4946:	98 89       	ldd	r25, Y+16	; 0x10
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	f1 f7       	brne	.-4      	; 0x4948 <System_Cancel+0x2f0>
    494c:	98 8b       	std	Y+16, r25	; 0x10
    494e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	microwave_time.seconds_count=0;
    4950:	10 92 06 02 	sts	0x0206, r1
	microwave_time.minutes_count=0;
    4954:	10 92 07 02 	sts	0x0207, r1
	Buzzer_voidOn();
    4958:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <Buzzer_voidOn>
	LCD_voidSendCommand(0x01);
    495c:	81 e0       	ldi	r24, 0x01	; 1
    495e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_voidSendCommand>
	LCD_voidgotorowcolum(0,2);
    4962:	80 e0       	ldi	r24, 0x00	; 0
    4964:	62 e0       	ldi	r22, 0x02	; 2
    4966:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	LCD_voidSendString("BBEB BEEB");
    496a:	88 ee       	ldi	r24, 0xE8	; 232
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <LCD_voidSendString>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	aa e7       	ldi	r26, 0x7A	; 122
    4978:	b4 e4       	ldi	r27, 0x44	; 68
    497a:	8b 87       	std	Y+11, r24	; 0x0b
    497c:	9c 87       	std	Y+12, r25	; 0x0c
    497e:	ad 87       	std	Y+13, r26	; 0x0d
    4980:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4982:	6b 85       	ldd	r22, Y+11	; 0x0b
    4984:	7c 85       	ldd	r23, Y+12	; 0x0c
    4986:	8d 85       	ldd	r24, Y+13	; 0x0d
    4988:	9e 85       	ldd	r25, Y+14	; 0x0e
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	4a ef       	ldi	r20, 0xFA	; 250
    4990:	54 e4       	ldi	r21, 0x44	; 68
    4992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	8f 83       	std	Y+7, r24	; 0x07
    499c:	98 87       	std	Y+8, r25	; 0x08
    499e:	a9 87       	std	Y+9, r26	; 0x09
    49a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49a2:	6f 81       	ldd	r22, Y+7	; 0x07
    49a4:	78 85       	ldd	r23, Y+8	; 0x08
    49a6:	89 85       	ldd	r24, Y+9	; 0x09
    49a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e8       	ldi	r20, 0x80	; 128
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b6:	88 23       	and	r24, r24
    49b8:	2c f4       	brge	.+10     	; 0x49c4 <System_Cancel+0x36c>
		__ticks = 1;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	9e 83       	std	Y+6, r25	; 0x06
    49c0:	8d 83       	std	Y+5, r24	; 0x05
    49c2:	3f c0       	rjmp	.+126    	; 0x4a42 <System_Cancel+0x3ea>
	else if (__tmp > 65535)
    49c4:	6f 81       	ldd	r22, Y+7	; 0x07
    49c6:	78 85       	ldd	r23, Y+8	; 0x08
    49c8:	89 85       	ldd	r24, Y+9	; 0x09
    49ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	3f ef       	ldi	r19, 0xFF	; 255
    49d0:	4f e7       	ldi	r20, 0x7F	; 127
    49d2:	57 e4       	ldi	r21, 0x47	; 71
    49d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49d8:	18 16       	cp	r1, r24
    49da:	4c f5       	brge	.+82     	; 0x4a2e <System_Cancel+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    49de:	7c 85       	ldd	r23, Y+12	; 0x0c
    49e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e2       	ldi	r20, 0x20	; 32
    49ea:	51 e4       	ldi	r21, 0x41	; 65
    49ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	9e 83       	std	Y+6, r25	; 0x06
    4a02:	8d 83       	std	Y+5, r24	; 0x05
    4a04:	0f c0       	rjmp	.+30     	; 0x4a24 <System_Cancel+0x3cc>
    4a06:	88 ec       	ldi	r24, 0xC8	; 200
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	9c 83       	std	Y+4, r25	; 0x04
    4a0c:	8b 83       	std	Y+3, r24	; 0x03
    4a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a10:	9c 81       	ldd	r25, Y+4	; 0x04
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <System_Cancel+0x3ba>
    4a16:	9c 83       	std	Y+4, r25	; 0x04
    4a18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a1e:	01 97       	sbiw	r24, 0x01	; 1
    4a20:	9e 83       	std	Y+6, r25	; 0x06
    4a22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a24:	8d 81       	ldd	r24, Y+5	; 0x05
    4a26:	9e 81       	ldd	r25, Y+6	; 0x06
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	69 f7       	brne	.-38     	; 0x4a06 <System_Cancel+0x3ae>
    4a2c:	14 c0       	rjmp	.+40     	; 0x4a56 <System_Cancel+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a30:	78 85       	ldd	r23, Y+8	; 0x08
    4a32:	89 85       	ldd	r24, Y+9	; 0x09
    4a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	9e 83       	std	Y+6, r25	; 0x06
    4a40:	8d 83       	std	Y+5, r24	; 0x05
    4a42:	8d 81       	ldd	r24, Y+5	; 0x05
    4a44:	9e 81       	ldd	r25, Y+6	; 0x06
    4a46:	9a 83       	std	Y+2, r25	; 0x02
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <System_Cancel+0x3f6>
    4a52:	9a 83       	std	Y+2, r25	; 0x02
    4a54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Buzzer_voidOff();
    4a56:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <Buzzer_voidOff>
	MicroWave_voidStart();
    4a5a:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <MicroWave_voidStart>

}
    4a5e:	e8 96       	adiw	r28, 0x38	; 56
    4a60:	0f b6       	in	r0, 0x3f	; 63
    4a62:	f8 94       	cli
    4a64:	de bf       	out	0x3e, r29	; 62
    4a66:	0f be       	out	0x3f, r0	; 63
    4a68:	cd bf       	out	0x3d, r28	; 61
    4a6a:	cf 91       	pop	r28
    4a6c:	df 91       	pop	r29
    4a6e:	08 95       	ret

00004a70 <Time_Update>:

static void Time_Update(void){
    4a70:	df 93       	push	r29
    4a72:	cf 93       	push	r28
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
	if(microwave_time.seconds_count == 0 && microwave_time.minutes_count == 0){
    4a78:	80 91 06 02 	lds	r24, 0x0206
    4a7c:	88 23       	and	r24, r24
    4a7e:	31 f4       	brne	.+12     	; 0x4a8c <Time_Update+0x1c>
    4a80:	80 91 07 02 	lds	r24, 0x0207
    4a84:	88 23       	and	r24, r24
    4a86:	11 f4       	brne	.+4      	; 0x4a8c <Time_Update+0x1c>
		System_Stop();
    4a88:	0e 94 81 22 	call	0x4502	; 0x4502 <System_Stop>
	}
	if(microwave_time.minutes_count == 0 &&microwave_time.seconds_count > 0 ){
    4a8c:	80 91 07 02 	lds	r24, 0x0207
    4a90:	88 23       	and	r24, r24
    4a92:	49 f4       	brne	.+18     	; 0x4aa6 <Time_Update+0x36>
    4a94:	80 91 06 02 	lds	r24, 0x0206
    4a98:	88 23       	and	r24, r24
    4a9a:	29 f0       	breq	.+10     	; 0x4aa6 <Time_Update+0x36>
		microwave_time.seconds_count--;
    4a9c:	80 91 06 02 	lds	r24, 0x0206
    4aa0:	81 50       	subi	r24, 0x01	; 1
    4aa2:	80 93 06 02 	sts	0x0206, r24
	}
	if(microwave_time.minutes_count > 0){
    4aa6:	80 91 07 02 	lds	r24, 0x0207
    4aaa:	88 23       	and	r24, r24
    4aac:	a9 f0       	breq	.+42     	; 0x4ad8 <Time_Update+0x68>
		if(microwave_time.seconds_count>0){
    4aae:	80 91 06 02 	lds	r24, 0x0206
    4ab2:	88 23       	and	r24, r24
    4ab4:	29 f0       	breq	.+10     	; 0x4ac0 <Time_Update+0x50>
			microwave_time.seconds_count --;
    4ab6:	80 91 06 02 	lds	r24, 0x0206
    4aba:	81 50       	subi	r24, 0x01	; 1
    4abc:	80 93 06 02 	sts	0x0206, r24

		}
		if (microwave_time.seconds_count==0){
    4ac0:	80 91 06 02 	lds	r24, 0x0206
    4ac4:	88 23       	and	r24, r24
    4ac6:	41 f4       	brne	.+16     	; 0x4ad8 <Time_Update+0x68>
			microwave_time.seconds_count = 59;
    4ac8:	8b e3       	ldi	r24, 0x3B	; 59
    4aca:	80 93 06 02 	sts	0x0206, r24
			microwave_time.minutes_count--;
    4ace:	80 91 07 02 	lds	r24, 0x0207
    4ad2:	81 50       	subi	r24, 0x01	; 1
    4ad4:	80 93 07 02 	sts	0x0207, r24
		}
	}
	if(microwave_time.seconds_count < 10 ){
    4ad8:	80 91 06 02 	lds	r24, 0x0206
    4adc:	8a 30       	cpi	r24, 0x0A	; 10
    4ade:	58 f4       	brcc	.+22     	; 0x4af6 <Time_Update+0x86>
		LCD_voidgotorowcolum(1,4);
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	64 e0       	ldi	r22, 0x04	; 4
    4ae4:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
		LCD_1ByteToString(0);
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
		LCD_1ByteToString(microwave_time.seconds_count);
    4aee:	80 91 06 02 	lds	r24, 0x0206
    4af2:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
	}

	if( microwave_time.minutes_count < 10  ){
    4af6:	80 91 07 02 	lds	r24, 0x0207
    4afa:	8a 30       	cpi	r24, 0x0A	; 10
    4afc:	58 f4       	brcc	.+22     	; 0x4b14 <Time_Update+0xa4>
		LCD_voidgotorowcolum(1,1);
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	61 e0       	ldi	r22, 0x01	; 1
    4b02:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
		LCD_1ByteToString(0);
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
		LCD_1ByteToString(microwave_time.minutes_count);
    4b0c:	80 91 07 02 	lds	r24, 0x0207
    4b10:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>

	}
	LCD_voidgotorowcolum(1,3);
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	63 e0       	ldi	r22, 0x03	; 3
    4b18:	0e 94 a2 1b 	call	0x3744	; 0x3744 <LCD_voidgotorowcolum>
	if(microwave_time.minutes_count >= 10){
    4b1c:	80 91 07 02 	lds	r24, 0x0207
    4b20:	8a 30       	cpi	r24, 0x0A	; 10
    4b22:	20 f0       	brcs	.+8      	; 0x4b2c <Time_Update+0xbc>
		LCD_1ByteToString(microwave_time.minutes_count);
    4b24:	80 91 07 02 	lds	r24, 0x0207
    4b28:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
	}
	LCD_voidSendData(':');
    4b2c:	8a e3       	ldi	r24, 0x3A	; 58
    4b2e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_voidSendData>
	if(microwave_time.seconds_count>= 10){
    4b32:	80 91 06 02 	lds	r24, 0x0206
    4b36:	8a 30       	cpi	r24, 0x0A	; 10
    4b38:	20 f0       	brcs	.+8      	; 0x4b42 <Time_Update+0xd2>
		LCD_1ByteToString(microwave_time.seconds_count);
    4b3a:	80 91 06 02 	lds	r24, 0x0206
    4b3e:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <LCD_1ByteToString>
	}
}
    4b42:	cf 91       	pop	r28
    4b44:	df 91       	pop	r29
    4b46:	08 95       	ret

00004b48 <Prepare_Time>:
static void Prepare_Time(void){
    4b48:	0f 93       	push	r16
    4b4a:	1f 93       	push	r17
    4b4c:	df 93       	push	r29
    4b4e:	cf 93       	push	r28
    4b50:	00 d0       	rcall	.+0      	; 0x4b52 <Prepare_Time+0xa>
    4b52:	0f 92       	push	r0
    4b54:	cd b7       	in	r28, 0x3d	; 61
    4b56:	de b7       	in	r29, 0x3e	; 62
	u8 x = 1;
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 k = 0;  k < 2 ; k++){
    4b5c:	1a 82       	std	Y+2, r1	; 0x02
    4b5e:	19 c0       	rjmp	.+50     	; 0x4b92 <Prepare_Time+0x4a>
		microwave_time.minutes_count =microwave_time.minutes_count  + ( Time_value[k] * power(10,x));
    4b60:	00 91 07 02 	lds	r16, 0x0207
    4b64:	8a 81       	ldd	r24, Y+2	; 0x02
    4b66:	88 2f       	mov	r24, r24
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	ef 5f       	subi	r30, 0xFF	; 255
    4b6e:	fd 4f       	sbci	r31, 0xFD	; 253
    4b70:	10 81       	ld	r17, Z
    4b72:	8a e0       	ldi	r24, 0x0A	; 10
    4b74:	6b 81       	ldd	r22, Y+3	; 0x03
    4b76:	0e 94 f5 25 	call	0x4bea	; 0x4bea <power>
    4b7a:	18 9f       	mul	r17, r24
    4b7c:	80 2d       	mov	r24, r0
    4b7e:	11 24       	eor	r1, r1
    4b80:	80 0f       	add	r24, r16
    4b82:	80 93 07 02 	sts	0x0207, r24
		x--;
    4b86:	8b 81       	ldd	r24, Y+3	; 0x03
    4b88:	81 50       	subi	r24, 0x01	; 1
    4b8a:	8b 83       	std	Y+3, r24	; 0x03
		LCD_1ByteToString(microwave_time.seconds_count);
	}
}
static void Prepare_Time(void){
	u8 x = 1;
	for(u8 k = 0;  k < 2 ; k++){
    4b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b8e:	8f 5f       	subi	r24, 0xFF	; 255
    4b90:	8a 83       	std	Y+2, r24	; 0x02
    4b92:	8a 81       	ldd	r24, Y+2	; 0x02
    4b94:	82 30       	cpi	r24, 0x02	; 2
    4b96:	20 f3       	brcs	.-56     	; 0x4b60 <Prepare_Time+0x18>
		microwave_time.minutes_count =microwave_time.minutes_count  + ( Time_value[k] * power(10,x));
		x--;
	}
	x = 1;
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 k = 2;  k < 4 ; k++){
    4b9c:	82 e0       	ldi	r24, 0x02	; 2
    4b9e:	89 83       	std	Y+1, r24	; 0x01
    4ba0:	19 c0       	rjmp	.+50     	; 0x4bd4 <Prepare_Time+0x8c>
		microwave_time.seconds_count =  microwave_time.seconds_count + ( Time_value[k] * power(10,x));
    4ba2:	00 91 06 02 	lds	r16, 0x0206
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	88 2f       	mov	r24, r24
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	fc 01       	movw	r30, r24
    4bae:	ef 5f       	subi	r30, 0xFF	; 255
    4bb0:	fd 4f       	sbci	r31, 0xFD	; 253
    4bb2:	10 81       	ld	r17, Z
    4bb4:	8a e0       	ldi	r24, 0x0A	; 10
    4bb6:	6b 81       	ldd	r22, Y+3	; 0x03
    4bb8:	0e 94 f5 25 	call	0x4bea	; 0x4bea <power>
    4bbc:	18 9f       	mul	r17, r24
    4bbe:	80 2d       	mov	r24, r0
    4bc0:	11 24       	eor	r1, r1
    4bc2:	80 0f       	add	r24, r16
    4bc4:	80 93 06 02 	sts	0x0206, r24
		x--;
    4bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bca:	81 50       	subi	r24, 0x01	; 1
    4bcc:	8b 83       	std	Y+3, r24	; 0x03
	for(u8 k = 0;  k < 2 ; k++){
		microwave_time.minutes_count =microwave_time.minutes_count  + ( Time_value[k] * power(10,x));
		x--;
	}
	x = 1;
	for(u8 k = 2;  k < 4 ; k++){
    4bce:	89 81       	ldd	r24, Y+1	; 0x01
    4bd0:	8f 5f       	subi	r24, 0xFF	; 255
    4bd2:	89 83       	std	Y+1, r24	; 0x01
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	84 30       	cpi	r24, 0x04	; 4
    4bd8:	20 f3       	brcs	.-56     	; 0x4ba2 <Prepare_Time+0x5a>
		microwave_time.seconds_count =  microwave_time.seconds_count + ( Time_value[k] * power(10,x));
		x--;
	}

}
    4bda:	0f 90       	pop	r0
    4bdc:	0f 90       	pop	r0
    4bde:	0f 90       	pop	r0
    4be0:	cf 91       	pop	r28
    4be2:	df 91       	pop	r29
    4be4:	1f 91       	pop	r17
    4be6:	0f 91       	pop	r16
    4be8:	08 95       	ret

00004bea <power>:
static u8 power(u8 num , u8 power){
    4bea:	df 93       	push	r29
    4bec:	cf 93       	push	r28
    4bee:	00 d0       	rcall	.+0      	; 0x4bf0 <power+0x6>
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <power+0x8>
    4bf2:	00 d0       	rcall	.+0      	; 0x4bf4 <power+0xa>
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
    4bf8:	8c 83       	std	Y+4, r24	; 0x04
    4bfa:	6d 83       	std	Y+5, r22	; 0x05
	u8 result = 1;
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	8b 83       	std	Y+3, r24	; 0x03
	if(power == 1){
    4c00:	8d 81       	ldd	r24, Y+5	; 0x05
    4c02:	81 30       	cpi	r24, 0x01	; 1
    4c04:	19 f4       	brne	.+6      	; 0x4c0c <power+0x22>
		return num;
    4c06:	8c 81       	ldd	r24, Y+4	; 0x04
    4c08:	8e 83       	std	Y+6, r24	; 0x06
    4c0a:	1e c0       	rjmp	.+60     	; 0x4c48 <power+0x5e>
	}
	else if(power ==0){
    4c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0e:	88 23       	and	r24, r24
    4c10:	19 f4       	brne	.+6      	; 0x4c18 <power+0x2e>
		return 1;
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	8e 83       	std	Y+6, r24	; 0x06
    4c16:	18 c0       	rjmp	.+48     	; 0x4c48 <power+0x5e>
	}
	for(int i = 0; i<power; i++){
    4c18:	1a 82       	std	Y+2, r1	; 0x02
    4c1a:	19 82       	std	Y+1, r1	; 0x01
    4c1c:	0b c0       	rjmp	.+22     	; 0x4c34 <power+0x4a>
		result *= num;
    4c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c20:	8c 81       	ldd	r24, Y+4	; 0x04
    4c22:	98 9f       	mul	r25, r24
    4c24:	80 2d       	mov	r24, r0
    4c26:	11 24       	eor	r1, r1
    4c28:	8b 83       	std	Y+3, r24	; 0x03
		return num;
	}
	else if(power ==0){
		return 1;
	}
	for(int i = 0; i<power; i++){
    4c2a:	89 81       	ldd	r24, Y+1	; 0x01
    4c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c2e:	01 96       	adiw	r24, 0x01	; 1
    4c30:	9a 83       	std	Y+2, r25	; 0x02
    4c32:	89 83       	std	Y+1, r24	; 0x01
    4c34:	8d 81       	ldd	r24, Y+5	; 0x05
    4c36:	28 2f       	mov	r18, r24
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	89 81       	ldd	r24, Y+1	; 0x01
    4c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3e:	82 17       	cp	r24, r18
    4c40:	93 07       	cpc	r25, r19
    4c42:	6c f3       	brlt	.-38     	; 0x4c1e <power+0x34>
		result *= num;

	}
	return result;
    4c44:	8b 81       	ldd	r24, Y+3	; 0x03
    4c46:	8e 83       	std	Y+6, r24	; 0x06
    4c48:	8e 81       	ldd	r24, Y+6	; 0x06

}
    4c4a:	26 96       	adiw	r28, 0x06	; 6
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret

00004c5c <main>:
#include "APP/APP_Microwave_Interface.h"
#include "HAL/SENSORS/POT/POT_Interface.h"
#include "HAL/LCD/LCD_Interface.h"


void main(){
    4c5c:	df 93       	push	r29
    4c5e:	cf 93       	push	r28
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62

   System_voidInit();       /*initiat system functions*/
    4c64:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <System_voidInit>
   MicroWave_voidStart();   /*power on system*/
    4c68:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <MicroWave_voidStart>
    4c6c:	ff cf       	rjmp	.-2      	; 0x4c6c <main+0x10>

00004c6e <__mulsi3>:
    4c6e:	62 9f       	mul	r22, r18
    4c70:	d0 01       	movw	r26, r0
    4c72:	73 9f       	mul	r23, r19
    4c74:	f0 01       	movw	r30, r0
    4c76:	82 9f       	mul	r24, r18
    4c78:	e0 0d       	add	r30, r0
    4c7a:	f1 1d       	adc	r31, r1
    4c7c:	64 9f       	mul	r22, r20
    4c7e:	e0 0d       	add	r30, r0
    4c80:	f1 1d       	adc	r31, r1
    4c82:	92 9f       	mul	r25, r18
    4c84:	f0 0d       	add	r31, r0
    4c86:	83 9f       	mul	r24, r19
    4c88:	f0 0d       	add	r31, r0
    4c8a:	74 9f       	mul	r23, r20
    4c8c:	f0 0d       	add	r31, r0
    4c8e:	65 9f       	mul	r22, r21
    4c90:	f0 0d       	add	r31, r0
    4c92:	99 27       	eor	r25, r25
    4c94:	72 9f       	mul	r23, r18
    4c96:	b0 0d       	add	r27, r0
    4c98:	e1 1d       	adc	r30, r1
    4c9a:	f9 1f       	adc	r31, r25
    4c9c:	63 9f       	mul	r22, r19
    4c9e:	b0 0d       	add	r27, r0
    4ca0:	e1 1d       	adc	r30, r1
    4ca2:	f9 1f       	adc	r31, r25
    4ca4:	bd 01       	movw	r22, r26
    4ca6:	cf 01       	movw	r24, r30
    4ca8:	11 24       	eor	r1, r1
    4caa:	08 95       	ret

00004cac <__udivmodqi4>:
    4cac:	99 1b       	sub	r25, r25
    4cae:	79 e0       	ldi	r23, 0x09	; 9
    4cb0:	04 c0       	rjmp	.+8      	; 0x4cba <__udivmodqi4_ep>

00004cb2 <__udivmodqi4_loop>:
    4cb2:	99 1f       	adc	r25, r25
    4cb4:	96 17       	cp	r25, r22
    4cb6:	08 f0       	brcs	.+2      	; 0x4cba <__udivmodqi4_ep>
    4cb8:	96 1b       	sub	r25, r22

00004cba <__udivmodqi4_ep>:
    4cba:	88 1f       	adc	r24, r24
    4cbc:	7a 95       	dec	r23
    4cbe:	c9 f7       	brne	.-14     	; 0x4cb2 <__udivmodqi4_loop>
    4cc0:	80 95       	com	r24
    4cc2:	08 95       	ret

00004cc4 <__divmodhi4>:
    4cc4:	97 fb       	bst	r25, 7
    4cc6:	09 2e       	mov	r0, r25
    4cc8:	07 26       	eor	r0, r23
    4cca:	0a d0       	rcall	.+20     	; 0x4ce0 <__divmodhi4_neg1>
    4ccc:	77 fd       	sbrc	r23, 7
    4cce:	04 d0       	rcall	.+8      	; 0x4cd8 <__divmodhi4_neg2>
    4cd0:	2e d0       	rcall	.+92     	; 0x4d2e <__udivmodhi4>
    4cd2:	06 d0       	rcall	.+12     	; 0x4ce0 <__divmodhi4_neg1>
    4cd4:	00 20       	and	r0, r0
    4cd6:	1a f4       	brpl	.+6      	; 0x4cde <__divmodhi4_exit>

00004cd8 <__divmodhi4_neg2>:
    4cd8:	70 95       	com	r23
    4cda:	61 95       	neg	r22
    4cdc:	7f 4f       	sbci	r23, 0xFF	; 255

00004cde <__divmodhi4_exit>:
    4cde:	08 95       	ret

00004ce0 <__divmodhi4_neg1>:
    4ce0:	f6 f7       	brtc	.-4      	; 0x4cde <__divmodhi4_exit>
    4ce2:	90 95       	com	r25
    4ce4:	81 95       	neg	r24
    4ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce8:	08 95       	ret

00004cea <__udivmodsi4>:
    4cea:	a1 e2       	ldi	r26, 0x21	; 33
    4cec:	1a 2e       	mov	r1, r26
    4cee:	aa 1b       	sub	r26, r26
    4cf0:	bb 1b       	sub	r27, r27
    4cf2:	fd 01       	movw	r30, r26
    4cf4:	0d c0       	rjmp	.+26     	; 0x4d10 <__udivmodsi4_ep>

00004cf6 <__udivmodsi4_loop>:
    4cf6:	aa 1f       	adc	r26, r26
    4cf8:	bb 1f       	adc	r27, r27
    4cfa:	ee 1f       	adc	r30, r30
    4cfc:	ff 1f       	adc	r31, r31
    4cfe:	a2 17       	cp	r26, r18
    4d00:	b3 07       	cpc	r27, r19
    4d02:	e4 07       	cpc	r30, r20
    4d04:	f5 07       	cpc	r31, r21
    4d06:	20 f0       	brcs	.+8      	; 0x4d10 <__udivmodsi4_ep>
    4d08:	a2 1b       	sub	r26, r18
    4d0a:	b3 0b       	sbc	r27, r19
    4d0c:	e4 0b       	sbc	r30, r20
    4d0e:	f5 0b       	sbc	r31, r21

00004d10 <__udivmodsi4_ep>:
    4d10:	66 1f       	adc	r22, r22
    4d12:	77 1f       	adc	r23, r23
    4d14:	88 1f       	adc	r24, r24
    4d16:	99 1f       	adc	r25, r25
    4d18:	1a 94       	dec	r1
    4d1a:	69 f7       	brne	.-38     	; 0x4cf6 <__udivmodsi4_loop>
    4d1c:	60 95       	com	r22
    4d1e:	70 95       	com	r23
    4d20:	80 95       	com	r24
    4d22:	90 95       	com	r25
    4d24:	9b 01       	movw	r18, r22
    4d26:	ac 01       	movw	r20, r24
    4d28:	bd 01       	movw	r22, r26
    4d2a:	cf 01       	movw	r24, r30
    4d2c:	08 95       	ret

00004d2e <__udivmodhi4>:
    4d2e:	aa 1b       	sub	r26, r26
    4d30:	bb 1b       	sub	r27, r27
    4d32:	51 e1       	ldi	r21, 0x11	; 17
    4d34:	07 c0       	rjmp	.+14     	; 0x4d44 <__udivmodhi4_ep>

00004d36 <__udivmodhi4_loop>:
    4d36:	aa 1f       	adc	r26, r26
    4d38:	bb 1f       	adc	r27, r27
    4d3a:	a6 17       	cp	r26, r22
    4d3c:	b7 07       	cpc	r27, r23
    4d3e:	10 f0       	brcs	.+4      	; 0x4d44 <__udivmodhi4_ep>
    4d40:	a6 1b       	sub	r26, r22
    4d42:	b7 0b       	sbc	r27, r23

00004d44 <__udivmodhi4_ep>:
    4d44:	88 1f       	adc	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	5a 95       	dec	r21
    4d4a:	a9 f7       	brne	.-22     	; 0x4d36 <__udivmodhi4_loop>
    4d4c:	80 95       	com	r24
    4d4e:	90 95       	com	r25
    4d50:	bc 01       	movw	r22, r24
    4d52:	cd 01       	movw	r24, r26
    4d54:	08 95       	ret

00004d56 <__prologue_saves__>:
    4d56:	2f 92       	push	r2
    4d58:	3f 92       	push	r3
    4d5a:	4f 92       	push	r4
    4d5c:	5f 92       	push	r5
    4d5e:	6f 92       	push	r6
    4d60:	7f 92       	push	r7
    4d62:	8f 92       	push	r8
    4d64:	9f 92       	push	r9
    4d66:	af 92       	push	r10
    4d68:	bf 92       	push	r11
    4d6a:	cf 92       	push	r12
    4d6c:	df 92       	push	r13
    4d6e:	ef 92       	push	r14
    4d70:	ff 92       	push	r15
    4d72:	0f 93       	push	r16
    4d74:	1f 93       	push	r17
    4d76:	cf 93       	push	r28
    4d78:	df 93       	push	r29
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62
    4d7e:	ca 1b       	sub	r28, r26
    4d80:	db 0b       	sbc	r29, r27
    4d82:	0f b6       	in	r0, 0x3f	; 63
    4d84:	f8 94       	cli
    4d86:	de bf       	out	0x3e, r29	; 62
    4d88:	0f be       	out	0x3f, r0	; 63
    4d8a:	cd bf       	out	0x3d, r28	; 61
    4d8c:	09 94       	ijmp

00004d8e <__epilogue_restores__>:
    4d8e:	2a 88       	ldd	r2, Y+18	; 0x12
    4d90:	39 88       	ldd	r3, Y+17	; 0x11
    4d92:	48 88       	ldd	r4, Y+16	; 0x10
    4d94:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d96:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d98:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4da0:	b9 84       	ldd	r11, Y+9	; 0x09
    4da2:	c8 84       	ldd	r12, Y+8	; 0x08
    4da4:	df 80       	ldd	r13, Y+7	; 0x07
    4da6:	ee 80       	ldd	r14, Y+6	; 0x06
    4da8:	fd 80       	ldd	r15, Y+5	; 0x05
    4daa:	0c 81       	ldd	r16, Y+4	; 0x04
    4dac:	1b 81       	ldd	r17, Y+3	; 0x03
    4dae:	aa 81       	ldd	r26, Y+2	; 0x02
    4db0:	b9 81       	ldd	r27, Y+1	; 0x01
    4db2:	ce 0f       	add	r28, r30
    4db4:	d1 1d       	adc	r29, r1
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	f8 94       	cli
    4dba:	de bf       	out	0x3e, r29	; 62
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	cd bf       	out	0x3d, r28	; 61
    4dc0:	ed 01       	movw	r28, r26
    4dc2:	08 95       	ret

00004dc4 <_exit>:
    4dc4:	f8 94       	cli

00004dc6 <__stop_program>:
    4dc6:	ff cf       	rjmp	.-2      	; 0x4dc6 <__stop_program>
